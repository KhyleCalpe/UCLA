
Project_AEC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c774  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800ca0c  0800ca0c  0001ca0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca84  0800ca84  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca84  0800ca84  0001ca84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca8c  0800ca8c  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca8c  0800ca8c  0001ca8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca90  0800ca90  0001ca90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800ca94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000078  0800cb0c  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d8  0800cb6c  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00026d64  24000138  0800cbcc  00020138  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24026e9c  0800cbcc  00026e9c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 14 .debug_info   000309e4  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00004a8d  00000000  00000000  00050b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001bd8  00000000  00000000  000555d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a10  00000000  00000000  000571b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003c7b3  00000000  00000000  00058bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00019b35  00000000  00000000  00095373  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001818e3  00000000  00000000  000aeea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000f4  00000000  00000000  0023078b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007a04  00000000  00000000  00230880  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00000334  00000000  00000000  00238284  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000138 	.word	0x24000138
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c9f4 	.word	0x0800c9f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400013c 	.word	0x2400013c
 80002d4:	0800c9f4 	.word	0x0800c9f4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <prewhiten_x>:
		-0.053661242f, -0.051936015f, -0.049576525f, -0.046636667f,
		-0.043183226f, 0.0f
};

float prewhiten_x(float in)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	ed87 0a01 	vstr	s0, [r7, #4]
  // Chebyshev IIR filter, Filter type: HP
  // Passband: 3700 - 4000.0 Hz
  // Passband ripple: 1.5 dB, Order: 1
  float out = a0 * in + a1 * y + b1 * z;
 80005e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000638 <prewhiten_x+0x60>
 80005e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80005ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005ee:	eddf 6a13 	vldr	s13, [pc, #76]	; 800063c <prewhiten_x+0x64>
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <prewhiten_x+0x68>)
 80005f4:	edd3 7a00 	vldr	s15, [r3]
 80005f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000600:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000644 <prewhiten_x+0x6c>
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <prewhiten_x+0x70>)
 8000606:	edd3 7a00 	vldr	s15, [r3]
 800060a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800060e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000612:	edc7 7a03 	vstr	s15, [r7, #12]
  y = in;
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <prewhiten_x+0x68>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6013      	str	r3, [r2, #0]
  z = out;
 800061c:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <prewhiten_x+0x70>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	6013      	str	r3, [r2, #0]
  return out;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	ee07 3a90 	vmov	s15, r3
}
 8000628:	eeb0 0a67 	vmov.f32	s0, s15
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	3dd8be63 	.word	0x3dd8be63
 800063c:	bdd8be63 	.word	0xbdd8be63
 8000640:	24004d98 	.word	0x24004d98
 8000644:	3f49d06b 	.word	0x3f49d06b
 8000648:	24004d9c 	.word	0x24004d9c

0800064c <bandpass>:
  m = in;
  n = out;
  return out;
}

float bandpass(float in) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	ed87 0a01 	vstr	s0, [r7, #4]
	memmove(u+1, u, 13*sizeof(float));
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <bandpass+0xa4>)
 8000658:	2234      	movs	r2, #52	; 0x34
 800065a:	4926      	ldr	r1, [pc, #152]	; (80006f4 <bandpass+0xa8>)
 800065c:	4618      	mov	r0, r3
 800065e:	f00c f895 	bl	800c78c <memmove>
	u[0] = in;
 8000662:	4a24      	ldr	r2, [pc, #144]	; (80006f4 <bandpass+0xa8>)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6013      	str	r3, [r2, #0]
	float sum0 = 0.0;
 8000668:	f04f 0300 	mov.w	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
	float sum1 = 0.0;
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 14; i+= 2) {
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	e02c      	b.n	80006d4 <bandpass+0x88>
		sum0 += coef[i] * u[i];
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <bandpass+0xac>)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	ed93 7a00 	vldr	s14, [r3]
 8000686:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <bandpass+0xa8>)
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4413      	add	r3, r2
 800068e:	edd3 7a00 	vldr	s15, [r3]
 8000692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000696:	ed97 7a05 	vldr	s14, [r7, #20]
 800069a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800069e:	edc7 7a05 	vstr	s15, [r7, #20]
		sum1 += coef[i+1] * u[i+1];
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <bandpass+0xac>)
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	ed93 7a00 	vldr	s14, [r3]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3301      	adds	r3, #1
 80006b4:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <bandpass+0xa8>)
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	edd3 7a00 	vldr	s15, [r3]
 80006be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80006c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ca:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < 14; i+= 2) {
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3302      	adds	r3, #2
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b0d      	cmp	r3, #13
 80006d8:	ddcf      	ble.n	800067a <bandpass+0x2e>
	}
	return sum0+sum1;
 80006da:	ed97 7a05 	vldr	s14, [r7, #20]
 80006de:	edd7 7a04 	vldr	s15, [r7, #16]
 80006e2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80006e6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	24004d64 	.word	0x24004d64
 80006f4:	24004d60 	.word	0x24004d60
 80006f8:	0800ca1c 	.word	0x0800ca1c

080006fc <dtd>:

bool dtd(float input, float output)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	ed87 0a01 	vstr	s0, [r7, #4]
 8000706:	edc7 0a00 	vstr	s1, [r7]
	abs_x[head] = fabs(input);
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <dtd+0x94>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000712:	eef0 7ae7 	vabs.f32	s15, s15
 8000716:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <dtd+0x98>)
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	edc3 7a00 	vstr	s15, [r3]
	float max = 0;
 8000720:	f04f 0300 	mov.w	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
	float* max_val = &max;
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	60fb      	str	r3, [r7, #12]
	arm_max_no_idx_f32(abs_x + head, NLMS_LEN, max_val);
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <dtd+0x94>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <dtd+0x98>)
 8000734:	4413      	add	r3, r2
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073c:	4618      	mov	r0, r3
 800073e:	f00b ff8b 	bl	800c658 <arm_max_no_idx_f32>

	// check dtd condition
	if ( fabs(output) > THRESHOLD * max)
 8000742:	edd7 7a00 	vldr	s15, [r7]
 8000746:	eeb0 7ae7 	vabs.f32	s14, s15
 800074a:	edd7 7a02 	vldr	s15, [r7, #8]
 800074e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000752:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800075a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075e:	dd02      	ble.n	8000766 <dtd+0x6a>
		hold_timer = TIMEOUT;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <dtd+0x9c>)
 8000762:	22c8      	movs	r2, #200	; 0xc8
 8000764:	601a      	str	r2, [r3, #0]
	if (hold_timer) --hold_timer;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <dtd+0x9c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d004      	beq.n	8000778 <dtd+0x7c>
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <dtd+0x9c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3b01      	subs	r3, #1
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <dtd+0x9c>)
 8000776:	6013      	str	r3, [r2, #0]

	return !(hold_timer > 0);
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <dtd+0x9c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	bfd4      	ite	le
 8000780:	2301      	movle	r3, #1
 8000782:	2300      	movgt	r3, #0
 8000784:	b2db      	uxtb	r3, r3
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	24000000 	.word	0x24000000
 8000794:	24001560 	.word	0x24001560
 8000798:	24000154 	.word	0x24000154

0800079c <nlms>:

float nlms(float input, float output, bool update)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b08b      	sub	sp, #44	; 0x2c
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80007a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	x[head] = input;
 80007ae:	4b5c      	ldr	r3, [pc, #368]	; (8000920 <nlms+0x184>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a5c      	ldr	r2, [pc, #368]	; (8000924 <nlms+0x188>)
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	601a      	str	r2, [r3, #0]
	xf[head] = prewhiten_x(input);
 80007bc:	4b58      	ldr	r3, [pc, #352]	; (8000920 <nlms+0x184>)
 80007be:	681c      	ldr	r4, [r3, #0]
 80007c0:	ed97 0a03 	vldr	s0, [r7, #12]
 80007c4:	f7ff ff08 	bl	80005d8 <prewhiten_x>
 80007c8:	eef0 7a40 	vmov.f32	s15, s0
 80007cc:	4a56      	ldr	r2, [pc, #344]	; (8000928 <nlms+0x18c>)
 80007ce:	00a3      	lsls	r3, r4, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	edc3 7a00 	vstr	s15, [r3]

	// apply echo cancel
	float echo = 0;
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
	float* echo_ptr = &echo;
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	61fb      	str	r3, [r7, #28]
	arm_dot_prod_f32(x + head, weights, NLMS_LEN, echo_ptr);
 80007e2:	4b4f      	ldr	r3, [pc, #316]	; (8000920 <nlms+0x184>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4a4e      	ldr	r2, [pc, #312]	; (8000924 <nlms+0x188>)
 80007ea:	1898      	adds	r0, r3, r2
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007f2:	494e      	ldr	r1, [pc, #312]	; (800092c <nlms+0x190>)
 80007f4:	f00b ff44 	bl	800c680 <arm_dot_prod_f32>
	float error = output - *echo_ptr;
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	edd3 7a00 	vldr	s15, [r3]
 80007fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000806:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float ef = prewhiten_x(error);
 800080a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800080e:	f7ff fee3 	bl	80005d8 <prewhiten_x>
 8000812:	ed87 0a06 	vstr	s0, [r7, #24]

	// iterate dot product
	signal_energy += (xf[head]*xf[head] - xf[head + NLMS_LEN - 1]*xf[head + NLMS_LEN - 1]);
 8000816:	4b42      	ldr	r3, [pc, #264]	; (8000920 <nlms+0x184>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a43      	ldr	r2, [pc, #268]	; (8000928 <nlms+0x18c>)
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	ed93 7a00 	vldr	s14, [r3]
 8000824:	4b3e      	ldr	r3, [pc, #248]	; (8000920 <nlms+0x184>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a3f      	ldr	r2, [pc, #252]	; (8000928 <nlms+0x18c>)
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000836:	4b3a      	ldr	r3, [pc, #232]	; (8000920 <nlms+0x184>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800083e:	4a3a      	ldr	r2, [pc, #232]	; (8000928 <nlms+0x18c>)
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	edd3 6a00 	vldr	s13, [r3]
 8000848:	4b35      	ldr	r3, [pc, #212]	; (8000920 <nlms+0x184>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8000850:	4a35      	ldr	r2, [pc, #212]	; (8000928 <nlms+0x18c>)
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	edd3 7a00 	vldr	s15, [r3]
 800085a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800085e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000862:	4b33      	ldr	r3, [pc, #204]	; (8000930 <nlms+0x194>)
 8000864:	edd3 7a00 	vldr	s15, [r3]
 8000868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800086c:	4b30      	ldr	r3, [pc, #192]	; (8000930 <nlms+0x194>)
 800086e:	edc3 7a00 	vstr	s15, [r3]

	// update filter if no dtd
	if (update)
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d04a      	beq.n	800090e <nlms+0x172>
	{
		float n_stepsize = stepsize * ef / ( signal_energy + 1 );
 8000878:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000934 <nlms+0x198>
 800087c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000880:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <nlms+0x194>)
 8000886:	edd3 7a00 	vldr	s15, [r3]
 800088a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800088e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000896:	edc7 7a05 	vstr	s15, [r7, #20]
		for (int i = 0; i < NLMS_LEN; i+=2)
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	e02a      	b.n	80008f6 <nlms+0x15a>
		{
			weights[i] = n_stepsize * x[i + head];
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <nlms+0x184>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	6a3b      	ldr	r3, [r7, #32]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <nlms+0x188>)
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	ed93 7a00 	vldr	s14, [r3]
 80008b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80008b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <nlms+0x190>)
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	edc3 7a00 	vstr	s15, [r3]
			weights[i + 1] = n_stepsize * x[i + head + 1];
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <nlms+0x184>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	4413      	add	r3, r2
 80008ce:	3301      	adds	r3, #1
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <nlms+0x188>)
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	4413      	add	r3, r2
 80008d6:	ed93 7a00 	vldr	s14, [r3]
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	3301      	adds	r3, #1
 80008de:	edd7 7a05 	vldr	s15, [r7, #20]
 80008e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e6:	4a11      	ldr	r2, [pc, #68]	; (800092c <nlms+0x190>)
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	edc3 7a00 	vstr	s15, [r3]
		for (int i = 0; i < NLMS_LEN; i+=2)
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	3302      	adds	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008fc:	dbd0      	blt.n	80008a0 <nlms+0x104>
		}

		// NLP attenuates residual echo if no near talk
		// works well only if dtd is properly working
		error *= ATTENUATION;
 80008fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000902:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800090a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}

	return error;
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	ee07 3a90 	vmov	s15, r3
}
 8000914:	eeb0 0a67 	vmov.f32	s0, s15
 8000918:	372c      	adds	r7, #44	; 0x2c
 800091a:	46bd      	mov	sp, r7
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	bf00      	nop
 8000920:	24000000 	.word	0x24000000
 8000924:	24000160 	.word	0x24000160
 8000928:	24003960 	.word	0x24003960
 800092c:	24002960 	.word	0x24002960
 8000930:	2400015c 	.word	0x2400015c
 8000934:	3f333333 	.word	0x3f333333

08000938 <aec>:

void aec(int len)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	float in = 0;
 8000940:	f04f 0300 	mov.w	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
	float out = 0;
 8000946:	f04f 0300 	mov.w	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]

	// compute DC value
	for (int i = 0; i < len; i+=2)
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	e019      	b.n	8000986 <aec+0x4e>
		DC_offset += (float)(ADC_buff[i] + ADC_buff[i + 1]);
 8000952:	4a77      	ldr	r2, [pc, #476]	; (8000b30 <aec+0x1f8>)
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095a:	4619      	mov	r1, r3
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	3301      	adds	r3, #1
 8000960:	4a73      	ldr	r2, [pc, #460]	; (8000b30 <aec+0x1f8>)
 8000962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000966:	440b      	add	r3, r1
 8000968:	ee07 3a90 	vmov	s15, r3
 800096c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000970:	4b70      	ldr	r3, [pc, #448]	; (8000b34 <aec+0x1fc>)
 8000972:	edd3 7a00 	vldr	s15, [r3]
 8000976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097a:	4b6e      	ldr	r3, [pc, #440]	; (8000b34 <aec+0x1fc>)
 800097c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < len; i+=2)
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	3302      	adds	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	429a      	cmp	r2, r3
 800098c:	dbe1      	blt.n	8000952 <aec+0x1a>
	DC_offset /= len;
 800098e:	4b69      	ldr	r3, [pc, #420]	; (8000b34 <aec+0x1fc>)
 8000990:	edd3 6a00 	vldr	s13, [r3]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800099e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009a2:	4b64      	ldr	r3, [pc, #400]	; (8000b34 <aec+0x1fc>)
 80009a4:	edc3 7a00 	vstr	s15, [r3]

	for (int j = 0; j < len; j++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e091      	b.n	8000ad2 <aec+0x19a>
	{
		in = (float)ADC_buff[j] - DC_offset;
 80009ae:	4a60      	ldr	r2, [pc, #384]	; (8000b30 <aec+0x1f8>)
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b6:	ee07 3a90 	vmov	s15, r3
 80009ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <aec+0x1fc>)
 80009c0:	edd3 7a00 	vldr	s15, [r3]
 80009c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009c8:	edc7 7a04 	vstr	s15, [r7, #16]
		if (j > pts)
 80009cc:	4b5a      	ldr	r3, [pc, #360]	; (8000b38 <aec+0x200>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	dd14      	ble.n	8000a00 <aec+0xc8>
			out = (float)ADC_out[j] - gain*DC_offset;
 80009d6:	4a59      	ldr	r2, [pc, #356]	; (8000b3c <aec+0x204>)
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009e6:	4b56      	ldr	r3, [pc, #344]	; (8000b40 <aec+0x208>)
 80009e8:	edd3 6a00 	vldr	s13, [r3]
 80009ec:	4b51      	ldr	r3, [pc, #324]	; (8000b34 <aec+0x1fc>)
 80009ee:	edd3 7a00 	vldr	s15, [r3]
 80009f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fa:	edc7 7a07 	vstr	s15, [r7, #28]
 80009fe:	e00e      	b.n	8000a1e <aec+0xe6>
		else
			out = (float)ADC_out[j] - DC_offset;
 8000a00:	4a4e      	ldr	r2, [pc, #312]	; (8000b3c <aec+0x204>)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a08:	ee07 3a90 	vmov	s15, r3
 8000a0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a10:	4b48      	ldr	r3, [pc, #288]	; (8000b34 <aec+0x1fc>)
 8000a12:	edd3 7a00 	vldr	s15, [r3]
 8000a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a1a:	edc7 7a07 	vstr	s15, [r7, #28]

		bool update = dtd(in, out);
 8000a1e:	edd7 0a07 	vldr	s1, [r7, #28]
 8000a22:	ed97 0a04 	vldr	s0, [r7, #16]
 8000a26:	f7ff fe69 	bl	80006fc <dtd>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	73fb      	strb	r3, [r7, #15]
		ADC_out[j] = (uint16_t) bandpass( nlms(in, out, update) + DC_offset );
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	4618      	mov	r0, r3
 8000a32:	edd7 0a07 	vldr	s1, [r7, #28]
 8000a36:	ed97 0a04 	vldr	s0, [r7, #16]
 8000a3a:	f7ff feaf 	bl	800079c <nlms>
 8000a3e:	eeb0 7a40 	vmov.f32	s14, s0
 8000a42:	4b3c      	ldr	r3, [pc, #240]	; (8000b34 <aec+0x1fc>)
 8000a44:	edd3 7a00 	vldr	s15, [r3]
 8000a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a50:	f7ff fdfc 	bl	800064c <bandpass>
 8000a54:	eef0 7a40 	vmov.f32	s15, s0
 8000a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a5c:	ee17 3a90 	vmov	r3, s15
 8000a60:	b299      	uxth	r1, r3
 8000a62:	4a36      	ldr	r2, [pc, #216]	; (8000b3c <aec+0x204>)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		// shift buffers back if full
		if (--head < 0)
 8000a6a:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <aec+0x20c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	4a34      	ldr	r2, [pc, #208]	; (8000b44 <aec+0x20c>)
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <aec+0x20c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	da27      	bge.n	8000acc <aec+0x194>
		{
			head = PROVISION;
 8000a7c:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <aec+0x20c>)
 8000a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a82:	601a      	str	r2, [r3, #0]
			memmove(x + head + 1, x, (NLMS_LEN - 1)*sizeof(float));
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <aec+0x20c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <aec+0x210>)
 8000a8e:	4413      	add	r3, r2
 8000a90:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000a94:	492c      	ldr	r1, [pc, #176]	; (8000b48 <aec+0x210>)
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00b fe78 	bl	800c78c <memmove>
			memmove(abs_x + head + 1, abs_x, (NLMS_LEN - 1)*sizeof(float));
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <aec+0x20c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4a29      	ldr	r2, [pc, #164]	; (8000b4c <aec+0x214>)
 8000aa6:	4413      	add	r3, r2
 8000aa8:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000aac:	4927      	ldr	r1, [pc, #156]	; (8000b4c <aec+0x214>)
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f00b fe6c 	bl	800c78c <memmove>
			memmove(xf + head + 1, xf, (NLMS_LEN - 1)*sizeof(float));
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <aec+0x20c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <aec+0x218>)
 8000abe:	4413      	add	r3, r2
 8000ac0:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000ac4:	4922      	ldr	r1, [pc, #136]	; (8000b50 <aec+0x218>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f00b fe60 	bl	800c78c <memmove>
	for (int j = 0; j < len; j++)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	f6ff af69 	blt.w	80009ae <aec+0x76>
		}
	}
	// reset parameters
	head = PROVISION;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <aec+0x20c>)
 8000ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae2:	601a      	str	r2, [r3, #0]
	DC_offset = 0;
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <aec+0x1fc>)
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
	signal_energy = 0;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <aec+0x21c>)
 8000aee:	f04f 0200 	mov.w	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
	hold_timer = 0;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <aec+0x220>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
	//v = 0;
	y = 0;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <aec+0x224>)
 8000afc:	f04f 0200 	mov.w	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
	z = 0;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <aec+0x228>)
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
	m = 0;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <aec+0x22c>)
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
	n = 0;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <aec+0x230>)
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
	memset(u, 0, 14*sizeof(u));
 8000b1a:	f44f 7244 	mov.w	r2, #784	; 0x310
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <aec+0x234>)
 8000b22:	f00b fe4c 	bl	800c7be <memset>
}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24004da8 	.word	0x24004da8
 8000b34:	24000158 	.word	0x24000158
 8000b38:	24026730 	.word	0x24026730
 8000b3c:	240147a8 	.word	0x240147a8
 8000b40:	2402672c 	.word	0x2402672c
 8000b44:	24000000 	.word	0x24000000
 8000b48:	24000160 	.word	0x24000160
 8000b4c:	24001560 	.word	0x24001560
 8000b50:	24003960 	.word	0x24003960
 8000b54:	2400015c 	.word	0x2400015c
 8000b58:	24000154 	.word	0x24000154
 8000b5c:	24004d98 	.word	0x24004d98
 8000b60:	24004d9c 	.word	0x24004d9c
 8000b64:	24004da0 	.word	0x24004da0
 8000b68:	24004da4 	.word	0x24004da4
 8000b6c:	24004d60 	.word	0x24004d60

08000b70 <echo>:
#include "echo.h"

void echo(int buffer_length, float fs, float delay, float gain)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b7c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000b80:	ed87 1a00 	vstr	s2, [r7]
	// Calculate samples
	float dt  = 1 / fs;
 8000b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000b88:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b90:	edc7 7a05 	vstr	s15, [r7, #20]
	pts = round((delay/1000.f)/dt);
 8000b94:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b98:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000cc4 <echo+0x154>
 8000b9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ba0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ba8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bac:	eeb0 0b47 	vmov.f64	d0, d7
 8000bb0:	f00b feda 	bl	800c968 <round>
 8000bb4:	eeb0 7b40 	vmov.f64	d7, d0
 8000bb8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bbc:	ee17 2a90 	vmov	r2, s15
 8000bc0:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <echo+0x158>)
 8000bc2:	601a      	str	r2, [r3, #0]
	// Even out pts
	pts -= pts%2;
 8000bc4:	4b40      	ldr	r3, [pc, #256]	; (8000cc8 <echo+0x158>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <echo+0x158>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	bfb8      	it	lt
 8000bd4:	425b      	neglt	r3, r3
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	4a3b      	ldr	r2, [pc, #236]	; (8000cc8 <echo+0x158>)
 8000bda:	6013      	str	r3, [r2, #0]
	// Fill in output before echo
	for (int i = 0; i < pts; i+=2)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	e014      	b.n	8000c0c <echo+0x9c>
	{
		ADC_out[i] = ADC_buff[i];
 8000be2:	4a3a      	ldr	r2, [pc, #232]	; (8000ccc <echo+0x15c>)
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000bea:	4a39      	ldr	r2, [pc, #228]	; (8000cd0 <echo+0x160>)
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_out[i+1] = ADC_buff[i+1];
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4934      	ldr	r1, [pc, #208]	; (8000ccc <echo+0x15c>)
 8000bfc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000c00:	4a33      	ldr	r2, [pc, #204]	; (8000cd0 <echo+0x160>)
 8000c02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < pts; i+=2)
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3302      	adds	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	4b2e      	ldr	r3, [pc, #184]	; (8000cc8 <echo+0x158>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	69fa      	ldr	r2, [r7, #28]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbe5      	blt.n	8000be2 <echo+0x72>
	}
	// Add the echo signal
	for (int j = pts; j < buffer_length; j+=2)
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <echo+0x158>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	61bb      	str	r3, [r7, #24]
 8000c1c:	e049      	b.n	8000cb2 <echo+0x142>
	{
		ADC_out[j] = ADC_buff[j] + ADC_buff[j-pts] * gain;
 8000c1e:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <echo+0x15c>)
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c26:	ee07 3a90 	vmov	s15, r3
 8000c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <echo+0x158>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <echo+0x15c>)
 8000c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c3c:	ee07 3a90 	vmov	s15, r3
 8000c40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c44:	edd7 7a00 	vldr	s15, [r7]
 8000c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c54:	ee17 3a90 	vmov	r3, s15
 8000c58:	b299      	uxth	r1, r3
 8000c5a:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <echo+0x160>)
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ADC_out[j+1] = ADC_buff[j+1] + ADC_buff[j+1-pts] * gain;
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <echo+0x15c>)
 8000c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6c:	ee07 3a90 	vmov	s15, r3
 8000c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <echo+0x158>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <echo+0x15c>)
 8000c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c84:	ee07 3a90 	vmov	s15, r3
 8000c88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c8c:	edd7 7a00 	vldr	s15, [r7]
 8000c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca0:	ee17 2a90 	vmov	r2, s15
 8000ca4:	b291      	uxth	r1, r2
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <echo+0x160>)
 8000ca8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int j = pts; j < buffer_length; j+=2)
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	3302      	adds	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dbb1      	blt.n	8000c1e <echo+0xae>
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	447a0000 	.word	0x447a0000
 8000cc8:	24026730 	.word	0x24026730
 8000ccc:	24004da8 	.word	0x24004da8
 8000cd0:	240147a8 	.word	0x240147a8

08000cd4 <setSeed>:
/*
 *  Helper Functions
 */

void setSeed(int seed)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	// set the seed
	srand(seed);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f00b fd76 	bl	800c7d0 <srand>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <randFloat>:

float randFloat(float min, float max)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cf6:	edc7 0a00 	vstr	s1, [r7]
	float scale = rand() / (float) RAND_MAX; // [0, 1.0]
 8000cfa:	f00b fd8d 	bl	800c818 <rand>
 8000cfe:	ee07 0a90 	vmov	s15, r0
 8000d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d06:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000d38 <randFloat+0x4c>
 8000d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0e:	edc7 7a03 	vstr	s15, [r7, #12]
	return min + scale * (max - min);      // [min, max]
 8000d12:	ed97 7a00 	vldr	s14, [r7]
 8000d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	4f000000 	.word	0x4f000000

08000d3c <delay_us>:

float magprint = 0;
float max_samp = 0;
// Timer for microsecond-ish delay
void delay_us (uint16_t us)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <delay_us+0x2c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8000d4e:	bf00      	nop
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <delay_us+0x2c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d3f9      	bcc.n	8000d50 <delay_us+0x14>
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	24026da4 	.word	0x24026da4

08000d6c <playback>:

// Playback function
// Start a playback
void playback(uint16_t input[ADC_BUF_SIZE])
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	6078      	str	r0, [r7, #4]
	if(HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)input, ADC_BUF_SIZE, DAC_ALIGN_12B_R) != HAL_OK){
 8000d74:	2300      	movs	r3, #0
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4809      	ldr	r0, [pc, #36]	; (8000da8 <playback+0x3c>)
 8000d82:	f003 f9bb 	bl	80040fc <HAL_DAC_Start_DMA>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <playback+0x24>
		Error_Handler();
 8000d8c:	f000 fedc 	bl	8001b48 <Error_Handler>
	}
	while (1){
		if(play_done == 1){
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <playback+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d1fb      	bne.n	8000d90 <playback+0x24>
			play_done = 0;
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <playback+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
			break;
 8000d9e:	bf00      	nop
		}
	}
};
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2402675c 	.word	0x2402675c
 8000dac:	24026738 	.word	0x24026738

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	setSeed(1000);
 8000db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dba:	f7ff ff8b 	bl	8000cd4 <setSeed>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbe:	f001 fabd 	bl	800233c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 fa2b 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f000 fd57 	bl	8001878 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dca:	f000 fd2d 	bl	8001828 <MX_DMA_Init>
  MX_ETH_Init();
 8000dce:	f000 fbb9 	bl	8001544 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000dd2:	f000 fcab 	bl	800172c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dd6:	f000 fcf5 	bl	80017c4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000dda:	f000 fb09 	bl	80013f0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000dde:	f000 fb7f 	bl	80014e0 <MX_DAC1_Init>
  MX_TIM1_Init();
 8000de2:	f000 fc01 	bl	80015e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000de6:	f000 fc53 	bl	8001690 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET,ADC_SINGLE_ENDED) != HAL_OK){
 8000dea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000dee:	2100      	movs	r1, #0
 8000df0:	48aa      	ldr	r0, [pc, #680]	; (800109c <main+0x2ec>)
 8000df2:	f002 ff13 	bl	8003c1c <HAL_ADCEx_Calibration_Start>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <main+0x50>
		Error_Handler();
 8000dfc:	f000 fea4 	bl	8001b48 <Error_Handler>
	}
	HAL_TIM_Base_Start(&htim1);
 8000e00:	48a7      	ldr	r0, [pc, #668]	; (80010a0 <main+0x2f0>)
 8000e02:	f009 fe39 	bl	800aa78 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim2);
 8000e06:	48a7      	ldr	r0, [pc, #668]	; (80010a4 <main+0x2f4>)
 8000e08:	f009 fe36 	bl	800aa78 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// Wait until a button is pressed
		if(button_state == 1){ // Record and Playback
 8000e0c:	4ba6      	ldr	r3, [pc, #664]	; (80010a8 <main+0x2f8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	f040 809d 	bne.w	8000f50 <main+0x1a0>
			// Red LED ON for LED_DURATION
			HAL_GPIO_WritePin(GPIOG, LED_RED_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2102      	movs	r1, #2
 8000e1a:	48a4      	ldr	r0, [pc, #656]	; (80010ac <main+0x2fc>)
 8000e1c:	f006 fdb6 	bl	800798c <HAL_GPIO_WritePin>
			HAL_Delay(LED_DURATION);
 8000e20:	20fa      	movs	r0, #250	; 0xfa
 8000e22:	f001 fb1d 	bl	8002460 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOG, LED_RED_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2102      	movs	r1, #2
 8000e2a:	48a0      	ldr	r0, [pc, #640]	; (80010ac <main+0x2fc>)
 8000e2c:	f006 fdae 	bl	800798c <HAL_GPIO_WritePin>
			// Yellow LED ON for LED_DURATION
			HAL_GPIO_WritePin(GPIOF, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e36:	489e      	ldr	r0, [pc, #632]	; (80010b0 <main+0x300>)
 8000e38:	f006 fda8 	bl	800798c <HAL_GPIO_WritePin>
			HAL_Delay(LED_DURATION);
 8000e3c:	20fa      	movs	r0, #250	; 0xfa
 8000e3e:	f001 fb0f 	bl	8002460 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOF, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e48:	4899      	ldr	r0, [pc, #612]	; (80010b0 <main+0x300>)
 8000e4a:	f006 fd9f 	bl	800798c <HAL_GPIO_WritePin>
			// Green LED ON
			HAL_GPIO_WritePin(GPIOF, LED_GREEN_Pin, GPIO_PIN_SET);
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	4897      	ldr	r0, [pc, #604]	; (80010b0 <main+0x300>)
 8000e54:	f006 fd9a 	bl	800798c <HAL_GPIO_WritePin>

			// Start a recording
			if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC_buff, ADC_BUF_SIZE) != HAL_OK){
 8000e58:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000e5c:	4995      	ldr	r1, [pc, #596]	; (80010b4 <main+0x304>)
 8000e5e:	488f      	ldr	r0, [pc, #572]	; (800109c <main+0x2ec>)
 8000e60:	f001 ff18 	bl	8002c94 <HAL_ADC_Start_DMA>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <main+0xbe>
				Error_Handler();
 8000e6a:	f000 fe6d 	bl	8001b48 <Error_Handler>
			}
			while (1)
			{
				if(record_done == 1){
 8000e6e:	4b92      	ldr	r3, [pc, #584]	; (80010b8 <main+0x308>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d1fb      	bne.n	8000e6e <main+0xbe>
					record_done = 0;
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <main+0x308>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
					break;
 8000e7c:	bf00      	nop
				}
			}

			// Green LED OFF & Yellow LED ON
			HAL_GPIO_WritePin(GPIOF, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	488b      	ldr	r0, [pc, #556]	; (80010b0 <main+0x300>)
 8000e84:	f006 fd82 	bl	800798c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8e:	4888      	ldr	r0, [pc, #544]	; (80010b0 <main+0x300>)
 8000e90:	f006 fd7c 	bl	800798c <HAL_GPIO_WritePin>
			// Yellow LED OFF & Green LED ON
			HAL_GPIO_WritePin(GPIOF, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9a:	4885      	ldr	r0, [pc, #532]	; (80010b0 <main+0x300>)
 8000e9c:	f006 fd76 	bl	800798c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, LED_GREEN_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	4882      	ldr	r0, [pc, #520]	; (80010b0 <main+0x300>)
 8000ea6:	f006 fd71 	bl	800798c <HAL_GPIO_WritePin>

			// Start a playback
			playback(ADC_buff);
 8000eaa:	4882      	ldr	r0, [pc, #520]	; (80010b4 <main+0x304>)
 8000eac:	f7ff ff5e 	bl	8000d6c <playback>

			// Trace signal
			for (int i=0; i<ADC_BUF_SIZE; i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb4:	e01c      	b.n	8000ef0 <main+0x140>
			{
				int currVal = ADC_buff[i];
 8000eb6:	4a7f      	ldr	r2, [pc, #508]	; (80010b4 <main+0x304>)
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ebe:	607b      	str	r3, [r7, #4]
				if (currVal > max_samp) max_samp = currVal;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eca:	4b7c      	ldr	r3, [pc, #496]	; (80010bc <main+0x30c>)
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed8:	dd07      	ble.n	8000eea <main+0x13a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee4:	4b75      	ldr	r3, [pc, #468]	; (80010bc <main+0x30c>)
 8000ee6:	edc3 7a00 	vstr	s15, [r3]
			for (int i=0; i<ADC_BUF_SIZE; i++)
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	3301      	adds	r3, #1
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000ef6:	dbde      	blt.n	8000eb6 <main+0x106>
			}
			for (int i=0; i<ADC_BUF_SIZE; i++)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
 8000efc:	e016      	b.n	8000f2c <main+0x17c>
			{
				magprint = ADC_buff[i]/max_samp;
 8000efe:	4a6d      	ldr	r2, [pc, #436]	; (80010b4 <main+0x304>)
 8000f00:	6a3b      	ldr	r3, [r7, #32]
 8000f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f06:	ee07 3a90 	vmov	s15, r3
 8000f0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <main+0x30c>)
 8000f10:	ed93 7a00 	vldr	s14, [r3]
 8000f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f18:	4b69      	ldr	r3, [pc, #420]	; (80010c0 <main+0x310>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
				delay_us(600);
 8000f1e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000f22:	f7ff ff0b 	bl	8000d3c <delay_us>
			for (int i=0; i<ADC_BUF_SIZE; i++)
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000f32:	dbe4      	blt.n	8000efe <main+0x14e>
			}
			max_samp = 0;
 8000f34:	4b61      	ldr	r3, [pc, #388]	; (80010bc <main+0x30c>)
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

			// Recording sample exists
			if_record = 1;
 8000f3c:	4b61      	ldr	r3, [pc, #388]	; (80010c4 <main+0x314>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
			// Reset echo state
			is_echo = 0;
 8000f42:	4b61      	ldr	r3, [pc, #388]	; (80010c8 <main+0x318>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
			// Reset button state
			button_state = 0;
 8000f48:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <main+0x2f8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e146      	b.n	80011de <main+0x42e>
		}else if(button_state == 2){	// Echo Application and Playback
 8000f50:	4b55      	ldr	r3, [pc, #340]	; (80010a8 <main+0x2f8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	f040 80cd 	bne.w	80010f4 <main+0x344>
			// Check if a recording sample exists
			if(!if_record) continue;
 8000f5a:	4b5a      	ldr	r3, [pc, #360]	; (80010c4 <main+0x314>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 8148 	beq.w	80011f4 <main+0x444>

			// Echo application
			if(!is_echo)
 8000f64:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <main+0x318>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d136      	bne.n	8000fda <main+0x22a>
			{
				// Yellow LED ON & Red LED OFF to signal activity
				HAL_GPIO_WritePin(GPIOF, LED_YELLOW_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f72:	484f      	ldr	r0, [pc, #316]	; (80010b0 <main+0x300>)
 8000f74:	f006 fd0a 	bl	800798c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOG, LED_RED_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	484b      	ldr	r0, [pc, #300]	; (80010ac <main+0x2fc>)
 8000f7e:	f006 fd05 	bl	800798c <HAL_GPIO_WritePin>
				// 50 ms to 200 ms at 0.1 to 0.4 gain
				delay = randFloat(50, 200);
 8000f82:	eddf 0a52 	vldr	s1, [pc, #328]	; 80010cc <main+0x31c>
 8000f86:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80010d0 <main+0x320>
 8000f8a:	f7ff feaf 	bl	8000cec <randFloat>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
 8000f92:	4b50      	ldr	r3, [pc, #320]	; (80010d4 <main+0x324>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
				gain = randFloat(0.1, 0.4);
 8000f98:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80010d8 <main+0x328>
 8000f9c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80010dc <main+0x32c>
 8000fa0:	f7ff fea4 	bl	8000cec <randFloat>
 8000fa4:	eef0 7a40 	vmov.f32	s15, s0
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <main+0x330>)
 8000faa:	edc3 7a00 	vstr	s15, [r3]
				delay = 150;
 8000fae:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <main+0x324>)
 8000fb0:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <main+0x334>)
 8000fb2:	601a      	str	r2, [r3, #0]
				gain = 0.3;
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <main+0x330>)
 8000fb6:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <main+0x338>)
 8000fb8:	601a      	str	r2, [r3, #0]
				echo(PLY_BUF_SIZE, Fs, delay, gain);
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <main+0x324>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <main+0x330>)
 8000fc2:	ed93 7a00 	vldr	s14, [r3]
 8000fc6:	eeb0 1a47 	vmov.f32	s2, s14
 8000fca:	eef0 0a67 	vmov.f32	s1, s15
 8000fce:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80010ec <main+0x33c>
 8000fd2:	f648 70c0 	movw	r0, #36800	; 0x8fc0
 8000fd6:	f7ff fdcb 	bl	8000b70 <echo>
			}

			// Yellow LED OFF & RED LED OFF & Green LED ON
			HAL_GPIO_WritePin(GPIOF, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe0:	4833      	ldr	r0, [pc, #204]	; (80010b0 <main+0x300>)
 8000fe2:	f006 fcd3 	bl	800798c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, LED_RED_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4830      	ldr	r0, [pc, #192]	; (80010ac <main+0x2fc>)
 8000fec:	f006 fcce 	bl	800798c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, LED_GREEN_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	482e      	ldr	r0, [pc, #184]	; (80010b0 <main+0x300>)
 8000ff6:	f006 fcc9 	bl	800798c <HAL_GPIO_WritePin>

			// Start a playback
			playback(ADC_out);
 8000ffa:	483d      	ldr	r0, [pc, #244]	; (80010f0 <main+0x340>)
 8000ffc:	f7ff feb6 	bl	8000d6c <playback>

			// Trace signal
			for (int i=0; i<ADC_BUF_SIZE; i++)
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	e01c      	b.n	8001040 <main+0x290>
			{
				int currVal = ADC_out[i];
 8001006:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <main+0x340>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800100e:	60bb      	str	r3, [r7, #8]
				if (currVal > max_samp) max_samp = currVal;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <main+0x30c>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	dd07      	ble.n	800103a <main+0x28a>
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <main+0x30c>)
 8001036:	edc3 7a00 	vstr	s15, [r3]
			for (int i=0; i<ADC_BUF_SIZE; i++)
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3301      	adds	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001046:	dbde      	blt.n	8001006 <main+0x256>
			}
			for (int i=0; i<ADC_BUF_SIZE; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	e016      	b.n	800107c <main+0x2cc>
			{
				magprint = ADC_out[i]/max_samp;
 800104e:	4a28      	ldr	r2, [pc, #160]	; (80010f0 <main+0x340>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <main+0x30c>)
 8001060:	ed93 7a00 	vldr	s14, [r3]
 8001064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <main+0x310>)
 800106a:	edc3 7a00 	vstr	s15, [r3]
				delay_us(600);
 800106e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001072:	f7ff fe63 	bl	8000d3c <delay_us>
			for (int i=0; i<ADC_BUF_SIZE; i++)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	3301      	adds	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8001082:	dbe4      	blt.n	800104e <main+0x29e>
			}
			max_samp = 0;
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <main+0x30c>)
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

			// Echo sample exists
			is_echo = 1;
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <main+0x318>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
			// Reset button state
			button_state = 0;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <main+0x2f8>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e0a1      	b.n	80011de <main+0x42e>
 800109a:	bf00      	nop
 800109c:	24026c7c 	.word	0x24026c7c
 80010a0:	24026d58 	.word	0x24026d58
 80010a4:	24026da4 	.word	0x24026da4
 80010a8:	2402673c 	.word	0x2402673c
 80010ac:	58021800 	.word	0x58021800
 80010b0:	58021400 	.word	0x58021400
 80010b4:	24004da8 	.word	0x24004da8
 80010b8:	24026734 	.word	0x24026734
 80010bc:	2402674c 	.word	0x2402674c
 80010c0:	24026748 	.word	0x24026748
 80010c4:	24026740 	.word	0x24026740
 80010c8:	24026744 	.word	0x24026744
 80010cc:	43480000 	.word	0x43480000
 80010d0:	42480000 	.word	0x42480000
 80010d4:	24026728 	.word	0x24026728
 80010d8:	3ecccccd 	.word	0x3ecccccd
 80010dc:	3dcccccd 	.word	0x3dcccccd
 80010e0:	2402672c 	.word	0x2402672c
 80010e4:	43160000 	.word	0x43160000
 80010e8:	3e99999a 	.word	0x3e99999a
 80010ec:	45fa0000 	.word	0x45fa0000
 80010f0:	240147a8 	.word	0x240147a8
		}else if(button_state == 3){	// Echo Cancellation and Playback
 80010f4:	4b41      	ldr	r3, [pc, #260]	; (80011fc <main+0x44c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d170      	bne.n	80011de <main+0x42e>
			// Check if a recording sample exists
			if(!if_record) continue;
 80010fc:	4b40      	ldr	r3, [pc, #256]	; (8001200 <main+0x450>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d079      	beq.n	80011f8 <main+0x448>
			// Yellow LED ON & Red LED OFF to signal activity
			HAL_GPIO_WritePin(GPIOF, LED_YELLOW_Pin, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	483e      	ldr	r0, [pc, #248]	; (8001204 <main+0x454>)
 800110c:	f006 fc3e 	bl	800798c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, LED_RED_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2102      	movs	r1, #2
 8001114:	483c      	ldr	r0, [pc, #240]	; (8001208 <main+0x458>)
 8001116:	f006 fc39 	bl	800798c <HAL_GPIO_WritePin>
			// AEC
			if (is_echo) aec(ADC_BUF_SIZE);
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <main+0x45c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <main+0x37a>
 8001122:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8001126:	f7ff fc07 	bl	8000938 <aec>
			// Yellow LED OFF & Green LED ON
			HAL_GPIO_WritePin(GPIOF, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	4834      	ldr	r0, [pc, #208]	; (8001204 <main+0x454>)
 8001132:	f006 fc2b 	bl	800798c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, LED_GREEN_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	4832      	ldr	r0, [pc, #200]	; (8001204 <main+0x454>)
 800113c:	f006 fc26 	bl	800798c <HAL_GPIO_WritePin>

			// Start a playback
			playback(ADC_out);
 8001140:	4833      	ldr	r0, [pc, #204]	; (8001210 <main+0x460>)
 8001142:	f7ff fe13 	bl	8000d6c <playback>

			// Trace signal
			for (int i=0; i<ADC_BUF_SIZE; i++)
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	e01c      	b.n	8001186 <main+0x3d6>
			{
				int currVal = ADC_out[i];
 800114c:	4a30      	ldr	r2, [pc, #192]	; (8001210 <main+0x460>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001154:	60fb      	str	r3, [r7, #12]
				if (currVal > max_samp) max_samp = currVal;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <main+0x464>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116e:	dd07      	ble.n	8001180 <main+0x3d0>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <main+0x464>)
 800117c:	edc3 7a00 	vstr	s15, [r3]
			for (int i=0; i<ADC_BUF_SIZE; i++)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800118c:	dbde      	blt.n	800114c <main+0x39c>
			}
			for (int i=0; i<ADC_BUF_SIZE; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e016      	b.n	80011c2 <main+0x412>
			{
				magprint = ADC_out[i]/max_samp;
 8001194:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <main+0x460>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <main+0x464>)
 80011a6:	ed93 7a00 	vldr	s14, [r3]
 80011aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <main+0x468>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]
				delay_us(600);
 80011b4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80011b8:	f7ff fdc0 	bl	8000d3c <delay_us>
			for (int i=0; i<ADC_BUF_SIZE; i++)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	3301      	adds	r3, #1
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80011c8:	dbe4      	blt.n	8001194 <main+0x3e4>
			}
			max_samp = 0;
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <main+0x464>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]

			// Echo sample does not exist
			is_echo = 0;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <main+0x45c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
			// Reset button state
			button_state = 0;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <main+0x44c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
		}
		// Green LED OFF & Red LED ON to signal inactivity
		HAL_GPIO_WritePin(GPIOF, LED_GREEN_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	4808      	ldr	r0, [pc, #32]	; (8001204 <main+0x454>)
 80011e4:	f006 fbd2 	bl	800798c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, LED_RED_Pin, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2102      	movs	r1, #2
 80011ec:	4806      	ldr	r0, [pc, #24]	; (8001208 <main+0x458>)
 80011ee:	f006 fbcd 	bl	800798c <HAL_GPIO_WritePin>
 80011f2:	e60b      	b.n	8000e0c <main+0x5c>
			if(!if_record) continue;
 80011f4:	bf00      	nop
 80011f6:	e609      	b.n	8000e0c <main+0x5c>
			if(!if_record) continue;
 80011f8:	bf00      	nop
		if(button_state == 1){ // Record and Playback
 80011fa:	e607      	b.n	8000e0c <main+0x5c>
 80011fc:	2402673c 	.word	0x2402673c
 8001200:	24026740 	.word	0x24026740
 8001204:	58021400 	.word	0x58021400
 8001208:	58021800 	.word	0x58021800
 800120c:	24026744 	.word	0x24026744
 8001210:	240147a8 	.word	0x240147a8
 8001214:	2402674c 	.word	0x2402674c
 8001218:	24026748 	.word	0x24026748

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0cc      	sub	sp, #304	; 0x130
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001226:	224c      	movs	r2, #76	; 0x4c
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f00b fac7 	bl	800c7be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001234:	2220      	movs	r2, #32
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f00b fac0 	bl	800c7be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	4618      	mov	r0, r3
 8001244:	23bc      	movs	r3, #188	; 0xbc
 8001246:	461a      	mov	r2, r3
 8001248:	2100      	movs	r1, #0
 800124a:	f00b fab8 	bl	800c7be <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800124e:	2002      	movs	r0, #2
 8001250:	f006 fd18 	bl	8007c84 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	4b61      	ldr	r3, [pc, #388]	; (80013e0 <SystemClock_Config+0x1c4>)
 800125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125e:	4a60      	ldr	r2, [pc, #384]	; (80013e0 <SystemClock_Config+0x1c4>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001266:	4b5e      	ldr	r3, [pc, #376]	; (80013e0 <SystemClock_Config+0x1c4>)
 8001268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800126a:	f003 0201 	and.w	r2, r3, #1
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	4b5c      	ldr	r3, [pc, #368]	; (80013e4 <SystemClock_Config+0x1c8>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800127a:	4a5a      	ldr	r2, [pc, #360]	; (80013e4 <SystemClock_Config+0x1c8>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6193      	str	r3, [r2, #24]
 8001282:	4b58      	ldr	r3, [pc, #352]	; (80013e4 <SystemClock_Config+0x1c8>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001292:	bf00      	nop
 8001294:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <SystemClock_Config+0x1c8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012a0:	d1f8      	bne.n	8001294 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <SystemClock_Config+0x1cc>)
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f023 0303 	bic.w	r3, r3, #3
 80012aa:	4a4f      	ldr	r2, [pc, #316]	; (80013e8 <SystemClock_Config+0x1cc>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 80012d2:	2318      	movs	r3, #24
 80012d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012d8:	2302      	movs	r3, #2
 80012da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012de:	2304      	movs	r3, #4
 80012e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012ea:	230c      	movs	r3, #12
 80012ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001300:	4618      	mov	r0, r3
 8001302:	f006 fd09 	bl	8007d18 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800130c:	f000 fc1c 	bl	8001b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	233f      	movs	r3, #63	; 0x3f
 8001312:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001340:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001344:	2101      	movs	r1, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f007 f8f6 	bl	8008538 <HAL_RCC_ClockConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8001352:	f000 fbf9 	bl	8001b48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <SystemClock_Config+0x1d0>)
 800135c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	2201      	movs	r2, #1
 8001364:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 19;
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	2213      	movs	r2, #19
 800136c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2203      	movs	r2, #3
 8001374:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2202      	movs	r2, #2
 800137c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	2202      	movs	r2, #2
 8001384:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	22c0      	movs	r2, #192	; 0xc0
 800138c:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	2220      	movs	r2, #32
 8001394:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	2200      	movs	r2, #0
 80013a4:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	4618      	mov	r0, r3
 80013c2:	f007 fc3d 	bl	8008c40 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x1b4>
  {
    Error_Handler();
 80013cc:	f000 fbbc 	bl	8001b48 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80013d0:	f006 fc92 	bl	8007cf8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80013d4:	bf00      	nop
 80013d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	58000400 	.word	0x58000400
 80013e4:	58024800 	.word	0x58024800
 80013e8:	58024400 	.word	0x58024400
 80013ec:	000c0002 	.word	0x000c0002

080013f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001416:	4a30      	ldr	r2, [pc, #192]	; (80014d8 <MX_ADC1_Init+0xe8>)
 8001418:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <MX_ADC1_Init+0xe4>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001422:	2208      	movs	r2, #8
 8001424:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_ADC1_Init+0xe4>)
 800142e:	2204      	movs	r2, #4
 8001430:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001434:	2200      	movs	r2, #0
 8001436:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <MX_ADC1_Init+0xe4>)
 800143a:	2200      	movs	r2, #0
 800143c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001440:	2201      	movs	r2, #1
 8001442:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001446:	2200      	movs	r2, #0
 8001448:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_ADC1_Init+0xe4>)
 800144c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800145a:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_ADC1_Init+0xe4>)
 800145c:	2201      	movs	r2, #1
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001462:	2200      	movs	r2, #0
 8001464:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001468:	2200      	movs	r2, #0
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800146c:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_ADC1_Init+0xe4>)
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001474:	4817      	ldr	r0, [pc, #92]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001476:	f001 fa6d 	bl	8002954 <HAL_ADC_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001480:	f000 fb62 	bl	8001b48 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_ADC1_Init+0xe4>)
 8001490:	f002 fc28 	bl	8003ce4 <HAL_ADCEx_MultiModeConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800149a:	f000 fb55 	bl	8001b48 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_ADC1_Init+0xec>)
 80014a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014a2:	2306      	movs	r3, #6
 80014a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014b0:	2304      	movs	r3, #4
 80014b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_ADC1_Init+0xe4>)
 80014be:	f001 fd23 	bl	8002f08 <HAL_ADC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80014c8:	f000 fb3e 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	24026c7c 	.word	0x24026c7c
 80014d8:	40022000 	.word	0x40022000
 80014dc:	3ef08000 	.word	0x3ef08000

080014e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2224      	movs	r2, #36	; 0x24
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00b f966 	bl	800c7be <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_DAC1_Init+0x5c>)
 80014f4:	4a12      	ldr	r2, [pc, #72]	; (8001540 <MX_DAC1_Init+0x60>)
 80014f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014f8:	4810      	ldr	r0, [pc, #64]	; (800153c <MX_DAC1_Init+0x5c>)
 80014fa:	f002 fddc 	bl	80040b6 <HAL_DAC_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001504:	f000 fb20 	bl	8001b48 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T1_TRGO;
 800150c:	2306      	movs	r3, #6
 800150e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_DAC1_Init+0x5c>)
 8001524:	f002 febc 	bl	80042a0 <HAL_DAC_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800152e:	f000 fb0b 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2402675c 	.word	0x2402675c
 8001540:	40007400 	.word	0x40007400

08001544 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_ETH_Init+0x90>)
 800154a:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <MX_ETH_Init+0x94>)
 800154c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_ETH_Init+0x90>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_ETH_Init+0x90>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	3301      	adds	r3, #1
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_ETH_Init+0x90>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	3302      	adds	r3, #2
 8001566:	22e1      	movs	r2, #225	; 0xe1
 8001568:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_ETH_Init+0x90>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	3303      	adds	r3, #3
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_ETH_Init+0x90>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	3304      	adds	r3, #4
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_ETH_Init+0x90>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	3305      	adds	r3, #5
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_ETH_Init+0x90>)
 800158a:	2201      	movs	r2, #1
 800158c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_ETH_Init+0x90>)
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <MX_ETH_Init+0x98>)
 8001592:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_ETH_Init+0x90>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <MX_ETH_Init+0x9c>)
 8001598:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_ETH_Init+0x90>)
 800159c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015a0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80015a2:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_ETH_Init+0x90>)
 80015a4:	f005 fc2c 	bl	8006e00 <HAL_ETH_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f000 facb 	bl	8001b48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80015b2:	2234      	movs	r2, #52	; 0x34
 80015b4:	2100      	movs	r1, #0
 80015b6:	480b      	ldr	r0, [pc, #44]	; (80015e4 <MX_ETH_Init+0xa0>)
 80015b8:	f00b f901 	bl	800c7be <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_ETH_Init+0xa0>)
 80015be:	2221      	movs	r2, #33	; 0x21
 80015c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_ETH_Init+0xa0>)
 80015c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_ETH_Init+0xa0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24026df0 	.word	0x24026df0
 80015d8:	40028000 	.word	0x40028000
 80015dc:	240000d8 	.word	0x240000d8
 80015e0:	24000078 	.word	0x24000078
 80015e4:	24026e60 	.word	0x24026e60

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001608:	4a20      	ldr	r2, [pc, #128]	; (800168c <MX_TIM1_Init+0xa4>)
 800160a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <MX_TIM1_Init+0xa0>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12000-1;
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <MX_TIM1_Init+0xa0>)
 800161a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800161e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_TIM1_Init+0xa0>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001632:	4815      	ldr	r0, [pc, #84]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001634:	f009 f9c8 	bl	800a9c8 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800163e:	f000 fa83 	bl	8001b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	480e      	ldr	r0, [pc, #56]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001650:	f009 fa40 	bl	800aad4 <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800165a:	f000 fa75 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800165e:	2320      	movs	r3, #32
 8001660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001670:	f009 fc38 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800167a:	f000 fa65 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	24026d58 	.word	0x24026d58
 800168c:	40010000 	.word	0x40010000

08001690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_TIM2_Init+0x98>)
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_TIM2_Init+0x98>)
 80016b8:	225f      	movs	r2, #95	; 0x5f
 80016ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_TIM2_Init+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_TIM2_Init+0x98>)
 80016c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_TIM2_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_TIM2_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d6:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_TIM2_Init+0x98>)
 80016d8:	f009 f976 	bl	800a9c8 <HAL_TIM_Base_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016e2:	f000 fa31 	bl	8001b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_TIM2_Init+0x98>)
 80016f4:	f009 f9ee 	bl	800aad4 <HAL_TIM_ConfigClockSource>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016fe:	f000 fa23 	bl	8001b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_TIM2_Init+0x98>)
 8001710:	f009 fbe8 	bl	800aee4 <HAL_TIMEx_MasterConfigSynchronization>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800171a:	f000 fa15 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24026da4 	.word	0x24026da4

0800172c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001732:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <MX_USART3_UART_Init+0x94>)
 8001734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_USART3_UART_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_USART3_UART_Init+0x90>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART3_UART_Init+0x90>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001774:	4811      	ldr	r0, [pc, #68]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001776:	f009 fc3d 	bl	800aff4 <HAL_UART_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001780:	f000 f9e2 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <MX_USART3_UART_Init+0x90>)
 8001788:	f00a fbd7 	bl	800bf3a <HAL_UARTEx_SetTxFifoThreshold>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001792:	f000 f9d9 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4808      	ldr	r0, [pc, #32]	; (80017bc <MX_USART3_UART_Init+0x90>)
 800179a:	f00a fc0c 	bl	800bfb6 <HAL_UARTEx_SetRxFifoThreshold>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017a4:	f000 f9d0 	bl	8001b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_USART3_UART_Init+0x90>)
 80017aa:	f00a fb8d 	bl	800bec8 <HAL_UARTEx_DisableFifoMode>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f000 f9c8 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	24026770 	.word	0x24026770
 80017c0:	40004800 	.word	0x40004800

080017c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ca:	4a16      	ldr	r2, [pc, #88]	; (8001824 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80017cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d0:	2209      	movs	r2, #9
 80017d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d6:	2202      	movs	r2, #2
 80017d8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001800:	2201      	movs	r2, #1
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001806:	2200      	movs	r2, #0
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800180c:	f006 f8f1 	bl	80079f2 <HAL_PCD_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001816:	f000 f997 	bl	8001b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	240267fc 	.word	0x240267fc
 8001824:	40080000 	.word	0x40080000

08001828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_DMA_Init+0x4c>)
 8001830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001834:	4a0f      	ldr	r2, [pc, #60]	; (8001874 <MX_DMA_Init+0x4c>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <MX_DMA_Init+0x4c>)
 8001840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	200b      	movs	r0, #11
 8001852:	f002 fbfc 	bl	800404e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001856:	200b      	movs	r0, #11
 8001858:	f002 fc13 	bl	8004082 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200c      	movs	r0, #12
 8001862:	f002 fbf4 	bl	800404e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001866:	200c      	movs	r0, #12
 8001868:	f002 fc0b 	bl	8004082 <HAL_NVIC_EnableIRQ>

}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	58024400 	.word	0x58024400

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08e      	sub	sp, #56	; 0x38
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001894:	4a7f      	ldr	r2, [pc, #508]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189e:	4b7d      	ldr	r3, [pc, #500]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	623b      	str	r3, [r7, #32]
 80018aa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ac:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b2:	4a78      	ldr	r2, [pc, #480]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018b4:	f043 0320 	orr.w	r3, r3, #32
 80018b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018bc:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ca:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d0:	4a70      	ldr	r2, [pc, #448]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018da:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ee:	4a69      	ldr	r2, [pc, #420]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f8:	4b66      	ldr	r3, [pc, #408]	; (8001a94 <MX_GPIO_Init+0x21c>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	4a61      	ldr	r2, [pc, #388]	; (8001a94 <MX_GPIO_Init+0x21c>)
 800190e:	f043 0302 	orr.w	r3, r3, #2
 8001912:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001916:	4b5f      	ldr	r3, [pc, #380]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001924:	4b5b      	ldr	r3, [pc, #364]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192a:	4a5a      	ldr	r2, [pc, #360]	; (8001a94 <MX_GPIO_Init+0x21c>)
 800192c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001934:	4b57      	ldr	r3, [pc, #348]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001942:	4b54      	ldr	r3, [pc, #336]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <MX_GPIO_Init+0x21c>)
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001952:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001960:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001966:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001968:	f043 0310 	orr.w	r3, r3, #16
 800196c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001970:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <MX_GPIO_Init+0x21c>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_GREEN_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001984:	4844      	ldr	r0, [pc, #272]	; (8001a98 <MX_GPIO_Init+0x220>)
 8001986:	f006 f801 	bl	800798c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001990:	4842      	ldr	r0, [pc, #264]	; (8001a9c <MX_GPIO_Init+0x224>)
 8001992:	f005 fffb 	bl	800798c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001996:	2200      	movs	r2, #0
 8001998:	2102      	movs	r1, #2
 800199a:	4841      	ldr	r0, [pc, #260]	; (8001aa0 <MX_GPIO_Init+0x228>)
 800199c:	f005 fff6 	bl	800798c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a6:	483f      	ldr	r0, [pc, #252]	; (8001aa4 <MX_GPIO_Init+0x22c>)
 80019a8:	f005 fff0 	bl	800798c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2102      	movs	r1, #2
 80019b0:	483d      	ldr	r0, [pc, #244]	; (8001aa8 <MX_GPIO_Init+0x230>)
 80019b2:	f005 ffeb 	bl	800798c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	4838      	ldr	r0, [pc, #224]	; (8001aac <MX_GPIO_Init+0x234>)
 80019cc:	f005 fe2e 	bl	800762c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin;
 80019d0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	4619      	mov	r1, r3
 80019e8:	482b      	ldr	r0, [pc, #172]	; (8001a98 <MX_GPIO_Init+0x220>)
 80019ea:	f005 fe1f 	bl	800762c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80019ee:	f244 0301 	movw	r3, #16385	; 0x4001
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	4825      	ldr	r0, [pc, #148]	; (8001a9c <MX_GPIO_Init+0x224>)
 8001a08:	f005 fe10 	bl	800762c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a20:	4619      	mov	r1, r3
 8001a22:	481f      	ldr	r0, [pc, #124]	; (8001aa0 <MX_GPIO_Init+0x228>)
 8001a24:	f005 fe02 	bl	800762c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4818      	ldr	r0, [pc, #96]	; (8001aa4 <MX_GPIO_Init+0x22c>)
 8001a42:	f005 fdf3 	bl	800762c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001a46:	23e0      	movs	r3, #224	; 0xe0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <MX_GPIO_Init+0x238>)
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	4619      	mov	r1, r3
 8001a58:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <MX_GPIO_Init+0x22c>)
 8001a5a:	f005 fde7 	bl	800762c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <MX_GPIO_Init+0x230>)
 8001a76:	f005 fdd9 	bl	800762c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2017      	movs	r0, #23
 8001a80:	f002 fae5 	bl	800404e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a84:	2017      	movs	r0, #23
 8001a86:	f002 fafc 	bl	8004082 <HAL_NVIC_EnableIRQ>

}
 8001a8a:	bf00      	nop
 8001a8c:	3738      	adds	r7, #56	; 0x38
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	58024400 	.word	0x58024400
 8001a98:	58021400 	.word	0x58021400
 8001a9c:	58020400 	.word	0x58020400
 8001aa0:	58021800 	.word	0x58021800
 8001aa4:	58020c00 	.word	0x58020c00
 8001aa8:	58021000 	.word	0x58021000
 8001aac:	58020800 	.word	0x58020800
 8001ab0:	11210000 	.word	0x11210000

08001ab4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN1_Pin){
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d103      	bne.n	8001acc <HAL_GPIO_EXTI_Callback+0x18>
		button_state = 1;
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x40>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
	}else if(GPIO_Pin == BTN2_Pin){
		button_state = 2;
	}else if(GPIO_Pin == BTN3_Pin){
		button_state = 3;
	}
}
 8001aca:	e00c      	b.n	8001ae6 <HAL_GPIO_EXTI_Callback+0x32>
	}else if(GPIO_Pin == BTN2_Pin){
 8001acc:	88fb      	ldrh	r3, [r7, #6]
 8001ace:	2b40      	cmp	r3, #64	; 0x40
 8001ad0:	d103      	bne.n	8001ada <HAL_GPIO_EXTI_Callback+0x26>
		button_state = 2;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x40>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	e005      	b.n	8001ae6 <HAL_GPIO_EXTI_Callback+0x32>
	}else if(GPIO_Pin == BTN3_Pin){
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	2b80      	cmp	r3, #128	; 0x80
 8001ade:	d102      	bne.n	8001ae6 <HAL_GPIO_EXTI_Callback+0x32>
		button_state = 3;
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x40>)
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	601a      	str	r2, [r3, #0]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	2402673c 	.word	0x2402673c

08001af8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK){
 8001b00:	4807      	ldr	r0, [pc, #28]	; (8001b20 <HAL_ADC_ConvCpltCallback+0x28>)
 8001b02:	f001 f98b 	bl	8002e1c <HAL_ADC_Stop_DMA>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_ADC_ConvCpltCallback+0x18>
		Error_Handler();
 8001b0c:	f000 f81c 	bl	8001b48 <Error_Handler>
	}
	record_done = 1;
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	24026c7c 	.word	0x24026c7c
 8001b24:	24026734 	.word	0x24026734

08001b28 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	play_done = 1;
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	24026738 	.word	0x24026738

08001b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b52:	4802      	ldr	r0, [pc, #8]	; (8001b5c <Error_Handler+0x14>)
 8001b54:	f005 ff1a 	bl	800798c <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	58020400 	.word	0x58020400

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_MspInit+0x30>)
 8001b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b6c:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_MspInit+0x30>)
 8001b6e:	f043 0302 	orr.w	r3, r3, #2
 8001b72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_MspInit+0x30>)
 8001b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	58024400 	.word	0x58024400

08001b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <HAL_ADC_MspInit+0xdc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d158      	bne.n	8001c68 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_ADC_MspInit+0xe0>)
 8001bb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bbc:	4a2d      	ldr	r2, [pc, #180]	; (8001c74 <HAL_ADC_MspInit+0xe0>)
 8001bbe:	f043 0320 	orr.w	r3, r3, #32
 8001bc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_ADC_MspInit+0xe0>)
 8001bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <HAL_ADC_MspInit+0xe0>)
 8001bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bda:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <HAL_ADC_MspInit+0xe0>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_ADC_MspInit+0xe0>)
 8001be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	481c      	ldr	r0, [pc, #112]	; (8001c78 <HAL_ADC_MspInit+0xe4>)
 8001c06:	f005 fd11 	bl	800762c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <HAL_ADC_MspInit+0xec>)
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c12:	2209      	movs	r2, #9
 8001c14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c4c:	480b      	ldr	r0, [pc, #44]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c4e:	f002 fce1 	bl	8004614 <HAL_DMA_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001c58:	f7ff ff76 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c62:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_ADC_MspInit+0xe8>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	; 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40022000 	.word	0x40022000
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58020000 	.word	0x58020000
 8001c7c:	24026ce0 	.word	0x24026ce0
 8001c80:	40020010 	.word	0x40020010

08001c84 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	; 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	; (8001d60 <HAL_DAC_MspInit+0xdc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d158      	bne.n	8001d58 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_DAC_MspInit+0xe0>)
 8001ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cac:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <HAL_DAC_MspInit+0xe0>)
 8001cae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_DAC_MspInit+0xe0>)
 8001cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <HAL_DAC_MspInit+0xe0>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cca:	4a26      	ldr	r2, [pc, #152]	; (8001d64 <HAL_DAC_MspInit+0xe0>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd4:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_DAC_MspInit+0xe0>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ce2:	2310      	movs	r3, #16
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481c      	ldr	r0, [pc, #112]	; (8001d68 <HAL_DAC_MspInit+0xe4>)
 8001cf6:	f005 fc99 	bl	800762c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001cfc:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <HAL_DAC_MspInit+0xec>)
 8001cfe:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d02:	2243      	movs	r2, #67	; 0x43
 8001d04:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d06:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d08:	2240      	movs	r2, #64	; 0x40
 8001d0a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d12:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d20:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d28:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d3e:	f002 fc69 	bl	8004614 <HAL_DMA_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001d48:	f7ff fefe 	bl	8001b48 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <HAL_DAC_MspInit+0xe8>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40007400 	.word	0x40007400
 8001d64:	58024400 	.word	0x58024400
 8001d68:	58020000 	.word	0x58020000
 8001d6c:	24026c04 	.word	0x24026c04
 8001d70:	40020028 	.word	0x40020028

08001d74 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08e      	sub	sp, #56	; 0x38
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a59      	ldr	r2, [pc, #356]	; (8001ef8 <HAL_ETH_MspInit+0x184>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f040 80ab 	bne.w	8001eee <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001d98:	4b58      	ldr	r3, [pc, #352]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001d9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d9e:	4a57      	ldr	r2, [pc, #348]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001da8:	4b54      	ldr	r3, [pc, #336]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001daa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001db6:	4b51      	ldr	r3, [pc, #324]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dbc:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dc6:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd0:	61fb      	str	r3, [r7, #28]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001dd4:	4b49      	ldr	r3, [pc, #292]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dda:	4a48      	ldr	r2, [pc, #288]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001de4:	4b45      	ldr	r3, [pc, #276]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	4b42      	ldr	r3, [pc, #264]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	4a40      	ldr	r2, [pc, #256]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e02:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e16:	4a39      	ldr	r2, [pc, #228]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e20:	4b36      	ldr	r3, [pc, #216]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b33      	ldr	r3, [pc, #204]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e34:	4a31      	ldr	r2, [pc, #196]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e52:	4a2a      	ldr	r2, [pc, #168]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_ETH_MspInit+0x188>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e6a:	2332      	movs	r3, #50	; 0x32
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e7a:	230b      	movs	r3, #11
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e82:	4619      	mov	r1, r3
 8001e84:	481e      	ldr	r0, [pc, #120]	; (8001f00 <HAL_ETH_MspInit+0x18c>)
 8001e86:	f005 fbd1 	bl	800762c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001e8a:	2386      	movs	r3, #134	; 0x86
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e9a:	230b      	movs	r3, #11
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4817      	ldr	r0, [pc, #92]	; (8001f04 <HAL_ETH_MspInit+0x190>)
 8001ea6:	f005 fbc1 	bl	800762c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ebc:	230b      	movs	r3, #11
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4810      	ldr	r0, [pc, #64]	; (8001f08 <HAL_ETH_MspInit+0x194>)
 8001ec8:	f005 fbb0 	bl	800762c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001ecc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ede:	230b      	movs	r3, #11
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4808      	ldr	r0, [pc, #32]	; (8001f0c <HAL_ETH_MspInit+0x198>)
 8001eea:	f005 fb9f 	bl	800762c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001eee:	bf00      	nop
 8001ef0:	3738      	adds	r7, #56	; 0x38
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40028000 	.word	0x40028000
 8001efc:	58024400 	.word	0x58024400
 8001f00:	58020800 	.word	0x58020800
 8001f04:	58020000 	.word	0x58020000
 8001f08:	58020400 	.word	0x58020400
 8001f0c:	58021800 	.word	0x58021800

08001f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_TIM_Base_MspInit+0x68>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10f      	bne.n	8001f42 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_TIM_Base_MspInit+0x6c>)
 8001f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_TIM_Base_MspInit+0x6c>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_TIM_Base_MspInit+0x6c>)
 8001f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f40:	e013      	b.n	8001f6a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d10e      	bne.n	8001f6a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_TIM_Base_MspInit+0x6c>)
 8001f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_TIM_Base_MspInit+0x6c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <HAL_TIM_Base_MspInit+0x6c>)
 8001f5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	58024400 	.word	0x58024400

08001f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_UART_MspInit+0x88>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12e      	bne.n	8002000 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fa8:	4a18      	ldr	r2, [pc, #96]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001faa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_UART_MspInit+0x8c>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ff0:	2307      	movs	r3, #7
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <HAL_UART_MspInit+0x90>)
 8001ffc:	f005 fb16 	bl	800762c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	; 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40004800 	.word	0x40004800
 800200c:	58024400 	.word	0x58024400
 8002010:	58020c00 	.word	0x58020c00

08002014 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <HAL_PCD_MspInit+0xa4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d13b      	bne.n	80020ae <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_PCD_MspInit+0xa8>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_PCD_MspInit+0xa8>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_PCD_MspInit+0xa8>)
 8002048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002054:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002066:	230a      	movs	r3, #10
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4813      	ldr	r0, [pc, #76]	; (80020c0 <HAL_PCD_MspInit+0xac>)
 8002072:	f005 fadb 	bl	800762c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4619      	mov	r1, r3
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <HAL_PCD_MspInit+0xac>)
 800208c:	f005 face 	bl	800762c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_PCD_MspInit+0xa8>)
 8002092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_PCD_MspInit+0xa8>)
 8002098:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800209c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_PCD_MspInit+0xa8>)
 80020a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80020ae:	bf00      	nop
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40080000 	.word	0x40080000
 80020bc:	58024400 	.word	0x58024400
 80020c0:	58020000 	.word	0x58020000

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 f982 	bl	8002420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA1_Stream0_IRQHandler+0x10>)
 8002126:	f003 fb59 	bl	80057dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	24026ce0 	.word	0x24026ce0

08002134 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA1_Stream1_IRQHandler+0x10>)
 800213a:	f003 fb4f 	bl	80057dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	24026c04 	.word	0x24026c04

08002148 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800214c:	2020      	movs	r0, #32
 800214e:	f005 fc36 	bl	80079be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002152:	2040      	movs	r0, #64	; 0x40
 8002154:	f005 fc33 	bl	80079be <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002158:	2080      	movs	r0, #128	; 0x80
 800215a:	f005 fc30 	bl	80079be <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f00a fad0 	bl	800c738 <__errno>
 8002198:	4602      	mov	r2, r0
 800219a:	230c      	movs	r3, #12
 800219c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	24080000 	.word	0x24080000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	24026750 	.word	0x24026750
 80021cc:	24026ea0 	.word	0x24026ea0

080021d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <SystemInit+0xec>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021da:	4a38      	ldr	r2, [pc, #224]	; (80022bc <SystemInit+0xec>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <SystemInit+0xf0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	2b06      	cmp	r3, #6
 80021ee:	d807      	bhi.n	8002200 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80021f0:	4b33      	ldr	r3, [pc, #204]	; (80022c0 <SystemInit+0xf0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 030f 	bic.w	r3, r3, #15
 80021f8:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <SystemInit+0xf0>)
 80021fa:	f043 0307 	orr.w	r3, r3, #7
 80021fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <SystemInit+0xf4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2f      	ldr	r2, [pc, #188]	; (80022c4 <SystemInit+0xf4>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800220c:	4b2d      	ldr	r3, [pc, #180]	; (80022c4 <SystemInit+0xf4>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <SystemInit+0xf4>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	492b      	ldr	r1, [pc, #172]	; (80022c4 <SystemInit+0xf4>)
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <SystemInit+0xf8>)
 800221a:	4013      	ands	r3, r2
 800221c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <SystemInit+0xf0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	2b07      	cmp	r3, #7
 8002228:	d907      	bls.n	800223a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <SystemInit+0xf0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 030f 	bic.w	r3, r3, #15
 8002232:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <SystemInit+0xf0>)
 8002234:	f043 0307 	orr.w	r3, r3, #7
 8002238:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <SystemInit+0xf4>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <SystemInit+0xf4>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002246:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <SystemInit+0xf4>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800224c:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <SystemInit+0xf4>)
 800224e:	4a1f      	ldr	r2, [pc, #124]	; (80022cc <SystemInit+0xfc>)
 8002250:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002252:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <SystemInit+0xf4>)
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <SystemInit+0x100>)
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <SystemInit+0xf4>)
 800225a:	4a1e      	ldr	r2, [pc, #120]	; (80022d4 <SystemInit+0x104>)
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <SystemInit+0xf4>)
 8002260:	2200      	movs	r2, #0
 8002262:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <SystemInit+0xf4>)
 8002266:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <SystemInit+0x104>)
 8002268:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800226a:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <SystemInit+0xf4>)
 800226c:	2200      	movs	r2, #0
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <SystemInit+0xf4>)
 8002272:	4a18      	ldr	r2, [pc, #96]	; (80022d4 <SystemInit+0x104>)
 8002274:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <SystemInit+0xf4>)
 8002278:	2200      	movs	r2, #0
 800227a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <SystemInit+0xf4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <SystemInit+0xf4>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <SystemInit+0xf4>)
 800228a:	2200      	movs	r2, #0
 800228c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <SystemInit+0x108>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <SystemInit+0x10c>)
 8002294:	4013      	ands	r3, r2
 8002296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800229a:	d202      	bcs.n	80022a2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <SystemInit+0x110>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <SystemInit+0x114>)
 80022a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022a8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <SystemInit+0xec>)
 80022ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022b0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00
 80022c0:	52002000 	.word	0x52002000
 80022c4:	58024400 	.word	0x58024400
 80022c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80022cc:	02020200 	.word	0x02020200
 80022d0:	01ff0000 	.word	0x01ff0000
 80022d4:	01010280 	.word	0x01010280
 80022d8:	5c001000 	.word	0x5c001000
 80022dc:	ffff0000 	.word	0xffff0000
 80022e0:	51008108 	.word	0x51008108
 80022e4:	52004000 	.word	0x52004000

080022e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002320 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80022ec:	f7ff ff70 	bl	80021d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022f2:	e003      	b.n	80022fc <LoopCopyDataInit>

080022f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80022f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022fa:	3104      	adds	r1, #4

080022fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022fc:	480a      	ldr	r0, [pc, #40]	; (8002328 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002300:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002302:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002304:	d3f6      	bcc.n	80022f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002308:	e002      	b.n	8002310 <LoopFillZerobss>

0800230a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800230a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800230c:	f842 3b04 	str.w	r3, [r2], #4

08002310 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002312:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002314:	d3f9      	bcc.n	800230a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002316:	f00a fa15 	bl	800c744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231a:	f7fe fd49 	bl	8000db0 <main>
  bx  lr    
 800231e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002320:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002324:	0800ca94 	.word	0x0800ca94
  ldr  r0, =_sdata
 8002328:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800232c:	24000078 	.word	0x24000078
  ldr  r2, =_sbss
 8002330:	24000138 	.word	0x24000138
  ldr  r3, = _ebss
 8002334:	24026e9c 	.word	0x24026e9c

08002338 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC3_IRQHandler>
	...

0800233c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002342:	2003      	movs	r0, #3
 8002344:	f001 fe78 	bl	8004038 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002348:	f006 faac 	bl	80088a4 <HAL_RCC_GetSysClockFreq>
 800234c:	4601      	mov	r1, r0
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_Init+0x68>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	4a13      	ldr	r2, [pc, #76]	; (80023a8 <HAL_Init+0x6c>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa21 f303 	lsr.w	r3, r1, r3
 8002364:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <HAL_Init+0x68>)
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_Init+0x6c>)
 8002370:	5cd3      	ldrb	r3, [r2, r3]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <HAL_Init+0x70>)
 800237e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002380:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <HAL_Init+0x74>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002386:	2000      	movs	r0, #0
 8002388:	f000 f814 	bl	80023b4 <HAL_InitTick>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e002      	b.n	800239c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002396:	f7ff fbe3 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	58024400 	.word	0x58024400
 80023a8:	0800ca54 	.word	0x0800ca54
 80023ac:	24000008 	.word	0x24000008
 80023b0:	24000004 	.word	0x24000004

080023b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_InitTick+0x60>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e021      	b.n	800240c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_InitTick+0x64>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_InitTick+0x60>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023da:	fbb2 f3f3 	udiv	r3, r2, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	f001 fe5d 	bl	800409e <HAL_SYSTICK_Config>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00e      	b.n	800240c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b0f      	cmp	r3, #15
 80023f2:	d80a      	bhi.n	800240a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f001 fe27 	bl	800404e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <HAL_InitTick+0x68>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	24000010 	.word	0x24000010
 8002418:	24000004 	.word	0x24000004
 800241c:	2400000c 	.word	0x2400000c

08002420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_IncTick+0x20>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	461a      	mov	r2, r3
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x24>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4413      	add	r3, r2
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_IncTick+0x24>)
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	24000010 	.word	0x24000010
 8002444:	24026e94 	.word	0x24026e94

08002448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_GetTick+0x14>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	24026e94 	.word	0x24026e94

08002460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002468:	f7ff ffee 	bl	8002448 <HAL_GetTick>
 800246c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002478:	d005      	beq.n	8002486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <HAL_Delay+0x40>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002486:	bf00      	nop
 8002488:	f7ff ffde 	bl	8002448 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d8f7      	bhi.n	8002488 <HAL_Delay+0x28>
  {
  }
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	24000010 	.word	0x24000010

080024a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_GetREVID+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0c1b      	lsrs	r3, r3, #16
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	5c001000 	.word	0x5c001000

080024bc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80024cc:	4904      	ldr	r1, [pc, #16]	; (80024e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	58000400 	.word	0x58000400

080024e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	609a      	str	r2, [r3, #8]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
 8002512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3360      	adds	r3, #96	; 0x60
 800255e:	461a      	mov	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	431a      	orrs	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002580:	bf00      	nop
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	611a      	str	r2, [r3, #16]
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80025be:	b480      	push	{r7}
 80025c0:	b087      	sub	sp, #28
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3360      	adds	r3, #96	; 0x60
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	601a      	str	r2, [r3, #0]
  }
}
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800261a:	b480      	push	{r7}
 800261c:	b087      	sub	sp, #28
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3330      	adds	r3, #48	; 0x30
 800262a:	461a      	mov	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	4413      	add	r3, r2
 8002638:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	211f      	movs	r1, #31
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	401a      	ands	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	0e9b      	lsrs	r3, r3, #26
 8002652:	f003 011f 	and.w	r1, r3, #31
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	431a      	orrs	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f023 0203 	bic.w	r2, r3, #3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	60da      	str	r2, [r3, #12]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3314      	adds	r3, #20
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	0e5b      	lsrs	r3, r3, #25
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	4413      	add	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	0d1b      	lsrs	r3, r3, #20
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2107      	movs	r1, #7
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	401a      	ands	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	0d1b      	lsrs	r3, r3, #20
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	431a      	orrs	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002708:	43db      	mvns	r3, r3
 800270a:	401a      	ands	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0318 	and.w	r3, r3, #24
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002714:	40d9      	lsrs	r1, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	400b      	ands	r3, r1
 800271a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800271e:	431a      	orrs	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	000fffff 	.word	0x000fffff

08002738 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 031f 	and.w	r3, r3, #31
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002762:	4013      	ands	r3, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6093      	str	r3, [r2, #8]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	5fffffc0 	.word	0x5fffffc0

08002778 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278c:	d101      	bne.n	8002792 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	6fffffc0 	.word	0x6fffffc0

080027c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027dc:	d101      	bne.n	80027e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <LL_ADC_Enable+0x24>)
 80027fe:	4013      	ands	r3, r2
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	7fffffc0 	.word	0x7fffffc0

08002818 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <LL_ADC_Disable+0x24>)
 8002826:	4013      	ands	r3, r2
 8002828:	f043 0202 	orr.w	r2, r3, #2
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	7fffffc0 	.word	0x7fffffc0

08002840 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <LL_ADC_IsEnabled+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_ADC_IsEnabled+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d101      	bne.n	800287e <LL_ADC_IsDisableOngoing+0x18>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <LL_ADC_IsDisableOngoing+0x1a>
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <LL_ADC_REG_StartConversion+0x24>)
 800289a:	4013      	ands	r3, r2
 800289c:	f043 0204 	orr.w	r2, r3, #4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	7fffffc0 	.word	0x7fffffc0

080028b4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <LL_ADC_REG_StopConversion+0x24>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	f043 0210 	orr.w	r2, r3, #16
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	7fffffc0 	.word	0x7fffffc0

080028dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d101      	bne.n	80028f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <LL_ADC_INJ_StopConversion+0x24>)
 8002912:	4013      	ands	r3, r2
 8002914:	f043 0220 	orr.w	r2, r3, #32
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	7fffffc0 	.word	0x7fffffc0

0800292c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b08      	cmp	r3, #8
 800293e:	d101      	bne.n	8002944 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002960:	2300      	movs	r3, #0
 8002962:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e18e      	b.n	8002c8c <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff f909 	bl	8001b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff feef 	bl	8002778 <LL_ADC_IsDeepPowerDownEnabled>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d004      	beq.n	80029aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fed5 	bl	8002754 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff0a 	bl	80027c8 <LL_ADC_IsInternalRegulatorEnabled>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d113      	bne.n	80029e2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff feee 	bl	80027a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029c4:	4b9a      	ldr	r3, [pc, #616]	; (8002c30 <HAL_ADC_Init+0x2dc>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	4a9a      	ldr	r2, [pc, #616]	; (8002c34 <HAL_ADC_Init+0x2e0>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029d4:	e002      	b.n	80029dc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f9      	bne.n	80029d6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff feee 	bl	80027c8 <LL_ADC_IsInternalRegulatorEnabled>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f043 0210 	orr.w	r2, r3, #16
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f043 0201 	orr.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff62 	bl	80028dc <LL_ADC_REG_IsConversionOngoing>
 8002a18:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 8129 	bne.w	8002c7a <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 8125 	bne.w	8002c7a <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a38:	f043 0202 	orr.w	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fefb 	bl	8002840 <LL_ADC_IsEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d136      	bne.n	8002abe <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a78      	ldr	r2, [pc, #480]	; (8002c38 <HAL_ADC_Init+0x2e4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d004      	beq.n	8002a64 <HAL_ADC_Init+0x110>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a77      	ldr	r2, [pc, #476]	; (8002c3c <HAL_ADC_Init+0x2e8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10e      	bne.n	8002a82 <HAL_ADC_Init+0x12e>
 8002a64:	4874      	ldr	r0, [pc, #464]	; (8002c38 <HAL_ADC_Init+0x2e4>)
 8002a66:	f7ff feeb 	bl	8002840 <LL_ADC_IsEnabled>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	4873      	ldr	r0, [pc, #460]	; (8002c3c <HAL_ADC_Init+0x2e8>)
 8002a6e:	f7ff fee7 	bl	8002840 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4323      	orrs	r3, r4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	e008      	b.n	8002a94 <HAL_ADC_Init+0x140>
 8002a82:	486f      	ldr	r0, [pc, #444]	; (8002c40 <HAL_ADC_Init+0x2ec>)
 8002a84:	f7ff fedc 	bl	8002840 <LL_ADC_IsEnabled>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a66      	ldr	r2, [pc, #408]	; (8002c38 <HAL_ADC_Init+0x2e4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d004      	beq.n	8002aac <HAL_ADC_Init+0x158>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a65      	ldr	r2, [pc, #404]	; (8002c3c <HAL_ADC_Init+0x2e8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_Init+0x15c>
 8002aac:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <HAL_ADC_Init+0x2f0>)
 8002aae:	e000      	b.n	8002ab2 <HAL_ADC_Init+0x15e>
 8002ab0:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_ADC_Init+0x2f4>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4610      	mov	r0, r2
 8002aba:	f7ff fd13 	bl	80024e4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002abe:	f7ff fcf1 	bl	80024a4 <HAL_GetREVID>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d914      	bls.n	8002af6 <HAL_ADC_Init+0x1a2>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d110      	bne.n	8002af6 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7d5b      	ldrb	r3, [r3, #21]
 8002ad8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ade:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ae4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002aec:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002aee:	f043 030c 	orr.w	r3, r3, #12
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e00d      	b.n	8002b12 <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7d5b      	ldrb	r3, [r3, #21]
 8002afa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b00:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002b06:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7f1b      	ldrb	r3, [r3, #28]
 8002b0c:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7f1b      	ldrb	r3, [r3, #28]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d106      	bne.n	8002b28 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	045b      	lsls	r3, r3, #17
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d009      	beq.n	8002b44 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b40      	ldr	r3, [pc, #256]	; (8002c4c <HAL_ADC_Init+0x2f8>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6812      	ldr	r2, [r2, #0]
 8002b52:	69b9      	ldr	r1, [r7, #24]
 8002b54:	430b      	orrs	r3, r1
 8002b56:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff febd 	bl	80028dc <LL_ADC_REG_IsConversionOngoing>
 8002b62:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fedf 	bl	800292c <LL_ADC_INJ_IsConversionOngoing>
 8002b6e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d14a      	bne.n	8002c0c <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d147      	bne.n	8002c0c <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7d1b      	ldrb	r3, [r3, #20]
 8002b80:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <HAL_ADC_Init+0x2fc>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	69b9      	ldr	r1, [r7, #24]
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d11b      	bne.n	8002be0 <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_ADC_Init+0x300>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	0411      	lsls	r1, r2, #16
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bc4:	4311      	orrs	r1, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	611a      	str	r2, [r3, #16]
 8002bde:	e007      	b.n	8002bf0 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 feb6 	bl	8003978 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d121      	bne.n	8002c58 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f023 010f 	bic.w	r1, r3, #15
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	1e5a      	subs	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c2c:	e01c      	b.n	8002c68 <HAL_ADC_Init+0x314>
 8002c2e:	bf00      	nop
 8002c30:	24000004 	.word	0x24000004
 8002c34:	053e2d63 	.word	0x053e2d63
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	40022100 	.word	0x40022100
 8002c40:	58026000 	.word	0x58026000
 8002c44:	40022300 	.word	0x40022300
 8002c48:	58026300 	.word	0x58026300
 8002c4c:	fff0c003 	.word	0xfff0c003
 8002c50:	ffffbffc 	.word	0xffffbffc
 8002c54:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 020f 	bic.w	r2, r2, #15
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c6c:	f023 0303 	bic.w	r3, r3, #3
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	655a      	str	r2, [r3, #84]	; 0x54
 8002c78:	e007      	b.n	8002c8a <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3724      	adds	r7, #36	; 0x24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd90      	pop	{r4, r7, pc}

08002c94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a55      	ldr	r2, [pc, #340]	; (8002dfc <HAL_ADC_Start_DMA+0x168>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_ADC_Start_DMA+0x20>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a54      	ldr	r2, [pc, #336]	; (8002e00 <HAL_ADC_Start_DMA+0x16c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_Start_DMA+0x24>
 8002cb4:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_ADC_Start_DMA+0x170>)
 8002cb6:	e000      	b.n	8002cba <HAL_ADC_Start_DMA+0x26>
 8002cb8:	4b53      	ldr	r3, [pc, #332]	; (8002e08 <HAL_ADC_Start_DMA+0x174>)
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fd3c 	bl	8002738 <LL_ADC_GetMultimode>
 8002cc0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fe08 	bl	80028dc <LL_ADC_REG_IsConversionOngoing>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 808c 	bne.w	8002dec <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Start_DMA+0x4e>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e087      	b.n	8002df2 <HAL_ADC_Start_DMA+0x15e>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	d002      	beq.n	8002cfc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	2b09      	cmp	r3, #9
 8002cfa:	d170      	bne.n	8002dde <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fccb 	bl	8003698 <ADC_Enable>
 8002d02:	4603      	mov	r3, r0
 8002d04:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d06:	7dfb      	ldrb	r3, [r7, #23]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d163      	bne.n	8002dd4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d10:	4b3e      	ldr	r3, [pc, #248]	; (8002e0c <HAL_ADC_Start_DMA+0x178>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a37      	ldr	r2, [pc, #220]	; (8002e00 <HAL_ADC_Start_DMA+0x16c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d002      	beq.n	8002d2c <HAL_ADC_Start_DMA+0x98>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	e000      	b.n	8002d2e <HAL_ADC_Start_DMA+0x9a>
 8002d2c:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <HAL_ADC_Start_DMA+0x168>)
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d002      	beq.n	8002d3c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	f023 0206 	bic.w	r2, r3, #6
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	659a      	str	r2, [r3, #88]	; 0x58
 8002d60:	e002      	b.n	8002d68 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6c:	4a28      	ldr	r2, [pc, #160]	; (8002e10 <HAL_ADC_Start_DMA+0x17c>)
 8002d6e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d74:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <HAL_ADC_Start_DMA+0x180>)
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	4a26      	ldr	r2, [pc, #152]	; (8002e18 <HAL_ADC_Start_DMA+0x184>)
 8002d7e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	221c      	movs	r2, #28
 8002d86:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0210 	orr.w	r2, r2, #16
 8002d9e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da8:	4619      	mov	r1, r3
 8002daa:	4610      	mov	r0, r2
 8002dac:	f7ff fc61 	bl	8002672 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3340      	adds	r3, #64	; 0x40
 8002dba:	4619      	mov	r1, r3
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f001 ff84 	bl	8004ccc <HAL_DMA_Start_IT>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fd5d 	bl	800288c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002dd2:	e00d      	b.n	8002df0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002ddc:	e008      	b.n	8002df0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002dea:	e001      	b.n	8002df0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	40022100 	.word	0x40022100
 8002e04:	40022300 	.word	0x40022300
 8002e08:	58026300 	.word	0x58026300
 8002e0c:	fffff0fe 	.word	0xfffff0fe
 8002e10:	08003851 	.word	0x08003851
 8002e14:	08003929 	.word	0x08003929
 8002e18:	08003945 	.word	0x08003945

08002e1c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Stop_DMA+0x16>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	e04f      	b.n	8002ed2 <HAL_ADC_Stop_DMA+0xb6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e3a:	2103      	movs	r1, #3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fb77 	bl	8003530 <ADC_ConversionStop>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d13d      	bne.n	8002ec8 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68da      	ldr	r2, [r3, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0203 	bic.w	r2, r2, #3
 8002e5a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d10f      	bne.n	8002e8a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 f996 	bl	80051a0 <HAL_DMA_Abort>
 8002e74:	4603      	mov	r3, r0
 8002e76:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0210 	bic.w	r2, r2, #16
 8002e98:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d105      	bne.n	8002eac <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fc7d 	bl	80037a0 <ADC_Disable>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	73fb      	strb	r3, [r7, #15]
 8002eaa:	e002      	b.n	8002eb2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fc77 	bl	80037a0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ebc:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_ADC_Stop_DMA+0xc0>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	ffffeefe 	.word	0xffffeefe

08002ee0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b099      	sub	sp, #100	; 0x64
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a99      	ldr	r2, [pc, #612]	; (8003188 <HAL_ADC_ConfigChannel+0x280>)
 8002f22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x2a>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e2e6      	b.n	8003500 <HAL_ADC_ConfigChannel+0x5f8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fccc 	bl	80028dc <LL_ADC_REG_IsConversionOngoing>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f040 82cb 	bne.w	80034e2 <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d108      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x62>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2201      	movs	r2, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	e00f      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x82>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7a:	fab3 f383 	clz	r3, r3
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2201      	movs	r2, #1
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	69d1      	ldr	r1, [r2, #28]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f7ff fb38 	bl	800261a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fc94 	bl	80028dc <LL_ADC_REG_IsConversionOngoing>
 8002fb4:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fcb6 	bl	800292c <LL_ADC_INJ_IsConversionOngoing>
 8002fc0:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 80b3 	bne.w	8003130 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 80af 	bne.w	8003130 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f7ff fb5a 	bl	8002698 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fe4:	4b69      	ldr	r3, [pc, #420]	; (800318c <HAL_ADC_ConfigChannel+0x284>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ff0:	d10b      	bne.n	800300a <HAL_ADC_ConfigChannel+0x102>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	695a      	ldr	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	e01d      	b.n	8003046 <HAL_ADC_ConfigChannel+0x13e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x128>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	e00a      	b.n	8003046 <HAL_ADC_ConfigChannel+0x13e>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d027      	beq.n	80030a0 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6919      	ldr	r1, [r3, #16]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305e:	f7ff fa75 	bl	800254c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6919      	ldr	r1, [r3, #16]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	7e5b      	ldrb	r3, [r3, #25]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d102      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x170>
 8003072:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003076:	e000      	b.n	800307a <HAL_ADC_ConfigChannel+0x172>
 8003078:	2300      	movs	r3, #0
 800307a:	461a      	mov	r2, r3
 800307c:	f7ff fa9f 	bl	80025be <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6919      	ldr	r1, [r3, #16]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	7e1b      	ldrb	r3, [r3, #24]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d102      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x18e>
 8003090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003094:	e000      	b.n	8003098 <HAL_ADC_ConfigChannel+0x190>
 8003096:	2300      	movs	r3, #0
 8003098:	461a      	mov	r2, r3
 800309a:	f7ff fa77 	bl	800258c <LL_ADC_SetDataRightShift>
 800309e:	e047      	b.n	8003130 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	069b      	lsls	r3, r3, #26
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	069b      	lsls	r3, r3, #26
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d107      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030e6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	069b      	lsls	r3, r3, #26
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d107      	bne.n	800310c <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800310a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003112:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	069b      	lsls	r3, r3, #26
 800311c:	429a      	cmp	r2, r3
 800311e:	d107      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800312e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fb83 	bl	8002840 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	f040 81d9 	bne.w	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	461a      	mov	r2, r3
 8003150:	f7ff face 	bl	80026f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <HAL_ADC_ConfigChannel+0x280>)
 800315a:	4293      	cmp	r3, r2
 800315c:	f040 8101 	bne.w	8003362 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10f      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x288>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0e9b      	lsrs	r3, r3, #26
 8003176:	3301      	adds	r3, #1
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2b09      	cmp	r3, #9
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e016      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x2ae>
 8003188:	47ff0000 	.word	0x47ff0000
 800318c:	5c001000 	.word	0x5c001000
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	3301      	adds	r3, #1
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2b09      	cmp	r3, #9
 80031ae:	bf94      	ite	ls
 80031b0:	2301      	movls	r3, #1
 80031b2:	2300      	movhi	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d064      	beq.n	8003284 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d107      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x2ce>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	3301      	adds	r3, #1
 80031ce:	069b      	lsls	r3, r3, #26
 80031d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031d4:	e00e      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x2ec>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	069b      	lsls	r3, r3, #26
 80031f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x30c>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0e9b      	lsrs	r3, r3, #26
 8003206:	3301      	adds	r3, #1
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	e010      	b.n	8003236 <HAL_ADC_ConfigChannel+0x32e>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	ea42 0103 	orr.w	r1, r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <HAL_ADC_ConfigChannel+0x354>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	0e9b      	lsrs	r3, r3, #26
 800324c:	3301      	adds	r3, #1
 800324e:	f003 021f 	and.w	r2, r3, #31
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	051b      	lsls	r3, r3, #20
 800325a:	e011      	b.n	8003280 <HAL_ADC_ConfigChannel+0x378>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003280:	430b      	orrs	r3, r1
 8003282:	e069      	b.n	8003358 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x398>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	3301      	adds	r3, #1
 8003298:	069b      	lsls	r3, r3, #26
 800329a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800329e:	e00e      	b.n	80032be <HAL_ADC_ConfigChannel+0x3b6>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	61fb      	str	r3, [r7, #28]
  return result;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	069b      	lsls	r3, r3, #26
 80032ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_ADC_ConfigChannel+0x3d6>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0e9b      	lsrs	r3, r3, #26
 80032d0:	3301      	adds	r3, #1
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f303 	lsl.w	r3, r1, r3
 80032dc:	e010      	b.n	8003300 <HAL_ADC_ConfigChannel+0x3f8>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	617b      	str	r3, [r7, #20]
  return result;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	ea42 0103 	orr.w	r1, r2, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_ADC_ConfigChannel+0x424>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	3301      	adds	r3, #1
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	3b1e      	subs	r3, #30
 8003324:	051b      	lsls	r3, r3, #20
 8003326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800332a:	e014      	b.n	8003356 <HAL_ADC_ConfigChannel+0x44e>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	60fb      	str	r3, [r7, #12]
  return result;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	fab3 f383 	clz	r3, r3
 8003340:	b2db      	uxtb	r3, r3
 8003342:	3301      	adds	r3, #1
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	3b1e      	subs	r3, #30
 8003350:	051b      	lsls	r3, r3, #20
 8003352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003356:	430b      	orrs	r3, r1
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	6892      	ldr	r2, [r2, #8]
 800335c:	4619      	mov	r1, r3
 800335e:	f7ff f99b 	bl	8002698 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f280 80c4 	bge.w	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a65      	ldr	r2, [pc, #404]	; (8003508 <HAL_ADC_ConfigChannel+0x600>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x478>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a64      	ldr	r2, [pc, #400]	; (800350c <HAL_ADC_ConfigChannel+0x604>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x47c>
 8003380:	4b63      	ldr	r3, [pc, #396]	; (8003510 <HAL_ADC_ConfigChannel+0x608>)
 8003382:	e000      	b.n	8003386 <HAL_ADC_ConfigChannel+0x47e>
 8003384:	4b63      	ldr	r3, [pc, #396]	; (8003514 <HAL_ADC_ConfigChannel+0x60c>)
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff f8d2 	bl	8002530 <LL_ADC_GetCommonPathInternalCh>
 800338c:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a5d      	ldr	r2, [pc, #372]	; (8003508 <HAL_ADC_ConfigChannel+0x600>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x49a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a5b      	ldr	r2, [pc, #364]	; (800350c <HAL_ADC_ConfigChannel+0x604>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10e      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x4b8>
 80033a2:	4859      	ldr	r0, [pc, #356]	; (8003508 <HAL_ADC_ConfigChannel+0x600>)
 80033a4:	f7ff fa4c 	bl	8002840 <LL_ADC_IsEnabled>
 80033a8:	4604      	mov	r4, r0
 80033aa:	4858      	ldr	r0, [pc, #352]	; (800350c <HAL_ADC_ConfigChannel+0x604>)
 80033ac:	f7ff fa48 	bl	8002840 <LL_ADC_IsEnabled>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4323      	orrs	r3, r4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e008      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x4ca>
 80033c0:	4855      	ldr	r0, [pc, #340]	; (8003518 <HAL_ADC_ConfigChannel+0x610>)
 80033c2:	f7ff fa3d 	bl	8002840 <LL_ADC_IsEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d07b      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a50      	ldr	r2, [pc, #320]	; (800351c <HAL_ADC_ConfigChannel+0x614>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d12e      	bne.n	800343e <HAL_ADC_ConfigChannel+0x536>
 80033e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d129      	bne.n	800343e <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4a      	ldr	r2, [pc, #296]	; (8003518 <HAL_ADC_ConfigChannel+0x610>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d17f      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a43      	ldr	r2, [pc, #268]	; (8003508 <HAL_ADC_ConfigChannel+0x600>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x500>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a42      	ldr	r2, [pc, #264]	; (800350c <HAL_ADC_ConfigChannel+0x604>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x504>
 8003408:	4a41      	ldr	r2, [pc, #260]	; (8003510 <HAL_ADC_ConfigChannel+0x608>)
 800340a:	e000      	b.n	800340e <HAL_ADC_ConfigChannel+0x506>
 800340c:	4a41      	ldr	r2, [pc, #260]	; (8003514 <HAL_ADC_ConfigChannel+0x60c>)
 800340e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003410:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f7ff f877 	bl	800250a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800341c:	4b40      	ldr	r3, [pc, #256]	; (8003520 <HAL_ADC_ConfigChannel+0x618>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	099b      	lsrs	r3, r3, #6
 8003422:	4a40      	ldr	r2, [pc, #256]	; (8003524 <HAL_ADC_ConfigChannel+0x61c>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800342e:	e002      	b.n	8003436 <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3b01      	subs	r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f9      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800343c:	e05a      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a39      	ldr	r2, [pc, #228]	; (8003528 <HAL_ADC_ConfigChannel+0x620>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d11e      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x57e>
 8003448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d119      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a30      	ldr	r2, [pc, #192]	; (8003518 <HAL_ADC_ConfigChannel+0x610>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d14b      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <HAL_ADC_ConfigChannel+0x600>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x568>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a28      	ldr	r2, [pc, #160]	; (800350c <HAL_ADC_ConfigChannel+0x604>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x56c>
 8003470:	4a27      	ldr	r2, [pc, #156]	; (8003510 <HAL_ADC_ConfigChannel+0x608>)
 8003472:	e000      	b.n	8003476 <HAL_ADC_ConfigChannel+0x56e>
 8003474:	4a27      	ldr	r2, [pc, #156]	; (8003514 <HAL_ADC_ConfigChannel+0x60c>)
 8003476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003478:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f7ff f843 	bl	800250a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003484:	e036      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a28      	ldr	r2, [pc, #160]	; (800352c <HAL_ADC_ConfigChannel+0x624>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d131      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
 8003490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d12c      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a1e      	ldr	r2, [pc, #120]	; (8003518 <HAL_ADC_ConfigChannel+0x610>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d127      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_ADC_ConfigChannel+0x600>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_ADC_ConfigChannel+0x5b0>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a16      	ldr	r2, [pc, #88]	; (800350c <HAL_ADC_ConfigChannel+0x604>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x5b4>
 80034b8:	4a15      	ldr	r2, [pc, #84]	; (8003510 <HAL_ADC_ConfigChannel+0x608>)
 80034ba:	e000      	b.n	80034be <HAL_ADC_ConfigChannel+0x5b6>
 80034bc:	4a15      	ldr	r2, [pc, #84]	; (8003514 <HAL_ADC_ConfigChannel+0x60c>)
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f7ff f81f 	bl	800250a <LL_ADC_SetCommonPathInternalCh>
 80034cc:	e012      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80034e0:	e008      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	f043 0220 	orr.w	r2, r3, #32
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003500:	4618      	mov	r0, r3
 8003502:	3764      	adds	r7, #100	; 0x64
 8003504:	46bd      	mov	sp, r7
 8003506:	bd90      	pop	{r4, r7, pc}
 8003508:	40022000 	.word	0x40022000
 800350c:	40022100 	.word	0x40022100
 8003510:	40022300 	.word	0x40022300
 8003514:	58026300 	.word	0x58026300
 8003518:	58026000 	.word	0x58026000
 800351c:	cb840000 	.word	0xcb840000
 8003520:	24000004 	.word	0x24000004
 8003524:	053e2d63 	.word	0x053e2d63
 8003528:	c7520000 	.word	0xc7520000
 800352c:	cfb80000 	.word	0xcfb80000

08003530 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f9c8 	bl	80028dc <LL_ADC_REG_IsConversionOngoing>
 800354c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff f9ea 	bl	800292c <LL_ADC_INJ_IsConversionOngoing>
 8003558:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8090 	beq.w	8003688 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d02a      	beq.n	80035cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7d5b      	ldrb	r3, [r3, #21]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d126      	bne.n	80035cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7d1b      	ldrb	r3, [r3, #20]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d122      	bne.n	80035cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003586:	2301      	movs	r3, #1
 8003588:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800358a:	e014      	b.n	80035b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	4a41      	ldr	r2, [pc, #260]	; (8003694 <ADC_ConversionStop+0x164>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d90d      	bls.n	80035b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f043 0210 	orr.w	r2, r3, #16
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f043 0201 	orr.w	r2, r3, #1
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e06c      	b.n	800368a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b40      	cmp	r3, #64	; 0x40
 80035c2:	d1e3      	bne.n	800358c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2240      	movs	r2, #64	; 0x40
 80035ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d014      	beq.n	80035fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff f980 	bl	80028dc <LL_ADC_REG_IsConversionOngoing>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f93d 	bl	8002866 <LL_ADC_IsDisableOngoing>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d104      	bne.n	80035fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff f95c 	bl	80028b4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d014      	beq.n	800362c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff f990 	bl	800292c <LL_ADC_INJ_IsConversionOngoing>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00c      	beq.n	800362c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff f925 	bl	8002866 <LL_ADC_IsDisableOngoing>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff f96c 	bl	8002904 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d004      	beq.n	800363c <ADC_ConversionStop+0x10c>
 8003632:	2b03      	cmp	r3, #3
 8003634:	d105      	bne.n	8003642 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003636:	230c      	movs	r3, #12
 8003638:	617b      	str	r3, [r7, #20]
        break;
 800363a:	e005      	b.n	8003648 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800363c:	2308      	movs	r3, #8
 800363e:	617b      	str	r3, [r7, #20]
        break;
 8003640:	e002      	b.n	8003648 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003642:	2304      	movs	r3, #4
 8003644:	617b      	str	r3, [r7, #20]
        break;
 8003646:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003648:	f7fe fefe 	bl	8002448 <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800364e:	e014      	b.n	800367a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003650:	f7fe fefa 	bl	8002448 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b05      	cmp	r3, #5
 800365c:	d90d      	bls.n	800367a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003662:	f043 0210 	orr.w	r2, r3, #16
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	f043 0201 	orr.w	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e007      	b.n	800368a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e3      	bne.n	8003650 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	000cdbff 	.word	0x000cdbff

08003698 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff f8cb 	bl	8002840 <LL_ADC_IsEnabled>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d167      	bne.n	8003780 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	4b35      	ldr	r3, [pc, #212]	; (800378c <ADC_Enable+0xf4>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00d      	beq.n	80036da <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c2:	f043 0210 	orr.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e053      	b.n	8003782 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff f886 	bl	80027f0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036e4:	f7fe feb0 	bl	8002448 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a28      	ldr	r2, [pc, #160]	; (8003790 <ADC_Enable+0xf8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <ADC_Enable+0x66>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a26      	ldr	r2, [pc, #152]	; (8003794 <ADC_Enable+0xfc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d101      	bne.n	8003702 <ADC_Enable+0x6a>
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <ADC_Enable+0x100>)
 8003700:	e000      	b.n	8003704 <ADC_Enable+0x6c>
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <ADC_Enable+0x104>)
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff f817 	bl	8002738 <LL_ADC_GetMultimode>
 800370a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a20      	ldr	r2, [pc, #128]	; (8003794 <ADC_Enable+0xfc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d002      	beq.n	800371c <ADC_Enable+0x84>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e000      	b.n	800371e <ADC_Enable+0x86>
 800371c:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <ADC_Enable+0xf8>)
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	4293      	cmp	r3, r2
 8003724:	d025      	beq.n	8003772 <ADC_Enable+0xda>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d129      	bne.n	8003780 <ADC_Enable+0xe8>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800372c:	e021      	b.n	8003772 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f884 	bl	8002840 <LL_ADC_IsEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d104      	bne.n	8003748 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff f854 	bl	80027f0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003748:	f7fe fe7e 	bl	8002448 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d90d      	bls.n	8003772 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <ADC_Enable+0xea>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d1d6      	bne.n	800372e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	8000003f 	.word	0x8000003f
 8003790:	40022000 	.word	0x40022000
 8003794:	40022100 	.word	0x40022100
 8003798:	40022300 	.word	0x40022300
 800379c:	58026300 	.word	0x58026300

080037a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff f85a 	bl	8002866 <LL_ADC_IsDisableOngoing>
 80037b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff f841 	bl	8002840 <LL_ADC_IsEnabled>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d040      	beq.n	8003846 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d13d      	bne.n	8003846 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030d 	and.w	r3, r3, #13
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d10c      	bne.n	80037f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff f81b 	bl	8002818 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2203      	movs	r2, #3
 80037e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037ea:	f7fe fe2d 	bl	8002448 <HAL_GetTick>
 80037ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037f0:	e022      	b.n	8003838 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f043 0210 	orr.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f043 0201 	orr.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e01c      	b.n	8003848 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800380e:	f7fe fe1b 	bl	8002448 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d90d      	bls.n	8003838 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f043 0210 	orr.w	r2, r3, #16
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e007      	b.n	8003848 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e3      	bne.n	800380e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003866:	2b00      	cmp	r3, #0
 8003868:	d14b      	bne.n	8003902 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d021      	beq.n	80038c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fe feb3 	bl	80025f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d032      	beq.n	80038fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d12b      	bne.n	80038fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11f      	bne.n	80038fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
 80038c6:	e018      	b.n	80038fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d111      	bne.n	80038fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d105      	bne.n	80038fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7fe f8fc 	bl	8001af8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003900:	e00e      	b.n	8003920 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff faf0 	bl	8002ef4 <HAL_ADC_ErrorCallback>
}
 8003914:	e004      	b.n	8003920 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f7ff fad2 	bl	8002ee0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	f043 0204 	orr.w	r2, r3, #4
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7ff fac2 	bl	8002ef4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a70      	ldr	r2, [pc, #448]	; (8003b48 <ADC_ConfigureBoostMode+0x1d0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <ADC_ConfigureBoostMode+0x1c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6f      	ldr	r2, [pc, #444]	; (8003b4c <ADC_ConfigureBoostMode+0x1d4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d109      	bne.n	80039a8 <ADC_ConfigureBoostMode+0x30>
 8003994:	4b6e      	ldr	r3, [pc, #440]	; (8003b50 <ADC_ConfigureBoostMode+0x1d8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e008      	b.n	80039ba <ADC_ConfigureBoostMode+0x42>
 80039a8:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <ADC_ConfigureBoostMode+0x1dc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01a      	beq.n	80039f4 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039be:	f005 f8e3 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 80039c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039cc:	d006      	beq.n	80039dc <ADC_ConfigureBoostMode+0x64>
 80039ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d2:	d00b      	beq.n	80039ec <ADC_ConfigureBoostMode+0x74>
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d8:	d000      	beq.n	80039dc <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80039da:	e05d      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	60fb      	str	r3, [r7, #12]
        break;
 80039ea:	e055      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	60fb      	str	r3, [r7, #12]
        break;
 80039f2:	e051      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80039f8:	f006 f810 	bl	8009a1c <HAL_RCCEx_GetPeriphCLKFreq>
 80039fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a06:	d02a      	beq.n	8003a5e <ADC_ConfigureBoostMode+0xe6>
 8003a08:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a0c:	d813      	bhi.n	8003a36 <ADC_ConfigureBoostMode+0xbe>
 8003a0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a12:	d024      	beq.n	8003a5e <ADC_ConfigureBoostMode+0xe6>
 8003a14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a18:	d806      	bhi.n	8003a28 <ADC_ConfigureBoostMode+0xb0>
 8003a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a1e:	d01e      	beq.n	8003a5e <ADC_ConfigureBoostMode+0xe6>
 8003a20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a24:	d01b      	beq.n	8003a5e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8003a26:	e037      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2c:	d017      	beq.n	8003a5e <ADC_ConfigureBoostMode+0xe6>
 8003a2e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a32:	d014      	beq.n	8003a5e <ADC_ConfigureBoostMode+0xe6>
        break;
 8003a34:	e030      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003a36:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a3a:	d021      	beq.n	8003a80 <ADC_ConfigureBoostMode+0x108>
 8003a3c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a40:	d806      	bhi.n	8003a50 <ADC_ConfigureBoostMode+0xd8>
 8003a42:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a46:	d013      	beq.n	8003a70 <ADC_ConfigureBoostMode+0xf8>
 8003a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a4c:	d014      	beq.n	8003a78 <ADC_ConfigureBoostMode+0x100>
        break;
 8003a4e:	e023      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8003a50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a54:	d018      	beq.n	8003a88 <ADC_ConfigureBoostMode+0x110>
 8003a56:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a5a:	d019      	beq.n	8003a90 <ADC_ConfigureBoostMode+0x118>
        break;
 8003a5c:	e01c      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	0c9b      	lsrs	r3, r3, #18
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	60fb      	str	r3, [r7, #12]
        break;
 8003a6e:	e013      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	60fb      	str	r3, [r7, #12]
        break;
 8003a76:	e00f      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	60fb      	str	r3, [r7, #12]
        break;
 8003a7e:	e00b      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	099b      	lsrs	r3, r3, #6
 8003a84:	60fb      	str	r3, [r7, #12]
        break;
 8003a86:	e007      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	09db      	lsrs	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
        break;
 8003a8e:	e003      	b.n	8003a98 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	60fb      	str	r3, [r7, #12]
        break;
 8003a96:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003a98:	f7fe fd04 	bl	80024a4 <HAL_GetREVID>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d815      	bhi.n	8003ad2 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a2b      	ldr	r2, [pc, #172]	; (8003b58 <ADC_ConfigureBoostMode+0x1e0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d908      	bls.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003abc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003abe:	e03e      	b.n	8003b3e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ace:	609a      	str	r2, [r3, #8]
}
 8003ad0:	e035      	b.n	8003b3e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <ADC_ConfigureBoostMode+0x1e4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d808      	bhi.n	8003af2 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003aee:	609a      	str	r2, [r3, #8]
}
 8003af0:	e025      	b.n	8003b3e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4a1a      	ldr	r2, [pc, #104]	; (8003b60 <ADC_ConfigureBoostMode+0x1e8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d80a      	bhi.n	8003b10 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b0c:	609a      	str	r2, [r3, #8]
}
 8003b0e:	e016      	b.n	8003b3e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <ADC_ConfigureBoostMode+0x1ec>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d80a      	bhi.n	8003b2e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2a:	609a      	str	r2, [r3, #8]
}
 8003b2c:	e007      	b.n	8003b3e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b3c:	609a      	str	r2, [r3, #8]
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40022000 	.word	0x40022000
 8003b4c:	40022100 	.word	0x40022100
 8003b50:	40022300 	.word	0x40022300
 8003b54:	58026300 	.word	0x58026300
 8003b58:	01312d00 	.word	0x01312d00
 8003b5c:	005f5e10 	.word	0x005f5e10
 8003b60:	00bebc20 	.word	0x00bebc20
 8003b64:	017d7840 	.word	0x017d7840

08003b68 <LL_ADC_IsEnabled>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <LL_ADC_IsEnabled+0x18>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <LL_ADC_IsEnabled+0x1a>
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
	...

08003b90 <LL_ADC_StartCalibration>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <LL_ADC_StartCalibration+0x38>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	3ffeffc0 	.word	0x3ffeffc0

08003bcc <LL_ADC_IsCalibrationOnGoing>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be0:	d101      	bne.n	8003be6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <LL_ADC_REG_IsConversionOngoing>:
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d101      	bne.n	8003c0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_ADCEx_Calibration_Start+0x1e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e04c      	b.n	8003cd4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff fdac 	bl	80037a0 <ADC_Disable>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d135      	bne.n	8003cbe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c56:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	f043 0202 	orr.w	r2, r3, #2
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff ff90 	bl	8003b90 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c70:	e014      	b.n	8003c9c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	3301      	adds	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d90d      	bls.n	8003c9c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c84:	f023 0312 	bic.w	r3, r3, #18
 8003c88:	f043 0210 	orr.w	r2, r3, #16
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e01b      	b.n	8003cd4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff93 	bl	8003bcc <LL_ADC_IsCalibrationOnGoing>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e2      	bne.n	8003c72 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb0:	f023 0303 	bic.w	r3, r3, #3
 8003cb4:	f043 0201 	orr.w	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	655a      	str	r2, [r3, #84]	; 0x54
 8003cbc:	e005      	b.n	8003cca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc2:	f043 0210 	orr.w	r2, r3, #16
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	ffffeefd 	.word	0xffffeefd
 8003ce0:	25c3f7ff 	.word	0x25c3f7ff

08003ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b09f      	sub	sp, #124	; 0x7c
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e0ba      	b.n	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5c      	ldr	r2, [pc, #368]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d102      	bne.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003d14:	4b5b      	ldr	r3, [pc, #364]	; (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	e001      	b.n	8003d1e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	f043 0220 	orr.w	r2, r3, #32
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e09d      	b.n	8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff ff58 	bl	8003bf4 <LL_ADC_REG_IsConversionOngoing>
 8003d44:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff ff52 	bl	8003bf4 <LL_ADC_REG_IsConversionOngoing>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d17f      	bne.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d17c      	bne.n	8003e56 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a47      	ldr	r2, [pc, #284]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a46      	ldr	r2, [pc, #280]	; (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8003d70:	4b45      	ldr	r3, [pc, #276]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d72:	e000      	b.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003d74:	4b45      	ldr	r3, [pc, #276]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d76:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d039      	beq.n	8003df4 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d90:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a38      	ldr	r2, [pc, #224]	; (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d10e      	bne.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003da6:	4836      	ldr	r0, [pc, #216]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003da8:	f7ff fede 	bl	8003b68 <LL_ADC_IsEnabled>
 8003dac:	4604      	mov	r4, r0
 8003dae:	4835      	ldr	r0, [pc, #212]	; (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003db0:	f7ff feda 	bl	8003b68 <LL_ADC_IsEnabled>
 8003db4:	4603      	mov	r3, r0
 8003db6:	4323      	orrs	r3, r4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e008      	b.n	8003dd6 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003dc4:	4832      	ldr	r0, [pc, #200]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dc6:	f7ff fecf 	bl	8003b68 <LL_ADC_IsEnabled>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d047      	beq.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	6811      	ldr	r1, [r2, #0]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	6892      	ldr	r2, [r2, #8]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	431a      	orrs	r2, r3
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003df2:	e03a      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d10e      	bne.n	8003e32 <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003e14:	481a      	ldr	r0, [pc, #104]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003e16:	f7ff fea7 	bl	8003b68 <LL_ADC_IsEnabled>
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	4819      	ldr	r0, [pc, #100]	; (8003e84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003e1e:	f7ff fea3 	bl	8003b68 <LL_ADC_IsEnabled>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4323      	orrs	r3, r4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	e008      	b.n	8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003e32:	4817      	ldr	r0, [pc, #92]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e34:	f7ff fe98 	bl	8003b68 <LL_ADC_IsEnabled>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2301      	moveq	r3, #1
 8003e40:	2300      	movne	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d010      	beq.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e52:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e54:	e009      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e68:	e000      	b.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e6a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	377c      	adds	r7, #124	; 0x7c
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd90      	pop	{r4, r7, pc}
 8003e80:	40022000 	.word	0x40022000
 8003e84:	40022100 	.word	0x40022100
 8003e88:	40022300 	.word	0x40022300
 8003e8c:	58026300 	.word	0x58026300
 8003e90:	58026000 	.word	0x58026000
 8003e94:	fffff0e0 	.word	0xfffff0e0

08003e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x40>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <__NVIC_SetPriorityGrouping+0x44>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x40>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	60d3      	str	r3, [r2, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00
 8003edc:	05fa0000 	.word	0x05fa0000

08003ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	f003 0307 	and.w	r3, r3, #7
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	db0b      	blt.n	8003f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	f003 021f 	and.w	r2, r3, #31
 8003f14:	4907      	ldr	r1, [pc, #28]	; (8003f34 <__NVIC_EnableIRQ+0x38>)
 8003f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000e100 	.word	0xe000e100

08003f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	6039      	str	r1, [r7, #0]
 8003f42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	db0a      	blt.n	8003f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	490c      	ldr	r1, [pc, #48]	; (8003f84 <__NVIC_SetPriority+0x4c>)
 8003f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f56:	0112      	lsls	r2, r2, #4
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f60:	e00a      	b.n	8003f78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <__NVIC_SetPriority+0x50>)
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	3b04      	subs	r3, #4
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	440b      	add	r3, r1
 8003f76:	761a      	strb	r2, [r3, #24]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	e000e100 	.word	0xe000e100
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	; 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f1c3 0307 	rsb	r3, r3, #7
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	bf28      	it	cs
 8003faa:	2304      	movcs	r3, #4
 8003fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d902      	bls.n	8003fbc <NVIC_EncodePriority+0x30>
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3b03      	subs	r3, #3
 8003fba:	e000      	b.n	8003fbe <NVIC_EncodePriority+0x32>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43da      	mvns	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	401a      	ands	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	43d9      	mvns	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	4313      	orrs	r3, r2
         );
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004004:	d301      	bcc.n	800400a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004006:	2301      	movs	r3, #1
 8004008:	e00f      	b.n	800402a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <SysTick_Config+0x40>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004012:	210f      	movs	r1, #15
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	f7ff ff8e 	bl	8003f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <SysTick_Config+0x40>)
 800401e:	2200      	movs	r2, #0
 8004020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004022:	4b04      	ldr	r3, [pc, #16]	; (8004034 <SysTick_Config+0x40>)
 8004024:	2207      	movs	r2, #7
 8004026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	e000e010 	.word	0xe000e010

08004038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff29 	bl	8003e98 <__NVIC_SetPriorityGrouping>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b086      	sub	sp, #24
 8004052:	af00      	add	r7, sp, #0
 8004054:	4603      	mov	r3, r0
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800405c:	f7ff ff40 	bl	8003ee0 <__NVIC_GetPriorityGrouping>
 8004060:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68b9      	ldr	r1, [r7, #8]
 8004066:	6978      	ldr	r0, [r7, #20]
 8004068:	f7ff ff90 	bl	8003f8c <NVIC_EncodePriority>
 800406c:	4602      	mov	r2, r0
 800406e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004072:	4611      	mov	r1, r2
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff5f 	bl	8003f38 <__NVIC_SetPriority>
}
 800407a:	bf00      	nop
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	4603      	mov	r3, r0
 800408a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800408c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ff33 	bl	8003efc <__NVIC_EnableIRQ>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ffa4 	bl	8003ff4 <SysTick_Config>
 80040ac:	4603      	mov	r3, r0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e014      	b.n	80040f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	791b      	ldrb	r3, [r3, #4]
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d105      	bne.n	80040de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fd fdd3 	bl	8001c84 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
	...

080040fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
 8004108:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	795b      	ldrb	r3, [r3, #5]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_DAC_Start_DMA+0x1e>
 8004116:	2302      	movs	r3, #2
 8004118:	e09e      	b.n	8004258 <HAL_DAC_Start_DMA+0x15c>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2202      	movs	r2, #2
 8004124:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d12a      	bne.n	8004182 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a4b      	ldr	r2, [pc, #300]	; (8004260 <HAL_DAC_Start_DMA+0x164>)
 8004132:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_DAC_Start_DMA+0x168>)
 800413a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a49      	ldr	r2, [pc, #292]	; (8004268 <HAL_DAC_Start_DMA+0x16c>)
 8004142:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004152:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	2b04      	cmp	r3, #4
 8004158:	d009      	beq.n	800416e <HAL_DAC_Start_DMA+0x72>
 800415a:	2b08      	cmp	r3, #8
 800415c:	d00c      	beq.n	8004178 <HAL_DAC_Start_DMA+0x7c>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d000      	beq.n	8004164 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004162:	e039      	b.n	80041d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	613b      	str	r3, [r7, #16]
        break;
 800416c:	e034      	b.n	80041d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	613b      	str	r3, [r7, #16]
        break;
 8004176:	e02f      	b.n	80041d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3310      	adds	r3, #16
 800417e:	613b      	str	r3, [r7, #16]
        break;
 8004180:	e02a      	b.n	80041d8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4a39      	ldr	r2, [pc, #228]	; (800426c <HAL_DAC_Start_DMA+0x170>)
 8004188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4a38      	ldr	r2, [pc, #224]	; (8004270 <HAL_DAC_Start_DMA+0x174>)
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	4a37      	ldr	r2, [pc, #220]	; (8004274 <HAL_DAC_Start_DMA+0x178>)
 8004198:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d009      	beq.n	80041c4 <HAL_DAC_Start_DMA+0xc8>
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d00c      	beq.n	80041ce <HAL_DAC_Start_DMA+0xd2>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d000      	beq.n	80041ba <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80041b8:	e00e      	b.n	80041d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	613b      	str	r3, [r7, #16]
        break;
 80041c2:	e009      	b.n	80041d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3318      	adds	r3, #24
 80041ca:	613b      	str	r3, [r7, #16]
        break;
 80041cc:	e004      	b.n	80041d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	331c      	adds	r3, #28
 80041d4:	613b      	str	r3, [r7, #16]
        break;
 80041d6:	bf00      	nop
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d111      	bne.n	8004202 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ec:	601a      	str	r2, [r3, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6898      	ldr	r0, [r3, #8]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	f000 fd68 	bl	8004ccc <HAL_DMA_Start_IT>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]
 8004200:	e010      	b.n	8004224 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004210:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68d8      	ldr	r0, [r3, #12]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	f000 fd56 	bl	8004ccc <HAL_DMA_Start_IT>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800422a:	7dfb      	ldrb	r3, [r7, #23]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10c      	bne.n	800424a <HAL_DAC_Start_DMA+0x14e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2201      	movs	r2, #1
 800423e:	409a      	lsls	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e005      	b.n	8004256 <HAL_DAC_Start_DMA+0x15a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f043 0204 	orr.w	r2, r3, #4
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	08004501 	.word	0x08004501
 8004264:	08004523 	.word	0x08004523
 8004268:	0800453f 	.word	0x0800453f
 800426c:	080045a9 	.word	0x080045a9
 8004270:	080045cb 	.word	0x080045cb
 8004274:	080045e7 	.word	0x080045e7

08004278 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	795b      	ldrb	r3, [r3, #5]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d101      	bne.n	80042b8 <HAL_DAC_ConfigChannel+0x18>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e11d      	b.n	80044f4 <HAL_DAC_ConfigChannel+0x254>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2201      	movs	r2, #1
 80042bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2202      	movs	r2, #2
 80042c2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d174      	bne.n	80043b6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80042cc:	f7fe f8bc 	bl	8002448 <HAL_GetTick>
 80042d0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d134      	bne.n	8004342 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80042d8:	e011      	b.n	80042fe <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80042da:	f7fe f8b5 	bl	8002448 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d90a      	bls.n	80042fe <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f043 0208 	orr.w	r2, r3, #8
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2203      	movs	r2, #3
 80042f8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e0fa      	b.n	80044f4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004304:	4b7d      	ldr	r3, [pc, #500]	; (80044fc <HAL_DAC_ConfigChannel+0x25c>)
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e6      	bne.n	80042da <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800430c:	2001      	movs	r0, #1
 800430e:	f7fe f8a7 	bl	8002460 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	6992      	ldr	r2, [r2, #24]
 800431a:	641a      	str	r2, [r3, #64]	; 0x40
 800431c:	e01e      	b.n	800435c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800431e:	f7fe f893 	bl	8002448 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	d90a      	bls.n	8004342 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f043 0208 	orr.w	r2, r3, #8
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2203      	movs	r2, #3
 800433c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e0d8      	b.n	80044f4 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	2b00      	cmp	r3, #0
 800434a:	dbe8      	blt.n	800431e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800434c:	2001      	movs	r0, #1
 800434e:	f7fe f887 	bl	8002460 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	6992      	ldr	r2, [r2, #24]
 800435a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	ea02 0103 	and.w	r1, r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	409a      	lsls	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	21ff      	movs	r1, #255	; 0xff
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	ea02 0103 	and.w	r1, r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6a1a      	ldr	r2, [r3, #32]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	409a      	lsls	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d11d      	bne.n	80043fa <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	221f      	movs	r2, #31
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4013      	ands	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2207      	movs	r2, #7
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4013      	ands	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d102      	bne.n	8004424 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e00f      	b.n	8004444 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d102      	bne.n	8004432 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800442c:	2301      	movs	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
 8004430:	e008      	b.n	8004444 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800443a:	2301      	movs	r3, #1
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e001      	b.n	8004444 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4313      	orrs	r3, r2
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6819      	ldr	r1, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43da      	mvns	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	400a      	ands	r2, r1
 800448a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4013      	ands	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6819      	ldr	r1, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	22c0      	movs	r2, #192	; 0xc0
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43da      	mvns	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	400a      	ands	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2201      	movs	r2, #1
 80044ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20008000 	.word	0x20008000

08004500 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f7fd fb0a 	bl	8001b28 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	711a      	strb	r2, [r3, #4]
}
 800451a:	bf00      	nop
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff fea1 	bl	8004278 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f043 0204 	orr.w	r2, r3, #4
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff fe97 	bl	800428c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	711a      	strb	r2, [r3, #4]
}
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f7ff ffd8 	bl	800456c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	711a      	strb	r2, [r3, #4]
}
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ffd1 	bl	8004580 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f043 0204 	orr.w	r2, r3, #4
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff ffc7 	bl	8004594 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	711a      	strb	r2, [r3, #4]
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800461c:	f7fd ff14 	bl	8002448 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e316      	b.n	8004c5a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a66      	ldr	r2, [pc, #408]	; (80047cc <HAL_DMA_Init+0x1b8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d04a      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a65      	ldr	r2, [pc, #404]	; (80047d0 <HAL_DMA_Init+0x1bc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d045      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a63      	ldr	r2, [pc, #396]	; (80047d4 <HAL_DMA_Init+0x1c0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d040      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a62      	ldr	r2, [pc, #392]	; (80047d8 <HAL_DMA_Init+0x1c4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d03b      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a60      	ldr	r2, [pc, #384]	; (80047dc <HAL_DMA_Init+0x1c8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d036      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a5f      	ldr	r2, [pc, #380]	; (80047e0 <HAL_DMA_Init+0x1cc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d031      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a5d      	ldr	r2, [pc, #372]	; (80047e4 <HAL_DMA_Init+0x1d0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d02c      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a5c      	ldr	r2, [pc, #368]	; (80047e8 <HAL_DMA_Init+0x1d4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d027      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a5a      	ldr	r2, [pc, #360]	; (80047ec <HAL_DMA_Init+0x1d8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d022      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a59      	ldr	r2, [pc, #356]	; (80047f0 <HAL_DMA_Init+0x1dc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d01d      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a57      	ldr	r2, [pc, #348]	; (80047f4 <HAL_DMA_Init+0x1e0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d018      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a56      	ldr	r2, [pc, #344]	; (80047f8 <HAL_DMA_Init+0x1e4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a54      	ldr	r2, [pc, #336]	; (80047fc <HAL_DMA_Init+0x1e8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a53      	ldr	r2, [pc, #332]	; (8004800 <HAL_DMA_Init+0x1ec>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d009      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a51      	ldr	r2, [pc, #324]	; (8004804 <HAL_DMA_Init+0x1f0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_DMA_Init+0xb8>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a50      	ldr	r2, [pc, #320]	; (8004808 <HAL_DMA_Init+0x1f4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d101      	bne.n	80046d0 <HAL_DMA_Init+0xbc>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_DMA_Init+0xbe>
 80046d0:	2300      	movs	r3, #0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 813b 	beq.w	800494e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a37      	ldr	r2, [pc, #220]	; (80047cc <HAL_DMA_Init+0x1b8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d04a      	beq.n	8004788 <HAL_DMA_Init+0x174>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a36      	ldr	r2, [pc, #216]	; (80047d0 <HAL_DMA_Init+0x1bc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d045      	beq.n	8004788 <HAL_DMA_Init+0x174>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a34      	ldr	r2, [pc, #208]	; (80047d4 <HAL_DMA_Init+0x1c0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d040      	beq.n	8004788 <HAL_DMA_Init+0x174>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a33      	ldr	r2, [pc, #204]	; (80047d8 <HAL_DMA_Init+0x1c4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d03b      	beq.n	8004788 <HAL_DMA_Init+0x174>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a31      	ldr	r2, [pc, #196]	; (80047dc <HAL_DMA_Init+0x1c8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d036      	beq.n	8004788 <HAL_DMA_Init+0x174>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a30      	ldr	r2, [pc, #192]	; (80047e0 <HAL_DMA_Init+0x1cc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d031      	beq.n	8004788 <HAL_DMA_Init+0x174>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2e      	ldr	r2, [pc, #184]	; (80047e4 <HAL_DMA_Init+0x1d0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d02c      	beq.n	8004788 <HAL_DMA_Init+0x174>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2d      	ldr	r2, [pc, #180]	; (80047e8 <HAL_DMA_Init+0x1d4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d027      	beq.n	8004788 <HAL_DMA_Init+0x174>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2b      	ldr	r2, [pc, #172]	; (80047ec <HAL_DMA_Init+0x1d8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <HAL_DMA_Init+0x174>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <HAL_DMA_Init+0x1dc>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <HAL_DMA_Init+0x174>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a28      	ldr	r2, [pc, #160]	; (80047f4 <HAL_DMA_Init+0x1e0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <HAL_DMA_Init+0x174>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a27      	ldr	r2, [pc, #156]	; (80047f8 <HAL_DMA_Init+0x1e4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <HAL_DMA_Init+0x174>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a25      	ldr	r2, [pc, #148]	; (80047fc <HAL_DMA_Init+0x1e8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_DMA_Init+0x174>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a24      	ldr	r2, [pc, #144]	; (8004800 <HAL_DMA_Init+0x1ec>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_DMA_Init+0x174>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a22      	ldr	r2, [pc, #136]	; (8004804 <HAL_DMA_Init+0x1f0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_DMA_Init+0x174>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a21      	ldr	r2, [pc, #132]	; (8004808 <HAL_DMA_Init+0x1f4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d108      	bne.n	800479a <HAL_DMA_Init+0x186>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e007      	b.n	80047aa <HAL_DMA_Init+0x196>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0201 	bic.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047aa:	e02f      	b.n	800480c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047ac:	f7fd fe4c 	bl	8002448 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d928      	bls.n	800480c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2203      	movs	r2, #3
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e246      	b.n	8004c5a <HAL_DMA_Init+0x646>
 80047cc:	40020010 	.word	0x40020010
 80047d0:	40020028 	.word	0x40020028
 80047d4:	40020040 	.word	0x40020040
 80047d8:	40020058 	.word	0x40020058
 80047dc:	40020070 	.word	0x40020070
 80047e0:	40020088 	.word	0x40020088
 80047e4:	400200a0 	.word	0x400200a0
 80047e8:	400200b8 	.word	0x400200b8
 80047ec:	40020410 	.word	0x40020410
 80047f0:	40020428 	.word	0x40020428
 80047f4:	40020440 	.word	0x40020440
 80047f8:	40020458 	.word	0x40020458
 80047fc:	40020470 	.word	0x40020470
 8004800:	40020488 	.word	0x40020488
 8004804:	400204a0 	.word	0x400204a0
 8004808:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1c8      	bne.n	80047ac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4b83      	ldr	r3, [pc, #524]	; (8004a34 <HAL_DMA_Init+0x420>)
 8004826:	4013      	ands	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004832:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800484a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	2b04      	cmp	r3, #4
 800485e:	d107      	bne.n	8004870 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	4313      	orrs	r3, r2
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004870:	4b71      	ldr	r3, [pc, #452]	; (8004a38 <HAL_DMA_Init+0x424>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b71      	ldr	r3, [pc, #452]	; (8004a3c <HAL_DMA_Init+0x428>)
 8004876:	4013      	ands	r3, r2
 8004878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800487c:	d328      	bcc.n	80048d0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b28      	cmp	r3, #40	; 0x28
 8004884:	d903      	bls.n	800488e <HAL_DMA_Init+0x27a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b2e      	cmp	r3, #46	; 0x2e
 800488c:	d917      	bls.n	80048be <HAL_DMA_Init+0x2aa>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b3e      	cmp	r3, #62	; 0x3e
 8004894:	d903      	bls.n	800489e <HAL_DMA_Init+0x28a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b42      	cmp	r3, #66	; 0x42
 800489c:	d90f      	bls.n	80048be <HAL_DMA_Init+0x2aa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b46      	cmp	r3, #70	; 0x46
 80048a4:	d903      	bls.n	80048ae <HAL_DMA_Init+0x29a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b48      	cmp	r3, #72	; 0x48
 80048ac:	d907      	bls.n	80048be <HAL_DMA_Init+0x2aa>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b4e      	cmp	r3, #78	; 0x4e
 80048b4:	d905      	bls.n	80048c2 <HAL_DMA_Init+0x2ae>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b52      	cmp	r3, #82	; 0x52
 80048bc:	d801      	bhi.n	80048c2 <HAL_DMA_Init+0x2ae>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_DMA_Init+0x2b0>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 0307 	bic.w	r3, r3, #7
 80048e6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d117      	bne.n	800492a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f002 f8ed 	bl	8006aec <DMA_CheckFifoParam>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2240      	movs	r2, #64	; 0x40
 800491c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e197      	b.n	8004c5a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f002 f828 	bl	8006988 <DMA_CalcBaseAndBitshift>
 8004938:	4603      	mov	r3, r0
 800493a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	223f      	movs	r2, #63	; 0x3f
 8004946:	409a      	lsls	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	e0cd      	b.n	8004aea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a3b      	ldr	r2, [pc, #236]	; (8004a40 <HAL_DMA_Init+0x42c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d022      	beq.n	800499e <HAL_DMA_Init+0x38a>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a39      	ldr	r2, [pc, #228]	; (8004a44 <HAL_DMA_Init+0x430>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d01d      	beq.n	800499e <HAL_DMA_Init+0x38a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a38      	ldr	r2, [pc, #224]	; (8004a48 <HAL_DMA_Init+0x434>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d018      	beq.n	800499e <HAL_DMA_Init+0x38a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a36      	ldr	r2, [pc, #216]	; (8004a4c <HAL_DMA_Init+0x438>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_DMA_Init+0x38a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a35      	ldr	r2, [pc, #212]	; (8004a50 <HAL_DMA_Init+0x43c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <HAL_DMA_Init+0x38a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a33      	ldr	r2, [pc, #204]	; (8004a54 <HAL_DMA_Init+0x440>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_DMA_Init+0x38a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a32      	ldr	r2, [pc, #200]	; (8004a58 <HAL_DMA_Init+0x444>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_DMA_Init+0x38a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a30      	ldr	r2, [pc, #192]	; (8004a5c <HAL_DMA_Init+0x448>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d101      	bne.n	80049a2 <HAL_DMA_Init+0x38e>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_DMA_Init+0x390>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8097 	beq.w	8004ad8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <HAL_DMA_Init+0x42c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d021      	beq.n	80049f8 <HAL_DMA_Init+0x3e4>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_DMA_Init+0x430>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01c      	beq.n	80049f8 <HAL_DMA_Init+0x3e4>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a21      	ldr	r2, [pc, #132]	; (8004a48 <HAL_DMA_Init+0x434>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d017      	beq.n	80049f8 <HAL_DMA_Init+0x3e4>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_DMA_Init+0x438>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d012      	beq.n	80049f8 <HAL_DMA_Init+0x3e4>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <HAL_DMA_Init+0x43c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00d      	beq.n	80049f8 <HAL_DMA_Init+0x3e4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <HAL_DMA_Init+0x440>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d008      	beq.n	80049f8 <HAL_DMA_Init+0x3e4>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <HAL_DMA_Init+0x444>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d003      	beq.n	80049f8 <HAL_DMA_Init+0x3e4>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a19      	ldr	r2, [pc, #100]	; (8004a5c <HAL_DMA_Init+0x448>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4b12      	ldr	r3, [pc, #72]	; (8004a60 <HAL_DMA_Init+0x44c>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d020      	beq.n	8004a64 <HAL_DMA_Init+0x450>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b80      	cmp	r3, #128	; 0x80
 8004a28:	d102      	bne.n	8004a30 <HAL_DMA_Init+0x41c>
 8004a2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a2e:	e01a      	b.n	8004a66 <HAL_DMA_Init+0x452>
 8004a30:	2300      	movs	r3, #0
 8004a32:	e018      	b.n	8004a66 <HAL_DMA_Init+0x452>
 8004a34:	fe10803f 	.word	0xfe10803f
 8004a38:	5c001000 	.word	0x5c001000
 8004a3c:	ffff0000 	.word	0xffff0000
 8004a40:	58025408 	.word	0x58025408
 8004a44:	5802541c 	.word	0x5802541c
 8004a48:	58025430 	.word	0x58025430
 8004a4c:	58025444 	.word	0x58025444
 8004a50:	58025458 	.word	0x58025458
 8004a54:	5802546c 	.word	0x5802546c
 8004a58:	58025480 	.word	0x58025480
 8004a5c:	58025494 	.word	0x58025494
 8004a60:	fffe000f 	.word	0xfffe000f
 8004a64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68d2      	ldr	r2, [r2, #12]
 8004a6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b6e      	ldr	r3, [pc, #440]	; (8004c64 <HAL_DMA_Init+0x650>)
 8004aac:	4413      	add	r3, r2
 8004aae:	4a6e      	ldr	r2, [pc, #440]	; (8004c68 <HAL_DMA_Init+0x654>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	091b      	lsrs	r3, r3, #4
 8004ab6:	009a      	lsls	r2, r3, #2
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f001 ff63 	bl	8006988 <DMA_CalcBaseAndBitshift>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	2201      	movs	r2, #1
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	e008      	b.n	8004aea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2240      	movs	r2, #64	; 0x40
 8004adc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e0b7      	b.n	8004c5a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a5f      	ldr	r2, [pc, #380]	; (8004c6c <HAL_DMA_Init+0x658>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d072      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a5d      	ldr	r2, [pc, #372]	; (8004c70 <HAL_DMA_Init+0x65c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d06d      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a5c      	ldr	r2, [pc, #368]	; (8004c74 <HAL_DMA_Init+0x660>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d068      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a5a      	ldr	r2, [pc, #360]	; (8004c78 <HAL_DMA_Init+0x664>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d063      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a59      	ldr	r2, [pc, #356]	; (8004c7c <HAL_DMA_Init+0x668>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d05e      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a57      	ldr	r2, [pc, #348]	; (8004c80 <HAL_DMA_Init+0x66c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d059      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a56      	ldr	r2, [pc, #344]	; (8004c84 <HAL_DMA_Init+0x670>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d054      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a54      	ldr	r2, [pc, #336]	; (8004c88 <HAL_DMA_Init+0x674>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d04f      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a53      	ldr	r2, [pc, #332]	; (8004c8c <HAL_DMA_Init+0x678>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d04a      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a51      	ldr	r2, [pc, #324]	; (8004c90 <HAL_DMA_Init+0x67c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d045      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a50      	ldr	r2, [pc, #320]	; (8004c94 <HAL_DMA_Init+0x680>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d040      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a4e      	ldr	r2, [pc, #312]	; (8004c98 <HAL_DMA_Init+0x684>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d03b      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a4d      	ldr	r2, [pc, #308]	; (8004c9c <HAL_DMA_Init+0x688>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d036      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a4b      	ldr	r2, [pc, #300]	; (8004ca0 <HAL_DMA_Init+0x68c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d031      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a4a      	ldr	r2, [pc, #296]	; (8004ca4 <HAL_DMA_Init+0x690>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d02c      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a48      	ldr	r2, [pc, #288]	; (8004ca8 <HAL_DMA_Init+0x694>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d027      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a47      	ldr	r2, [pc, #284]	; (8004cac <HAL_DMA_Init+0x698>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d022      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a45      	ldr	r2, [pc, #276]	; (8004cb0 <HAL_DMA_Init+0x69c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01d      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a44      	ldr	r2, [pc, #272]	; (8004cb4 <HAL_DMA_Init+0x6a0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d018      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a42      	ldr	r2, [pc, #264]	; (8004cb8 <HAL_DMA_Init+0x6a4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a41      	ldr	r2, [pc, #260]	; (8004cbc <HAL_DMA_Init+0x6a8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00e      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a3f      	ldr	r2, [pc, #252]	; (8004cc0 <HAL_DMA_Init+0x6ac>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a3e      	ldr	r2, [pc, #248]	; (8004cc4 <HAL_DMA_Init+0x6b0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_DMA_Init+0x5c6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a3c      	ldr	r2, [pc, #240]	; (8004cc8 <HAL_DMA_Init+0x6b4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d101      	bne.n	8004bde <HAL_DMA_Init+0x5ca>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_DMA_Init+0x5cc>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d032      	beq.n	8004c4a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f001 fffd 	bl	8006be4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b80      	cmp	r3, #128	; 0x80
 8004bf0:	d102      	bne.n	8004bf8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c0c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d010      	beq.n	8004c38 <HAL_DMA_Init+0x624>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d80c      	bhi.n	8004c38 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f002 f87a 	bl	8006d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c34:	605a      	str	r2, [r3, #4]
 8004c36:	e008      	b.n	8004c4a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	a7fdabf8 	.word	0xa7fdabf8
 8004c68:	cccccccd 	.word	0xcccccccd
 8004c6c:	40020010 	.word	0x40020010
 8004c70:	40020028 	.word	0x40020028
 8004c74:	40020040 	.word	0x40020040
 8004c78:	40020058 	.word	0x40020058
 8004c7c:	40020070 	.word	0x40020070
 8004c80:	40020088 	.word	0x40020088
 8004c84:	400200a0 	.word	0x400200a0
 8004c88:	400200b8 	.word	0x400200b8
 8004c8c:	40020410 	.word	0x40020410
 8004c90:	40020428 	.word	0x40020428
 8004c94:	40020440 	.word	0x40020440
 8004c98:	40020458 	.word	0x40020458
 8004c9c:	40020470 	.word	0x40020470
 8004ca0:	40020488 	.word	0x40020488
 8004ca4:	400204a0 	.word	0x400204a0
 8004ca8:	400204b8 	.word	0x400204b8
 8004cac:	58025408 	.word	0x58025408
 8004cb0:	5802541c 	.word	0x5802541c
 8004cb4:	58025430 	.word	0x58025430
 8004cb8:	58025444 	.word	0x58025444
 8004cbc:	58025458 	.word	0x58025458
 8004cc0:	5802546c 	.word	0x5802546c
 8004cc4:	58025480 	.word	0x58025480
 8004cc8:	58025494 	.word	0x58025494

08004ccc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e226      	b.n	8005136 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_DMA_Start_IT+0x2a>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e21f      	b.n	8005136 <HAL_DMA_Start_IT+0x46a>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	f040 820a 	bne.w	8005120 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a68      	ldr	r2, [pc, #416]	; (8004ec0 <HAL_DMA_Start_IT+0x1f4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d04a      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a66      	ldr	r2, [pc, #408]	; (8004ec4 <HAL_DMA_Start_IT+0x1f8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d045      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a65      	ldr	r2, [pc, #404]	; (8004ec8 <HAL_DMA_Start_IT+0x1fc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d040      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a63      	ldr	r2, [pc, #396]	; (8004ecc <HAL_DMA_Start_IT+0x200>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d03b      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a62      	ldr	r2, [pc, #392]	; (8004ed0 <HAL_DMA_Start_IT+0x204>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d036      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a60      	ldr	r2, [pc, #384]	; (8004ed4 <HAL_DMA_Start_IT+0x208>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d031      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a5f      	ldr	r2, [pc, #380]	; (8004ed8 <HAL_DMA_Start_IT+0x20c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d02c      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a5d      	ldr	r2, [pc, #372]	; (8004edc <HAL_DMA_Start_IT+0x210>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d027      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a5c      	ldr	r2, [pc, #368]	; (8004ee0 <HAL_DMA_Start_IT+0x214>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d022      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a5a      	ldr	r2, [pc, #360]	; (8004ee4 <HAL_DMA_Start_IT+0x218>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01d      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a59      	ldr	r2, [pc, #356]	; (8004ee8 <HAL_DMA_Start_IT+0x21c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d018      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a57      	ldr	r2, [pc, #348]	; (8004eec <HAL_DMA_Start_IT+0x220>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a56      	ldr	r2, [pc, #344]	; (8004ef0 <HAL_DMA_Start_IT+0x224>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00e      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a54      	ldr	r2, [pc, #336]	; (8004ef4 <HAL_DMA_Start_IT+0x228>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a53      	ldr	r2, [pc, #332]	; (8004ef8 <HAL_DMA_Start_IT+0x22c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_DMA_Start_IT+0xee>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a51      	ldr	r2, [pc, #324]	; (8004efc <HAL_DMA_Start_IT+0x230>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d108      	bne.n	8004dcc <HAL_DMA_Start_IT+0x100>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
 8004dca:	e007      	b.n	8004ddc <HAL_DMA_Start_IT+0x110>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68b9      	ldr	r1, [r7, #8]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f001 fc24 	bl	8006630 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a34      	ldr	r2, [pc, #208]	; (8004ec0 <HAL_DMA_Start_IT+0x1f4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d04a      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a33      	ldr	r2, [pc, #204]	; (8004ec4 <HAL_DMA_Start_IT+0x1f8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d045      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a31      	ldr	r2, [pc, #196]	; (8004ec8 <HAL_DMA_Start_IT+0x1fc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d040      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a30      	ldr	r2, [pc, #192]	; (8004ecc <HAL_DMA_Start_IT+0x200>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d03b      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a2e      	ldr	r2, [pc, #184]	; (8004ed0 <HAL_DMA_Start_IT+0x204>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d036      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a2d      	ldr	r2, [pc, #180]	; (8004ed4 <HAL_DMA_Start_IT+0x208>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d031      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2b      	ldr	r2, [pc, #172]	; (8004ed8 <HAL_DMA_Start_IT+0x20c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02c      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <HAL_DMA_Start_IT+0x210>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d027      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a28      	ldr	r2, [pc, #160]	; (8004ee0 <HAL_DMA_Start_IT+0x214>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d022      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a27      	ldr	r2, [pc, #156]	; (8004ee4 <HAL_DMA_Start_IT+0x218>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d01d      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a25      	ldr	r2, [pc, #148]	; (8004ee8 <HAL_DMA_Start_IT+0x21c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d018      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a24      	ldr	r2, [pc, #144]	; (8004eec <HAL_DMA_Start_IT+0x220>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a22      	ldr	r2, [pc, #136]	; (8004ef0 <HAL_DMA_Start_IT+0x224>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <HAL_DMA_Start_IT+0x228>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1f      	ldr	r2, [pc, #124]	; (8004ef8 <HAL_DMA_Start_IT+0x22c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_DMA_Start_IT+0x1bc>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <HAL_DMA_Start_IT+0x230>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d101      	bne.n	8004e8c <HAL_DMA_Start_IT+0x1c0>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <HAL_DMA_Start_IT+0x1c2>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d036      	beq.n	8004f00 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f023 021e 	bic.w	r2, r3, #30
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f042 0216 	orr.w	r2, r2, #22
 8004ea4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d03e      	beq.n	8004f2c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0208 	orr.w	r2, r2, #8
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	e035      	b.n	8004f2c <HAL_DMA_Start_IT+0x260>
 8004ec0:	40020010 	.word	0x40020010
 8004ec4:	40020028 	.word	0x40020028
 8004ec8:	40020040 	.word	0x40020040
 8004ecc:	40020058 	.word	0x40020058
 8004ed0:	40020070 	.word	0x40020070
 8004ed4:	40020088 	.word	0x40020088
 8004ed8:	400200a0 	.word	0x400200a0
 8004edc:	400200b8 	.word	0x400200b8
 8004ee0:	40020410 	.word	0x40020410
 8004ee4:	40020428 	.word	0x40020428
 8004ee8:	40020440 	.word	0x40020440
 8004eec:	40020458 	.word	0x40020458
 8004ef0:	40020470 	.word	0x40020470
 8004ef4:	40020488 	.word	0x40020488
 8004ef8:	400204a0 	.word	0x400204a0
 8004efc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 020e 	bic.w	r2, r3, #14
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 020a 	orr.w	r2, r2, #10
 8004f12:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0204 	orr.w	r2, r2, #4
 8004f2a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a83      	ldr	r2, [pc, #524]	; (8005140 <HAL_DMA_Start_IT+0x474>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d072      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a82      	ldr	r2, [pc, #520]	; (8005144 <HAL_DMA_Start_IT+0x478>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d06d      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a80      	ldr	r2, [pc, #512]	; (8005148 <HAL_DMA_Start_IT+0x47c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d068      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a7f      	ldr	r2, [pc, #508]	; (800514c <HAL_DMA_Start_IT+0x480>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d063      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a7d      	ldr	r2, [pc, #500]	; (8005150 <HAL_DMA_Start_IT+0x484>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d05e      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a7c      	ldr	r2, [pc, #496]	; (8005154 <HAL_DMA_Start_IT+0x488>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d059      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a7a      	ldr	r2, [pc, #488]	; (8005158 <HAL_DMA_Start_IT+0x48c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d054      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a79      	ldr	r2, [pc, #484]	; (800515c <HAL_DMA_Start_IT+0x490>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d04f      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a77      	ldr	r2, [pc, #476]	; (8005160 <HAL_DMA_Start_IT+0x494>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d04a      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a76      	ldr	r2, [pc, #472]	; (8005164 <HAL_DMA_Start_IT+0x498>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d045      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a74      	ldr	r2, [pc, #464]	; (8005168 <HAL_DMA_Start_IT+0x49c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d040      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a73      	ldr	r2, [pc, #460]	; (800516c <HAL_DMA_Start_IT+0x4a0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d03b      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a71      	ldr	r2, [pc, #452]	; (8005170 <HAL_DMA_Start_IT+0x4a4>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d036      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a70      	ldr	r2, [pc, #448]	; (8005174 <HAL_DMA_Start_IT+0x4a8>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d031      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a6e      	ldr	r2, [pc, #440]	; (8005178 <HAL_DMA_Start_IT+0x4ac>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02c      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a6d      	ldr	r2, [pc, #436]	; (800517c <HAL_DMA_Start_IT+0x4b0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d027      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a6b      	ldr	r2, [pc, #428]	; (8005180 <HAL_DMA_Start_IT+0x4b4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a6a      	ldr	r2, [pc, #424]	; (8005184 <HAL_DMA_Start_IT+0x4b8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d01d      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a68      	ldr	r2, [pc, #416]	; (8005188 <HAL_DMA_Start_IT+0x4bc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a67      	ldr	r2, [pc, #412]	; (800518c <HAL_DMA_Start_IT+0x4c0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a65      	ldr	r2, [pc, #404]	; (8005190 <HAL_DMA_Start_IT+0x4c4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a64      	ldr	r2, [pc, #400]	; (8005194 <HAL_DMA_Start_IT+0x4c8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a62      	ldr	r2, [pc, #392]	; (8005198 <HAL_DMA_Start_IT+0x4cc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_DMA_Start_IT+0x350>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a61      	ldr	r2, [pc, #388]	; (800519c <HAL_DMA_Start_IT+0x4d0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d101      	bne.n	8005020 <HAL_DMA_Start_IT+0x354>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <HAL_DMA_Start_IT+0x356>
 8005020:	2300      	movs	r3, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01a      	beq.n	800505c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005042:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d007      	beq.n	800505c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800505a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a37      	ldr	r2, [pc, #220]	; (8005140 <HAL_DMA_Start_IT+0x474>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d04a      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a36      	ldr	r2, [pc, #216]	; (8005144 <HAL_DMA_Start_IT+0x478>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d045      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a34      	ldr	r2, [pc, #208]	; (8005148 <HAL_DMA_Start_IT+0x47c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d040      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a33      	ldr	r2, [pc, #204]	; (800514c <HAL_DMA_Start_IT+0x480>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d03b      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a31      	ldr	r2, [pc, #196]	; (8005150 <HAL_DMA_Start_IT+0x484>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d036      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a30      	ldr	r2, [pc, #192]	; (8005154 <HAL_DMA_Start_IT+0x488>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d031      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2e      	ldr	r2, [pc, #184]	; (8005158 <HAL_DMA_Start_IT+0x48c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d02c      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2d      	ldr	r2, [pc, #180]	; (800515c <HAL_DMA_Start_IT+0x490>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d027      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2b      	ldr	r2, [pc, #172]	; (8005160 <HAL_DMA_Start_IT+0x494>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d022      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2a      	ldr	r2, [pc, #168]	; (8005164 <HAL_DMA_Start_IT+0x498>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d01d      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a28      	ldr	r2, [pc, #160]	; (8005168 <HAL_DMA_Start_IT+0x49c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a27      	ldr	r2, [pc, #156]	; (800516c <HAL_DMA_Start_IT+0x4a0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a25      	ldr	r2, [pc, #148]	; (8005170 <HAL_DMA_Start_IT+0x4a4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a24      	ldr	r2, [pc, #144]	; (8005174 <HAL_DMA_Start_IT+0x4a8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a22      	ldr	r2, [pc, #136]	; (8005178 <HAL_DMA_Start_IT+0x4ac>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_DMA_Start_IT+0x430>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a21      	ldr	r2, [pc, #132]	; (800517c <HAL_DMA_Start_IT+0x4b0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <HAL_DMA_Start_IT+0x442>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e012      	b.n	8005134 <HAL_DMA_Start_IT+0x468>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e009      	b.n	8005134 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005134:	7dfb      	ldrb	r3, [r7, #23]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40020010 	.word	0x40020010
 8005144:	40020028 	.word	0x40020028
 8005148:	40020040 	.word	0x40020040
 800514c:	40020058 	.word	0x40020058
 8005150:	40020070 	.word	0x40020070
 8005154:	40020088 	.word	0x40020088
 8005158:	400200a0 	.word	0x400200a0
 800515c:	400200b8 	.word	0x400200b8
 8005160:	40020410 	.word	0x40020410
 8005164:	40020428 	.word	0x40020428
 8005168:	40020440 	.word	0x40020440
 800516c:	40020458 	.word	0x40020458
 8005170:	40020470 	.word	0x40020470
 8005174:	40020488 	.word	0x40020488
 8005178:	400204a0 	.word	0x400204a0
 800517c:	400204b8 	.word	0x400204b8
 8005180:	58025408 	.word	0x58025408
 8005184:	5802541c 	.word	0x5802541c
 8005188:	58025430 	.word	0x58025430
 800518c:	58025444 	.word	0x58025444
 8005190:	58025458 	.word	0x58025458
 8005194:	5802546c 	.word	0x5802546c
 8005198:	58025480 	.word	0x58025480
 800519c:	58025494 	.word	0x58025494

080051a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80051a8:	f7fd f94e 	bl	8002448 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e2dc      	b.n	8005772 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d008      	beq.n	80051d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e2cd      	b.n	8005772 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a76      	ldr	r2, [pc, #472]	; (80053b4 <HAL_DMA_Abort+0x214>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d04a      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a74      	ldr	r2, [pc, #464]	; (80053b8 <HAL_DMA_Abort+0x218>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d045      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a73      	ldr	r2, [pc, #460]	; (80053bc <HAL_DMA_Abort+0x21c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d040      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a71      	ldr	r2, [pc, #452]	; (80053c0 <HAL_DMA_Abort+0x220>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d03b      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a70      	ldr	r2, [pc, #448]	; (80053c4 <HAL_DMA_Abort+0x224>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d036      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a6e      	ldr	r2, [pc, #440]	; (80053c8 <HAL_DMA_Abort+0x228>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d031      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a6d      	ldr	r2, [pc, #436]	; (80053cc <HAL_DMA_Abort+0x22c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d02c      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a6b      	ldr	r2, [pc, #428]	; (80053d0 <HAL_DMA_Abort+0x230>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d027      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6a      	ldr	r2, [pc, #424]	; (80053d4 <HAL_DMA_Abort+0x234>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d022      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a68      	ldr	r2, [pc, #416]	; (80053d8 <HAL_DMA_Abort+0x238>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01d      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a67      	ldr	r2, [pc, #412]	; (80053dc <HAL_DMA_Abort+0x23c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d018      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a65      	ldr	r2, [pc, #404]	; (80053e0 <HAL_DMA_Abort+0x240>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a64      	ldr	r2, [pc, #400]	; (80053e4 <HAL_DMA_Abort+0x244>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a62      	ldr	r2, [pc, #392]	; (80053e8 <HAL_DMA_Abort+0x248>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a61      	ldr	r2, [pc, #388]	; (80053ec <HAL_DMA_Abort+0x24c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_DMA_Abort+0xd6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a5f      	ldr	r2, [pc, #380]	; (80053f0 <HAL_DMA_Abort+0x250>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d101      	bne.n	800527a <HAL_DMA_Abort+0xda>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_DMA_Abort+0xdc>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 021e 	bic.w	r2, r2, #30
 800528e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800529e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e00a      	b.n	80052be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 020e 	bic.w	r2, r2, #14
 80052b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a3c      	ldr	r2, [pc, #240]	; (80053b4 <HAL_DMA_Abort+0x214>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d072      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3a      	ldr	r2, [pc, #232]	; (80053b8 <HAL_DMA_Abort+0x218>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d06d      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a39      	ldr	r2, [pc, #228]	; (80053bc <HAL_DMA_Abort+0x21c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d068      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a37      	ldr	r2, [pc, #220]	; (80053c0 <HAL_DMA_Abort+0x220>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d063      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a36      	ldr	r2, [pc, #216]	; (80053c4 <HAL_DMA_Abort+0x224>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d05e      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a34      	ldr	r2, [pc, #208]	; (80053c8 <HAL_DMA_Abort+0x228>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d059      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a33      	ldr	r2, [pc, #204]	; (80053cc <HAL_DMA_Abort+0x22c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d054      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a31      	ldr	r2, [pc, #196]	; (80053d0 <HAL_DMA_Abort+0x230>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d04f      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a30      	ldr	r2, [pc, #192]	; (80053d4 <HAL_DMA_Abort+0x234>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d04a      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a2e      	ldr	r2, [pc, #184]	; (80053d8 <HAL_DMA_Abort+0x238>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d045      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2d      	ldr	r2, [pc, #180]	; (80053dc <HAL_DMA_Abort+0x23c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d040      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2b      	ldr	r2, [pc, #172]	; (80053e0 <HAL_DMA_Abort+0x240>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d03b      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <HAL_DMA_Abort+0x244>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d036      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a28      	ldr	r2, [pc, #160]	; (80053e8 <HAL_DMA_Abort+0x248>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d031      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a27      	ldr	r2, [pc, #156]	; (80053ec <HAL_DMA_Abort+0x24c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d02c      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <HAL_DMA_Abort+0x250>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d027      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a24      	ldr	r2, [pc, #144]	; (80053f4 <HAL_DMA_Abort+0x254>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d022      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <HAL_DMA_Abort+0x258>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01d      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a21      	ldr	r2, [pc, #132]	; (80053fc <HAL_DMA_Abort+0x25c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d018      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <HAL_DMA_Abort+0x260>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d013      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1e      	ldr	r2, [pc, #120]	; (8005404 <HAL_DMA_Abort+0x264>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00e      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1c      	ldr	r2, [pc, #112]	; (8005408 <HAL_DMA_Abort+0x268>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d009      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_DMA_Abort+0x26c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d004      	beq.n	80053ae <HAL_DMA_Abort+0x20e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a19      	ldr	r2, [pc, #100]	; (8005410 <HAL_DMA_Abort+0x270>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d132      	bne.n	8005414 <HAL_DMA_Abort+0x274>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e031      	b.n	8005416 <HAL_DMA_Abort+0x276>
 80053b2:	bf00      	nop
 80053b4:	40020010 	.word	0x40020010
 80053b8:	40020028 	.word	0x40020028
 80053bc:	40020040 	.word	0x40020040
 80053c0:	40020058 	.word	0x40020058
 80053c4:	40020070 	.word	0x40020070
 80053c8:	40020088 	.word	0x40020088
 80053cc:	400200a0 	.word	0x400200a0
 80053d0:	400200b8 	.word	0x400200b8
 80053d4:	40020410 	.word	0x40020410
 80053d8:	40020428 	.word	0x40020428
 80053dc:	40020440 	.word	0x40020440
 80053e0:	40020458 	.word	0x40020458
 80053e4:	40020470 	.word	0x40020470
 80053e8:	40020488 	.word	0x40020488
 80053ec:	400204a0 	.word	0x400204a0
 80053f0:	400204b8 	.word	0x400204b8
 80053f4:	58025408 	.word	0x58025408
 80053f8:	5802541c 	.word	0x5802541c
 80053fc:	58025430 	.word	0x58025430
 8005400:	58025444 	.word	0x58025444
 8005404:	58025458 	.word	0x58025458
 8005408:	5802546c 	.word	0x5802546c
 800540c:	58025480 	.word	0x58025480
 8005410:	58025494 	.word	0x58025494
 8005414:	2300      	movs	r3, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005428:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a6d      	ldr	r2, [pc, #436]	; (80055e4 <HAL_DMA_Abort+0x444>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d04a      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a6b      	ldr	r2, [pc, #428]	; (80055e8 <HAL_DMA_Abort+0x448>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d045      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a6a      	ldr	r2, [pc, #424]	; (80055ec <HAL_DMA_Abort+0x44c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d040      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a68      	ldr	r2, [pc, #416]	; (80055f0 <HAL_DMA_Abort+0x450>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d03b      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a67      	ldr	r2, [pc, #412]	; (80055f4 <HAL_DMA_Abort+0x454>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d036      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a65      	ldr	r2, [pc, #404]	; (80055f8 <HAL_DMA_Abort+0x458>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d031      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a64      	ldr	r2, [pc, #400]	; (80055fc <HAL_DMA_Abort+0x45c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d02c      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a62      	ldr	r2, [pc, #392]	; (8005600 <HAL_DMA_Abort+0x460>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d027      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a61      	ldr	r2, [pc, #388]	; (8005604 <HAL_DMA_Abort+0x464>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d022      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a5f      	ldr	r2, [pc, #380]	; (8005608 <HAL_DMA_Abort+0x468>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01d      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a5e      	ldr	r2, [pc, #376]	; (800560c <HAL_DMA_Abort+0x46c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d018      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a5c      	ldr	r2, [pc, #368]	; (8005610 <HAL_DMA_Abort+0x470>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a5b      	ldr	r2, [pc, #364]	; (8005614 <HAL_DMA_Abort+0x474>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00e      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a59      	ldr	r2, [pc, #356]	; (8005618 <HAL_DMA_Abort+0x478>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d009      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a58      	ldr	r2, [pc, #352]	; (800561c <HAL_DMA_Abort+0x47c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d004      	beq.n	80054ca <HAL_DMA_Abort+0x32a>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a56      	ldr	r2, [pc, #344]	; (8005620 <HAL_DMA_Abort+0x480>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d108      	bne.n	80054dc <HAL_DMA_Abort+0x33c>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e007      	b.n	80054ec <HAL_DMA_Abort+0x34c>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80054ec:	e013      	b.n	8005516 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054ee:	f7fc ffab 	bl	8002448 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b05      	cmp	r3, #5
 80054fa:	d90c      	bls.n	8005516 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2203      	movs	r2, #3
 800550e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e12d      	b.n	8005772 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e5      	bne.n	80054ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a2f      	ldr	r2, [pc, #188]	; (80055e4 <HAL_DMA_Abort+0x444>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d04a      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a2d      	ldr	r2, [pc, #180]	; (80055e8 <HAL_DMA_Abort+0x448>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d045      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <HAL_DMA_Abort+0x44c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d040      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2a      	ldr	r2, [pc, #168]	; (80055f0 <HAL_DMA_Abort+0x450>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d03b      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a29      	ldr	r2, [pc, #164]	; (80055f4 <HAL_DMA_Abort+0x454>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d036      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a27      	ldr	r2, [pc, #156]	; (80055f8 <HAL_DMA_Abort+0x458>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d031      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a26      	ldr	r2, [pc, #152]	; (80055fc <HAL_DMA_Abort+0x45c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d02c      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a24      	ldr	r2, [pc, #144]	; (8005600 <HAL_DMA_Abort+0x460>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d027      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a23      	ldr	r2, [pc, #140]	; (8005604 <HAL_DMA_Abort+0x464>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d022      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a21      	ldr	r2, [pc, #132]	; (8005608 <HAL_DMA_Abort+0x468>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01d      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a20      	ldr	r2, [pc, #128]	; (800560c <HAL_DMA_Abort+0x46c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d018      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <HAL_DMA_Abort+0x470>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d013      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <HAL_DMA_Abort+0x474>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00e      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1b      	ldr	r2, [pc, #108]	; (8005618 <HAL_DMA_Abort+0x478>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d009      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1a      	ldr	r2, [pc, #104]	; (800561c <HAL_DMA_Abort+0x47c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d004      	beq.n	80055c2 <HAL_DMA_Abort+0x422>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a18      	ldr	r2, [pc, #96]	; (8005620 <HAL_DMA_Abort+0x480>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d101      	bne.n	80055c6 <HAL_DMA_Abort+0x426>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <HAL_DMA_Abort+0x428>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d02b      	beq.n	8005624 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	223f      	movs	r2, #63	; 0x3f
 80055dc:	409a      	lsls	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	609a      	str	r2, [r3, #8]
 80055e2:	e02a      	b.n	800563a <HAL_DMA_Abort+0x49a>
 80055e4:	40020010 	.word	0x40020010
 80055e8:	40020028 	.word	0x40020028
 80055ec:	40020040 	.word	0x40020040
 80055f0:	40020058 	.word	0x40020058
 80055f4:	40020070 	.word	0x40020070
 80055f8:	40020088 	.word	0x40020088
 80055fc:	400200a0 	.word	0x400200a0
 8005600:	400200b8 	.word	0x400200b8
 8005604:	40020410 	.word	0x40020410
 8005608:	40020428 	.word	0x40020428
 800560c:	40020440 	.word	0x40020440
 8005610:	40020458 	.word	0x40020458
 8005614:	40020470 	.word	0x40020470
 8005618:	40020488 	.word	0x40020488
 800561c:	400204a0 	.word	0x400204a0
 8005620:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2201      	movs	r2, #1
 8005634:	409a      	lsls	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a4f      	ldr	r2, [pc, #316]	; (800577c <HAL_DMA_Abort+0x5dc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d072      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a4d      	ldr	r2, [pc, #308]	; (8005780 <HAL_DMA_Abort+0x5e0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d06d      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a4c      	ldr	r2, [pc, #304]	; (8005784 <HAL_DMA_Abort+0x5e4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d068      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a4a      	ldr	r2, [pc, #296]	; (8005788 <HAL_DMA_Abort+0x5e8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d063      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a49      	ldr	r2, [pc, #292]	; (800578c <HAL_DMA_Abort+0x5ec>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d05e      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a47      	ldr	r2, [pc, #284]	; (8005790 <HAL_DMA_Abort+0x5f0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d059      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a46      	ldr	r2, [pc, #280]	; (8005794 <HAL_DMA_Abort+0x5f4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d054      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a44      	ldr	r2, [pc, #272]	; (8005798 <HAL_DMA_Abort+0x5f8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d04f      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a43      	ldr	r2, [pc, #268]	; (800579c <HAL_DMA_Abort+0x5fc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d04a      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a41      	ldr	r2, [pc, #260]	; (80057a0 <HAL_DMA_Abort+0x600>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d045      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a40      	ldr	r2, [pc, #256]	; (80057a4 <HAL_DMA_Abort+0x604>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d040      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a3e      	ldr	r2, [pc, #248]	; (80057a8 <HAL_DMA_Abort+0x608>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d03b      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a3d      	ldr	r2, [pc, #244]	; (80057ac <HAL_DMA_Abort+0x60c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d036      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a3b      	ldr	r2, [pc, #236]	; (80057b0 <HAL_DMA_Abort+0x610>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d031      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a3a      	ldr	r2, [pc, #232]	; (80057b4 <HAL_DMA_Abort+0x614>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d02c      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a38      	ldr	r2, [pc, #224]	; (80057b8 <HAL_DMA_Abort+0x618>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d027      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a37      	ldr	r2, [pc, #220]	; (80057bc <HAL_DMA_Abort+0x61c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a35      	ldr	r2, [pc, #212]	; (80057c0 <HAL_DMA_Abort+0x620>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01d      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a34      	ldr	r2, [pc, #208]	; (80057c4 <HAL_DMA_Abort+0x624>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a32      	ldr	r2, [pc, #200]	; (80057c8 <HAL_DMA_Abort+0x628>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a31      	ldr	r2, [pc, #196]	; (80057cc <HAL_DMA_Abort+0x62c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a2f      	ldr	r2, [pc, #188]	; (80057d0 <HAL_DMA_Abort+0x630>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2e      	ldr	r2, [pc, #184]	; (80057d4 <HAL_DMA_Abort+0x634>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_DMA_Abort+0x58a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a2c      	ldr	r2, [pc, #176]	; (80057d8 <HAL_DMA_Abort+0x638>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d101      	bne.n	800572e <HAL_DMA_Abort+0x58e>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <HAL_DMA_Abort+0x590>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d015      	beq.n	8005760 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800573c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00c      	beq.n	8005760 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005754:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800575e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40020010 	.word	0x40020010
 8005780:	40020028 	.word	0x40020028
 8005784:	40020040 	.word	0x40020040
 8005788:	40020058 	.word	0x40020058
 800578c:	40020070 	.word	0x40020070
 8005790:	40020088 	.word	0x40020088
 8005794:	400200a0 	.word	0x400200a0
 8005798:	400200b8 	.word	0x400200b8
 800579c:	40020410 	.word	0x40020410
 80057a0:	40020428 	.word	0x40020428
 80057a4:	40020440 	.word	0x40020440
 80057a8:	40020458 	.word	0x40020458
 80057ac:	40020470 	.word	0x40020470
 80057b0:	40020488 	.word	0x40020488
 80057b4:	400204a0 	.word	0x400204a0
 80057b8:	400204b8 	.word	0x400204b8
 80057bc:	58025408 	.word	0x58025408
 80057c0:	5802541c 	.word	0x5802541c
 80057c4:	58025430 	.word	0x58025430
 80057c8:	58025444 	.word	0x58025444
 80057cc:	58025458 	.word	0x58025458
 80057d0:	5802546c 	.word	0x5802546c
 80057d4:	58025480 	.word	0x58025480
 80057d8:	58025494 	.word	0x58025494

080057dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057e8:	4b67      	ldr	r3, [pc, #412]	; (8005988 <HAL_DMA_IRQHandler+0x1ac>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a67      	ldr	r2, [pc, #412]	; (800598c <HAL_DMA_IRQHandler+0x1b0>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0a9b      	lsrs	r3, r3, #10
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005800:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a5f      	ldr	r2, [pc, #380]	; (8005990 <HAL_DMA_IRQHandler+0x1b4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d04a      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a5d      	ldr	r2, [pc, #372]	; (8005994 <HAL_DMA_IRQHandler+0x1b8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d045      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a5c      	ldr	r2, [pc, #368]	; (8005998 <HAL_DMA_IRQHandler+0x1bc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d040      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a5a      	ldr	r2, [pc, #360]	; (800599c <HAL_DMA_IRQHandler+0x1c0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d03b      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a59      	ldr	r2, [pc, #356]	; (80059a0 <HAL_DMA_IRQHandler+0x1c4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d036      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a57      	ldr	r2, [pc, #348]	; (80059a4 <HAL_DMA_IRQHandler+0x1c8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d031      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a56      	ldr	r2, [pc, #344]	; (80059a8 <HAL_DMA_IRQHandler+0x1cc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d02c      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a54      	ldr	r2, [pc, #336]	; (80059ac <HAL_DMA_IRQHandler+0x1d0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d027      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a53      	ldr	r2, [pc, #332]	; (80059b0 <HAL_DMA_IRQHandler+0x1d4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d022      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a51      	ldr	r2, [pc, #324]	; (80059b4 <HAL_DMA_IRQHandler+0x1d8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01d      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a50      	ldr	r2, [pc, #320]	; (80059b8 <HAL_DMA_IRQHandler+0x1dc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d018      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a4e      	ldr	r2, [pc, #312]	; (80059bc <HAL_DMA_IRQHandler+0x1e0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a4d      	ldr	r2, [pc, #308]	; (80059c0 <HAL_DMA_IRQHandler+0x1e4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00e      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a4b      	ldr	r2, [pc, #300]	; (80059c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a4a      	ldr	r2, [pc, #296]	; (80059c8 <HAL_DMA_IRQHandler+0x1ec>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_DMA_IRQHandler+0xd2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a48      	ldr	r2, [pc, #288]	; (80059cc <HAL_DMA_IRQHandler+0x1f0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d101      	bne.n	80058b2 <HAL_DMA_IRQHandler+0xd6>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <HAL_DMA_IRQHandler+0xd8>
 80058b2:	2300      	movs	r3, #0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 842b 	beq.w	8006110 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	2208      	movs	r2, #8
 80058c4:	409a      	lsls	r2, r3
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80a2 	beq.w	8005a14 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a2e      	ldr	r2, [pc, #184]	; (8005990 <HAL_DMA_IRQHandler+0x1b4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d04a      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a2d      	ldr	r2, [pc, #180]	; (8005994 <HAL_DMA_IRQHandler+0x1b8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d045      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a2b      	ldr	r2, [pc, #172]	; (8005998 <HAL_DMA_IRQHandler+0x1bc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d040      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a2a      	ldr	r2, [pc, #168]	; (800599c <HAL_DMA_IRQHandler+0x1c0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d03b      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a28      	ldr	r2, [pc, #160]	; (80059a0 <HAL_DMA_IRQHandler+0x1c4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d036      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a27      	ldr	r2, [pc, #156]	; (80059a4 <HAL_DMA_IRQHandler+0x1c8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d031      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a25      	ldr	r2, [pc, #148]	; (80059a8 <HAL_DMA_IRQHandler+0x1cc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d02c      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a24      	ldr	r2, [pc, #144]	; (80059ac <HAL_DMA_IRQHandler+0x1d0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d027      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a22      	ldr	r2, [pc, #136]	; (80059b0 <HAL_DMA_IRQHandler+0x1d4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d022      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <HAL_DMA_IRQHandler+0x1d8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01d      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <HAL_DMA_IRQHandler+0x1dc>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <HAL_DMA_IRQHandler+0x1e0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <HAL_DMA_IRQHandler+0x1e4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <HAL_DMA_IRQHandler+0x1ec>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_DMA_IRQHandler+0x194>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_DMA_IRQHandler+0x1f0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d12f      	bne.n	80059d0 <HAL_DMA_IRQHandler+0x1f4>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b00      	cmp	r3, #0
 800597c:	bf14      	ite	ne
 800597e:	2301      	movne	r3, #1
 8005980:	2300      	moveq	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	e02e      	b.n	80059e4 <HAL_DMA_IRQHandler+0x208>
 8005986:	bf00      	nop
 8005988:	24000004 	.word	0x24000004
 800598c:	1b4e81b5 	.word	0x1b4e81b5
 8005990:	40020010 	.word	0x40020010
 8005994:	40020028 	.word	0x40020028
 8005998:	40020040 	.word	0x40020040
 800599c:	40020058 	.word	0x40020058
 80059a0:	40020070 	.word	0x40020070
 80059a4:	40020088 	.word	0x40020088
 80059a8:	400200a0 	.word	0x400200a0
 80059ac:	400200b8 	.word	0x400200b8
 80059b0:	40020410 	.word	0x40020410
 80059b4:	40020428 	.word	0x40020428
 80059b8:	40020440 	.word	0x40020440
 80059bc:	40020458 	.word	0x40020458
 80059c0:	40020470 	.word	0x40020470
 80059c4:	40020488 	.word	0x40020488
 80059c8:	400204a0 	.word	0x400204a0
 80059cc:	400204b8 	.word	0x400204b8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bf14      	ite	ne
 80059de:	2301      	movne	r3, #1
 80059e0:	2300      	moveq	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0204 	bic.w	r2, r2, #4
 80059f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	2208      	movs	r2, #8
 8005a02:	409a      	lsls	r2, r3
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0c:	f043 0201 	orr.w	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d06e      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a69      	ldr	r2, [pc, #420]	; (8005bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d04a      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a67      	ldr	r2, [pc, #412]	; (8005bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d045      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a66      	ldr	r2, [pc, #408]	; (8005bdc <HAL_DMA_IRQHandler+0x400>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d040      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a64      	ldr	r2, [pc, #400]	; (8005be0 <HAL_DMA_IRQHandler+0x404>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d03b      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a63      	ldr	r2, [pc, #396]	; (8005be4 <HAL_DMA_IRQHandler+0x408>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d036      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a61      	ldr	r2, [pc, #388]	; (8005be8 <HAL_DMA_IRQHandler+0x40c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d031      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a60      	ldr	r2, [pc, #384]	; (8005bec <HAL_DMA_IRQHandler+0x410>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d02c      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a5e      	ldr	r2, [pc, #376]	; (8005bf0 <HAL_DMA_IRQHandler+0x414>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d027      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a5d      	ldr	r2, [pc, #372]	; (8005bf4 <HAL_DMA_IRQHandler+0x418>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d022      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a5b      	ldr	r2, [pc, #364]	; (8005bf8 <HAL_DMA_IRQHandler+0x41c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01d      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a5a      	ldr	r2, [pc, #360]	; (8005bfc <HAL_DMA_IRQHandler+0x420>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d018      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a58      	ldr	r2, [pc, #352]	; (8005c00 <HAL_DMA_IRQHandler+0x424>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a57      	ldr	r2, [pc, #348]	; (8005c04 <HAL_DMA_IRQHandler+0x428>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00e      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a55      	ldr	r2, [pc, #340]	; (8005c08 <HAL_DMA_IRQHandler+0x42c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d009      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a54      	ldr	r2, [pc, #336]	; (8005c0c <HAL_DMA_IRQHandler+0x430>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d004      	beq.n	8005aca <HAL_DMA_IRQHandler+0x2ee>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a52      	ldr	r2, [pc, #328]	; (8005c10 <HAL_DMA_IRQHandler+0x434>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d10a      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x304>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bf14      	ite	ne
 8005ad8:	2301      	movne	r3, #1
 8005ada:	2300      	moveq	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e003      	b.n	8005ae8 <HAL_DMA_IRQHandler+0x30c>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00d      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af0:	f003 031f 	and.w	r3, r3, #31
 8005af4:	2201      	movs	r2, #1
 8005af6:	409a      	lsls	r2, r3
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b00:	f043 0202 	orr.w	r2, r3, #2
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	2204      	movs	r2, #4
 8005b12:	409a      	lsls	r2, r3
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 808f 	beq.w	8005c3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a2c      	ldr	r2, [pc, #176]	; (8005bd4 <HAL_DMA_IRQHandler+0x3f8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d04a      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <HAL_DMA_IRQHandler+0x3fc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d045      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <HAL_DMA_IRQHandler+0x400>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d040      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a27      	ldr	r2, [pc, #156]	; (8005be0 <HAL_DMA_IRQHandler+0x404>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d03b      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a26      	ldr	r2, [pc, #152]	; (8005be4 <HAL_DMA_IRQHandler+0x408>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d036      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a24      	ldr	r2, [pc, #144]	; (8005be8 <HAL_DMA_IRQHandler+0x40c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d031      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a23      	ldr	r2, [pc, #140]	; (8005bec <HAL_DMA_IRQHandler+0x410>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d02c      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a21      	ldr	r2, [pc, #132]	; (8005bf0 <HAL_DMA_IRQHandler+0x414>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d027      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <HAL_DMA_IRQHandler+0x418>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d022      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <HAL_DMA_IRQHandler+0x41c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d01d      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1d      	ldr	r2, [pc, #116]	; (8005bfc <HAL_DMA_IRQHandler+0x420>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d018      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1b      	ldr	r2, [pc, #108]	; (8005c00 <HAL_DMA_IRQHandler+0x424>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d013      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1a      	ldr	r2, [pc, #104]	; (8005c04 <HAL_DMA_IRQHandler+0x428>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00e      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <HAL_DMA_IRQHandler+0x42c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a17      	ldr	r2, [pc, #92]	; (8005c0c <HAL_DMA_IRQHandler+0x430>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d004      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x3e2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <HAL_DMA_IRQHandler+0x434>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d12a      	bne.n	8005c14 <HAL_DMA_IRQHandler+0x438>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e023      	b.n	8005c1c <HAL_DMA_IRQHandler+0x440>
 8005bd4:	40020010 	.word	0x40020010
 8005bd8:	40020028 	.word	0x40020028
 8005bdc:	40020040 	.word	0x40020040
 8005be0:	40020058 	.word	0x40020058
 8005be4:	40020070 	.word	0x40020070
 8005be8:	40020088 	.word	0x40020088
 8005bec:	400200a0 	.word	0x400200a0
 8005bf0:	400200b8 	.word	0x400200b8
 8005bf4:	40020410 	.word	0x40020410
 8005bf8:	40020428 	.word	0x40020428
 8005bfc:	40020440 	.word	0x40020440
 8005c00:	40020458 	.word	0x40020458
 8005c04:	40020470 	.word	0x40020470
 8005c08:	40020488 	.word	0x40020488
 8005c0c:	400204a0 	.word	0x400204a0
 8005c10:	400204b8 	.word	0x400204b8
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00d      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c24:	f003 031f 	and.w	r3, r3, #31
 8005c28:	2204      	movs	r2, #4
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c34:	f043 0204 	orr.w	r2, r3, #4
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	2210      	movs	r2, #16
 8005c46:	409a      	lsls	r2, r3
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80a6 	beq.w	8005d9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a85      	ldr	r2, [pc, #532]	; (8005e6c <HAL_DMA_IRQHandler+0x690>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d04a      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a83      	ldr	r2, [pc, #524]	; (8005e70 <HAL_DMA_IRQHandler+0x694>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d045      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a82      	ldr	r2, [pc, #520]	; (8005e74 <HAL_DMA_IRQHandler+0x698>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d040      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a80      	ldr	r2, [pc, #512]	; (8005e78 <HAL_DMA_IRQHandler+0x69c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d03b      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a7f      	ldr	r2, [pc, #508]	; (8005e7c <HAL_DMA_IRQHandler+0x6a0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d036      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a7d      	ldr	r2, [pc, #500]	; (8005e80 <HAL_DMA_IRQHandler+0x6a4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d031      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a7c      	ldr	r2, [pc, #496]	; (8005e84 <HAL_DMA_IRQHandler+0x6a8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d02c      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a7a      	ldr	r2, [pc, #488]	; (8005e88 <HAL_DMA_IRQHandler+0x6ac>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d027      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a79      	ldr	r2, [pc, #484]	; (8005e8c <HAL_DMA_IRQHandler+0x6b0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d022      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a77      	ldr	r2, [pc, #476]	; (8005e90 <HAL_DMA_IRQHandler+0x6b4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a76      	ldr	r2, [pc, #472]	; (8005e94 <HAL_DMA_IRQHandler+0x6b8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a74      	ldr	r2, [pc, #464]	; (8005e98 <HAL_DMA_IRQHandler+0x6bc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a73      	ldr	r2, [pc, #460]	; (8005e9c <HAL_DMA_IRQHandler+0x6c0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a71      	ldr	r2, [pc, #452]	; (8005ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a70      	ldr	r2, [pc, #448]	; (8005ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_DMA_IRQHandler+0x516>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a6e      	ldr	r2, [pc, #440]	; (8005ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d10a      	bne.n	8005d08 <HAL_DMA_IRQHandler+0x52c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf14      	ite	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	2300      	moveq	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	e009      	b.n	8005d1c <HAL_DMA_IRQHandler+0x540>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	bf14      	ite	ne
 8005d16:	2301      	movne	r3, #1
 8005d18:	2300      	moveq	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d03e      	beq.n	8005d9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	2210      	movs	r2, #16
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d018      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d108      	bne.n	8005d5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d024      	beq.n	8005d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	4798      	blx	r3
 8005d5c:	e01f      	b.n	8005d9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01b      	beq.n	8005d9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
 8005d6e:	e016      	b.n	8005d9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d107      	bne.n	8005d8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0208 	bic.w	r2, r2, #8
 8005d8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2220      	movs	r2, #32
 8005da8:	409a      	lsls	r2, r3
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 8110 	beq.w	8005fd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a2c      	ldr	r2, [pc, #176]	; (8005e6c <HAL_DMA_IRQHandler+0x690>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d04a      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <HAL_DMA_IRQHandler+0x694>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d045      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a29      	ldr	r2, [pc, #164]	; (8005e74 <HAL_DMA_IRQHandler+0x698>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d040      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a28      	ldr	r2, [pc, #160]	; (8005e78 <HAL_DMA_IRQHandler+0x69c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d03b      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <HAL_DMA_IRQHandler+0x6a0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d036      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <HAL_DMA_IRQHandler+0x6a4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d031      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a23      	ldr	r2, [pc, #140]	; (8005e84 <HAL_DMA_IRQHandler+0x6a8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d02c      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <HAL_DMA_IRQHandler+0x6ac>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d027      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <HAL_DMA_IRQHandler+0x6b0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d022      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <HAL_DMA_IRQHandler+0x6b4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d01d      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_DMA_IRQHandler+0x6b8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d018      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1c      	ldr	r2, [pc, #112]	; (8005e98 <HAL_DMA_IRQHandler+0x6bc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <HAL_DMA_IRQHandler+0x6c0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a19      	ldr	r2, [pc, #100]	; (8005ea0 <HAL_DMA_IRQHandler+0x6c4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <HAL_DMA_IRQHandler+0x6c8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_DMA_IRQHandler+0x678>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <HAL_DMA_IRQHandler+0x6cc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d12b      	bne.n	8005eac <HAL_DMA_IRQHandler+0x6d0>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0310 	and.w	r3, r3, #16
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	bf14      	ite	ne
 8005e62:	2301      	movne	r3, #1
 8005e64:	2300      	moveq	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	e02a      	b.n	8005ec0 <HAL_DMA_IRQHandler+0x6e4>
 8005e6a:	bf00      	nop
 8005e6c:	40020010 	.word	0x40020010
 8005e70:	40020028 	.word	0x40020028
 8005e74:	40020040 	.word	0x40020040
 8005e78:	40020058 	.word	0x40020058
 8005e7c:	40020070 	.word	0x40020070
 8005e80:	40020088 	.word	0x40020088
 8005e84:	400200a0 	.word	0x400200a0
 8005e88:	400200b8 	.word	0x400200b8
 8005e8c:	40020410 	.word	0x40020410
 8005e90:	40020428 	.word	0x40020428
 8005e94:	40020440 	.word	0x40020440
 8005e98:	40020458 	.word	0x40020458
 8005e9c:	40020470 	.word	0x40020470
 8005ea0:	40020488 	.word	0x40020488
 8005ea4:	400204a0 	.word	0x400204a0
 8005ea8:	400204b8 	.word	0x400204b8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	bf14      	ite	ne
 8005eba:	2301      	movne	r3, #1
 8005ebc:	2300      	moveq	r3, #0
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8087 	beq.w	8005fd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	2220      	movs	r2, #32
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d139      	bne.n	8005f56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0216 	bic.w	r2, r2, #22
 8005ef0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d103      	bne.n	8005f12 <HAL_DMA_IRQHandler+0x736>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d007      	beq.n	8005f22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0208 	bic.w	r2, r2, #8
 8005f20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	223f      	movs	r2, #63	; 0x3f
 8005f2c:	409a      	lsls	r2, r3
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 834a 	beq.w	80065e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
          }
          return;
 8005f54:	e344      	b.n	80065e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d018      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d108      	bne.n	8005f84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d02c      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	4798      	blx	r3
 8005f82:	e027      	b.n	8005fd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d023      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
 8005f94:	e01e      	b.n	8005fd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10f      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0210 	bic.w	r2, r2, #16
 8005fb2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8306 	beq.w	80065ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f000 8088 	beq.w	80060fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a7a      	ldr	r2, [pc, #488]	; (80061e4 <HAL_DMA_IRQHandler+0xa08>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d04a      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a79      	ldr	r2, [pc, #484]	; (80061e8 <HAL_DMA_IRQHandler+0xa0c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d045      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a77      	ldr	r2, [pc, #476]	; (80061ec <HAL_DMA_IRQHandler+0xa10>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d040      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a76      	ldr	r2, [pc, #472]	; (80061f0 <HAL_DMA_IRQHandler+0xa14>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d03b      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a74      	ldr	r2, [pc, #464]	; (80061f4 <HAL_DMA_IRQHandler+0xa18>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d036      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a73      	ldr	r2, [pc, #460]	; (80061f8 <HAL_DMA_IRQHandler+0xa1c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d031      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a71      	ldr	r2, [pc, #452]	; (80061fc <HAL_DMA_IRQHandler+0xa20>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02c      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a70      	ldr	r2, [pc, #448]	; (8006200 <HAL_DMA_IRQHandler+0xa24>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d027      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a6e      	ldr	r2, [pc, #440]	; (8006204 <HAL_DMA_IRQHandler+0xa28>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d022      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a6d      	ldr	r2, [pc, #436]	; (8006208 <HAL_DMA_IRQHandler+0xa2c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d01d      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a6b      	ldr	r2, [pc, #428]	; (800620c <HAL_DMA_IRQHandler+0xa30>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d018      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a6a      	ldr	r2, [pc, #424]	; (8006210 <HAL_DMA_IRQHandler+0xa34>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d013      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a68      	ldr	r2, [pc, #416]	; (8006214 <HAL_DMA_IRQHandler+0xa38>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00e      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a67      	ldr	r2, [pc, #412]	; (8006218 <HAL_DMA_IRQHandler+0xa3c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d009      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a65      	ldr	r2, [pc, #404]	; (800621c <HAL_DMA_IRQHandler+0xa40>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d004      	beq.n	8006094 <HAL_DMA_IRQHandler+0x8b8>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a64      	ldr	r2, [pc, #400]	; (8006220 <HAL_DMA_IRQHandler+0xa44>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d108      	bne.n	80060a6 <HAL_DMA_IRQHandler+0x8ca>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	e007      	b.n	80060b6 <HAL_DMA_IRQHandler+0x8da>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060be:	429a      	cmp	r2, r3
 80060c0:	d307      	bcc.n	80060d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1f2      	bne.n	80060b6 <HAL_DMA_IRQHandler+0x8da>
 80060d0:	e000      	b.n	80060d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80060d2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d004      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2203      	movs	r2, #3
 80060ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80060f2:	e003      	b.n	80060fc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8272 	beq.w	80065ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
 800610e:	e26c      	b.n	80065ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a43      	ldr	r2, [pc, #268]	; (8006224 <HAL_DMA_IRQHandler+0xa48>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d022      	beq.n	8006160 <HAL_DMA_IRQHandler+0x984>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a42      	ldr	r2, [pc, #264]	; (8006228 <HAL_DMA_IRQHandler+0xa4c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d01d      	beq.n	8006160 <HAL_DMA_IRQHandler+0x984>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a40      	ldr	r2, [pc, #256]	; (800622c <HAL_DMA_IRQHandler+0xa50>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d018      	beq.n	8006160 <HAL_DMA_IRQHandler+0x984>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a3f      	ldr	r2, [pc, #252]	; (8006230 <HAL_DMA_IRQHandler+0xa54>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d013      	beq.n	8006160 <HAL_DMA_IRQHandler+0x984>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a3d      	ldr	r2, [pc, #244]	; (8006234 <HAL_DMA_IRQHandler+0xa58>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00e      	beq.n	8006160 <HAL_DMA_IRQHandler+0x984>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <HAL_DMA_IRQHandler+0xa5c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d009      	beq.n	8006160 <HAL_DMA_IRQHandler+0x984>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3a      	ldr	r2, [pc, #232]	; (800623c <HAL_DMA_IRQHandler+0xa60>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d004      	beq.n	8006160 <HAL_DMA_IRQHandler+0x984>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a39      	ldr	r2, [pc, #228]	; (8006240 <HAL_DMA_IRQHandler+0xa64>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d101      	bne.n	8006164 <HAL_DMA_IRQHandler+0x988>
 8006160:	2301      	movs	r3, #1
 8006162:	e000      	b.n	8006166 <HAL_DMA_IRQHandler+0x98a>
 8006164:	2300      	movs	r3, #0
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 823f 	beq.w	80065ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2204      	movs	r2, #4
 800617e:	409a      	lsls	r2, r3
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80cd 	beq.w	8006324 <HAL_DMA_IRQHandler+0xb48>
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 80c7 	beq.w	8006324 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2204      	movs	r2, #4
 80061a0:	409a      	lsls	r2, r3
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d049      	beq.n	8006244 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 8210 	beq.w	80065e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061cc:	e20a      	b.n	80065e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 8206 	beq.w	80065e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e0:	e200      	b.n	80065e4 <HAL_DMA_IRQHandler+0xe08>
 80061e2:	bf00      	nop
 80061e4:	40020010 	.word	0x40020010
 80061e8:	40020028 	.word	0x40020028
 80061ec:	40020040 	.word	0x40020040
 80061f0:	40020058 	.word	0x40020058
 80061f4:	40020070 	.word	0x40020070
 80061f8:	40020088 	.word	0x40020088
 80061fc:	400200a0 	.word	0x400200a0
 8006200:	400200b8 	.word	0x400200b8
 8006204:	40020410 	.word	0x40020410
 8006208:	40020428 	.word	0x40020428
 800620c:	40020440 	.word	0x40020440
 8006210:	40020458 	.word	0x40020458
 8006214:	40020470 	.word	0x40020470
 8006218:	40020488 	.word	0x40020488
 800621c:	400204a0 	.word	0x400204a0
 8006220:	400204b8 	.word	0x400204b8
 8006224:	58025408 	.word	0x58025408
 8006228:	5802541c 	.word	0x5802541c
 800622c:	58025430 	.word	0x58025430
 8006230:	58025444 	.word	0x58025444
 8006234:	58025458 	.word	0x58025458
 8006238:	5802546c 	.word	0x5802546c
 800623c:	58025480 	.word	0x58025480
 8006240:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d160      	bne.n	8006310 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a8c      	ldr	r2, [pc, #560]	; (8006484 <HAL_DMA_IRQHandler+0xca8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d04a      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a8a      	ldr	r2, [pc, #552]	; (8006488 <HAL_DMA_IRQHandler+0xcac>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d045      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a89      	ldr	r2, [pc, #548]	; (800648c <HAL_DMA_IRQHandler+0xcb0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d040      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a87      	ldr	r2, [pc, #540]	; (8006490 <HAL_DMA_IRQHandler+0xcb4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d03b      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a86      	ldr	r2, [pc, #536]	; (8006494 <HAL_DMA_IRQHandler+0xcb8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d036      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a84      	ldr	r2, [pc, #528]	; (8006498 <HAL_DMA_IRQHandler+0xcbc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d031      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a83      	ldr	r2, [pc, #524]	; (800649c <HAL_DMA_IRQHandler+0xcc0>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d02c      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a81      	ldr	r2, [pc, #516]	; (80064a0 <HAL_DMA_IRQHandler+0xcc4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d027      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a80      	ldr	r2, [pc, #512]	; (80064a4 <HAL_DMA_IRQHandler+0xcc8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d022      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a7e      	ldr	r2, [pc, #504]	; (80064a8 <HAL_DMA_IRQHandler+0xccc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01d      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a7d      	ldr	r2, [pc, #500]	; (80064ac <HAL_DMA_IRQHandler+0xcd0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d018      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a7b      	ldr	r2, [pc, #492]	; (80064b0 <HAL_DMA_IRQHandler+0xcd4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a7a      	ldr	r2, [pc, #488]	; (80064b4 <HAL_DMA_IRQHandler+0xcd8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00e      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a78      	ldr	r2, [pc, #480]	; (80064b8 <HAL_DMA_IRQHandler+0xcdc>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d009      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a77      	ldr	r2, [pc, #476]	; (80064bc <HAL_DMA_IRQHandler+0xce0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d004      	beq.n	80062ee <HAL_DMA_IRQHandler+0xb12>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a75      	ldr	r2, [pc, #468]	; (80064c0 <HAL_DMA_IRQHandler+0xce4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d108      	bne.n	8006300 <HAL_DMA_IRQHandler+0xb24>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0208 	bic.w	r2, r2, #8
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e007      	b.n	8006310 <HAL_DMA_IRQHandler+0xb34>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0204 	bic.w	r2, r2, #4
 800630e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8165 	beq.w	80065e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006322:	e15f      	b.n	80065e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2202      	movs	r2, #2
 800632e:	409a      	lsls	r2, r3
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80c5 	beq.w	80064c4 <HAL_DMA_IRQHandler+0xce8>
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80bf 	beq.w	80064c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2202      	movs	r2, #2
 8006350:	409a      	lsls	r2, r3
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d018      	beq.n	8006392 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 813a 	beq.w	80065e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800637c:	e134      	b.n	80065e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 8130 	beq.w	80065e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006390:	e12a      	b.n	80065e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d168      	bne.n	800646e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a38      	ldr	r2, [pc, #224]	; (8006484 <HAL_DMA_IRQHandler+0xca8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d04a      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a37      	ldr	r2, [pc, #220]	; (8006488 <HAL_DMA_IRQHandler+0xcac>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d045      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a35      	ldr	r2, [pc, #212]	; (800648c <HAL_DMA_IRQHandler+0xcb0>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d040      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a34      	ldr	r2, [pc, #208]	; (8006490 <HAL_DMA_IRQHandler+0xcb4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d03b      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a32      	ldr	r2, [pc, #200]	; (8006494 <HAL_DMA_IRQHandler+0xcb8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d036      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a31      	ldr	r2, [pc, #196]	; (8006498 <HAL_DMA_IRQHandler+0xcbc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d031      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a2f      	ldr	r2, [pc, #188]	; (800649c <HAL_DMA_IRQHandler+0xcc0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02c      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a2e      	ldr	r2, [pc, #184]	; (80064a0 <HAL_DMA_IRQHandler+0xcc4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d027      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2c      	ldr	r2, [pc, #176]	; (80064a4 <HAL_DMA_IRQHandler+0xcc8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d022      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2b      	ldr	r2, [pc, #172]	; (80064a8 <HAL_DMA_IRQHandler+0xccc>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d01d      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a29      	ldr	r2, [pc, #164]	; (80064ac <HAL_DMA_IRQHandler+0xcd0>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d018      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <HAL_DMA_IRQHandler+0xcd4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a26      	ldr	r2, [pc, #152]	; (80064b4 <HAL_DMA_IRQHandler+0xcd8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a25      	ldr	r2, [pc, #148]	; (80064b8 <HAL_DMA_IRQHandler+0xcdc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a23      	ldr	r2, [pc, #140]	; (80064bc <HAL_DMA_IRQHandler+0xce0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_DMA_IRQHandler+0xc60>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <HAL_DMA_IRQHandler+0xce4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d108      	bne.n	800644e <HAL_DMA_IRQHandler+0xc72>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0214 	bic.w	r2, r2, #20
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e007      	b.n	800645e <HAL_DMA_IRQHandler+0xc82>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 020a 	bic.w	r2, r2, #10
 800645c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 80b8 	beq.w	80065e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006480:	e0b2      	b.n	80065e8 <HAL_DMA_IRQHandler+0xe0c>
 8006482:	bf00      	nop
 8006484:	40020010 	.word	0x40020010
 8006488:	40020028 	.word	0x40020028
 800648c:	40020040 	.word	0x40020040
 8006490:	40020058 	.word	0x40020058
 8006494:	40020070 	.word	0x40020070
 8006498:	40020088 	.word	0x40020088
 800649c:	400200a0 	.word	0x400200a0
 80064a0:	400200b8 	.word	0x400200b8
 80064a4:	40020410 	.word	0x40020410
 80064a8:	40020428 	.word	0x40020428
 80064ac:	40020440 	.word	0x40020440
 80064b0:	40020458 	.word	0x40020458
 80064b4:	40020470 	.word	0x40020470
 80064b8:	40020488 	.word	0x40020488
 80064bc:	400204a0 	.word	0x400204a0
 80064c0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c8:	f003 031f 	and.w	r3, r3, #31
 80064cc:	2208      	movs	r2, #8
 80064ce:	409a      	lsls	r2, r3
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8088 	beq.w	80065ea <HAL_DMA_IRQHandler+0xe0e>
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8082 	beq.w	80065ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a41      	ldr	r2, [pc, #260]	; (80065f0 <HAL_DMA_IRQHandler+0xe14>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d04a      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a3f      	ldr	r2, [pc, #252]	; (80065f4 <HAL_DMA_IRQHandler+0xe18>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d045      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a3e      	ldr	r2, [pc, #248]	; (80065f8 <HAL_DMA_IRQHandler+0xe1c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d040      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3c      	ldr	r2, [pc, #240]	; (80065fc <HAL_DMA_IRQHandler+0xe20>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d03b      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a3b      	ldr	r2, [pc, #236]	; (8006600 <HAL_DMA_IRQHandler+0xe24>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d036      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a39      	ldr	r2, [pc, #228]	; (8006604 <HAL_DMA_IRQHandler+0xe28>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d031      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a38      	ldr	r2, [pc, #224]	; (8006608 <HAL_DMA_IRQHandler+0xe2c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d02c      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a36      	ldr	r2, [pc, #216]	; (800660c <HAL_DMA_IRQHandler+0xe30>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d027      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a35      	ldr	r2, [pc, #212]	; (8006610 <HAL_DMA_IRQHandler+0xe34>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a33      	ldr	r2, [pc, #204]	; (8006614 <HAL_DMA_IRQHandler+0xe38>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d01d      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a32      	ldr	r2, [pc, #200]	; (8006618 <HAL_DMA_IRQHandler+0xe3c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d018      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a30      	ldr	r2, [pc, #192]	; (800661c <HAL_DMA_IRQHandler+0xe40>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a2f      	ldr	r2, [pc, #188]	; (8006620 <HAL_DMA_IRQHandler+0xe44>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a2d      	ldr	r2, [pc, #180]	; (8006624 <HAL_DMA_IRQHandler+0xe48>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2c      	ldr	r2, [pc, #176]	; (8006628 <HAL_DMA_IRQHandler+0xe4c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_DMA_IRQHandler+0xdaa>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a2a      	ldr	r2, [pc, #168]	; (800662c <HAL_DMA_IRQHandler+0xe50>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <HAL_DMA_IRQHandler+0xdbc>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 021c 	bic.w	r2, r2, #28
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	e007      	b.n	80065a8 <HAL_DMA_IRQHandler+0xdcc>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 020e 	bic.w	r2, r2, #14
 80065a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	2201      	movs	r2, #1
 80065b2:	409a      	lsls	r2, r3
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
 80065de:	e004      	b.n	80065ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80065e0:	bf00      	nop
 80065e2:	e002      	b.n	80065ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065e4:	bf00      	nop
 80065e6:	e000      	b.n	80065ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065ea:	3728      	adds	r7, #40	; 0x28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40020010 	.word	0x40020010
 80065f4:	40020028 	.word	0x40020028
 80065f8:	40020040 	.word	0x40020040
 80065fc:	40020058 	.word	0x40020058
 8006600:	40020070 	.word	0x40020070
 8006604:	40020088 	.word	0x40020088
 8006608:	400200a0 	.word	0x400200a0
 800660c:	400200b8 	.word	0x400200b8
 8006610:	40020410 	.word	0x40020410
 8006614:	40020428 	.word	0x40020428
 8006618:	40020440 	.word	0x40020440
 800661c:	40020458 	.word	0x40020458
 8006620:	40020470 	.word	0x40020470
 8006624:	40020488 	.word	0x40020488
 8006628:	400204a0 	.word	0x400204a0
 800662c:	400204b8 	.word	0x400204b8

08006630 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006642:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006648:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a84      	ldr	r2, [pc, #528]	; (8006860 <DMA_SetConfig+0x230>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d072      	beq.n	800673a <DMA_SetConfig+0x10a>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a82      	ldr	r2, [pc, #520]	; (8006864 <DMA_SetConfig+0x234>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d06d      	beq.n	800673a <DMA_SetConfig+0x10a>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a81      	ldr	r2, [pc, #516]	; (8006868 <DMA_SetConfig+0x238>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d068      	beq.n	800673a <DMA_SetConfig+0x10a>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a7f      	ldr	r2, [pc, #508]	; (800686c <DMA_SetConfig+0x23c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d063      	beq.n	800673a <DMA_SetConfig+0x10a>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a7e      	ldr	r2, [pc, #504]	; (8006870 <DMA_SetConfig+0x240>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d05e      	beq.n	800673a <DMA_SetConfig+0x10a>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a7c      	ldr	r2, [pc, #496]	; (8006874 <DMA_SetConfig+0x244>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d059      	beq.n	800673a <DMA_SetConfig+0x10a>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a7b      	ldr	r2, [pc, #492]	; (8006878 <DMA_SetConfig+0x248>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d054      	beq.n	800673a <DMA_SetConfig+0x10a>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a79      	ldr	r2, [pc, #484]	; (800687c <DMA_SetConfig+0x24c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d04f      	beq.n	800673a <DMA_SetConfig+0x10a>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a78      	ldr	r2, [pc, #480]	; (8006880 <DMA_SetConfig+0x250>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d04a      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a76      	ldr	r2, [pc, #472]	; (8006884 <DMA_SetConfig+0x254>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d045      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a75      	ldr	r2, [pc, #468]	; (8006888 <DMA_SetConfig+0x258>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d040      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a73      	ldr	r2, [pc, #460]	; (800688c <DMA_SetConfig+0x25c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d03b      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a72      	ldr	r2, [pc, #456]	; (8006890 <DMA_SetConfig+0x260>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d036      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a70      	ldr	r2, [pc, #448]	; (8006894 <DMA_SetConfig+0x264>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d031      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a6f      	ldr	r2, [pc, #444]	; (8006898 <DMA_SetConfig+0x268>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d02c      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a6d      	ldr	r2, [pc, #436]	; (800689c <DMA_SetConfig+0x26c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d027      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a6c      	ldr	r2, [pc, #432]	; (80068a0 <DMA_SetConfig+0x270>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d022      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a6a      	ldr	r2, [pc, #424]	; (80068a4 <DMA_SetConfig+0x274>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01d      	beq.n	800673a <DMA_SetConfig+0x10a>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a69      	ldr	r2, [pc, #420]	; (80068a8 <DMA_SetConfig+0x278>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d018      	beq.n	800673a <DMA_SetConfig+0x10a>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a67      	ldr	r2, [pc, #412]	; (80068ac <DMA_SetConfig+0x27c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d013      	beq.n	800673a <DMA_SetConfig+0x10a>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a66      	ldr	r2, [pc, #408]	; (80068b0 <DMA_SetConfig+0x280>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d00e      	beq.n	800673a <DMA_SetConfig+0x10a>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a64      	ldr	r2, [pc, #400]	; (80068b4 <DMA_SetConfig+0x284>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d009      	beq.n	800673a <DMA_SetConfig+0x10a>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a63      	ldr	r2, [pc, #396]	; (80068b8 <DMA_SetConfig+0x288>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d004      	beq.n	800673a <DMA_SetConfig+0x10a>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a61      	ldr	r2, [pc, #388]	; (80068bc <DMA_SetConfig+0x28c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d101      	bne.n	800673e <DMA_SetConfig+0x10e>
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <DMA_SetConfig+0x110>
 800673e:	2300      	movs	r3, #0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00d      	beq.n	8006760 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800674c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800675e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a3e      	ldr	r2, [pc, #248]	; (8006860 <DMA_SetConfig+0x230>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d04a      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a3d      	ldr	r2, [pc, #244]	; (8006864 <DMA_SetConfig+0x234>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d045      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a3b      	ldr	r2, [pc, #236]	; (8006868 <DMA_SetConfig+0x238>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d040      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a3a      	ldr	r2, [pc, #232]	; (800686c <DMA_SetConfig+0x23c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d03b      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a38      	ldr	r2, [pc, #224]	; (8006870 <DMA_SetConfig+0x240>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d036      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a37      	ldr	r2, [pc, #220]	; (8006874 <DMA_SetConfig+0x244>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d031      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a35      	ldr	r2, [pc, #212]	; (8006878 <DMA_SetConfig+0x248>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d02c      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a34      	ldr	r2, [pc, #208]	; (800687c <DMA_SetConfig+0x24c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d027      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a32      	ldr	r2, [pc, #200]	; (8006880 <DMA_SetConfig+0x250>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d022      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a31      	ldr	r2, [pc, #196]	; (8006884 <DMA_SetConfig+0x254>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d01d      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a2f      	ldr	r2, [pc, #188]	; (8006888 <DMA_SetConfig+0x258>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d018      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a2e      	ldr	r2, [pc, #184]	; (800688c <DMA_SetConfig+0x25c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a2c      	ldr	r2, [pc, #176]	; (8006890 <DMA_SetConfig+0x260>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00e      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a2b      	ldr	r2, [pc, #172]	; (8006894 <DMA_SetConfig+0x264>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d009      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a29      	ldr	r2, [pc, #164]	; (8006898 <DMA_SetConfig+0x268>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <DMA_SetConfig+0x1d0>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a28      	ldr	r2, [pc, #160]	; (800689c <DMA_SetConfig+0x26c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d101      	bne.n	8006804 <DMA_SetConfig+0x1d4>
 8006800:	2301      	movs	r3, #1
 8006802:	e000      	b.n	8006806 <DMA_SetConfig+0x1d6>
 8006804:	2300      	movs	r3, #0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d05a      	beq.n	80068c0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	223f      	movs	r2, #63	; 0x3f
 8006814:	409a      	lsls	r2, r3
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006828:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2b40      	cmp	r3, #64	; 0x40
 8006838:	d108      	bne.n	800684c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800684a:	e087      	b.n	800695c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	60da      	str	r2, [r3, #12]
}
 800685c:	e07e      	b.n	800695c <DMA_SetConfig+0x32c>
 800685e:	bf00      	nop
 8006860:	40020010 	.word	0x40020010
 8006864:	40020028 	.word	0x40020028
 8006868:	40020040 	.word	0x40020040
 800686c:	40020058 	.word	0x40020058
 8006870:	40020070 	.word	0x40020070
 8006874:	40020088 	.word	0x40020088
 8006878:	400200a0 	.word	0x400200a0
 800687c:	400200b8 	.word	0x400200b8
 8006880:	40020410 	.word	0x40020410
 8006884:	40020428 	.word	0x40020428
 8006888:	40020440 	.word	0x40020440
 800688c:	40020458 	.word	0x40020458
 8006890:	40020470 	.word	0x40020470
 8006894:	40020488 	.word	0x40020488
 8006898:	400204a0 	.word	0x400204a0
 800689c:	400204b8 	.word	0x400204b8
 80068a0:	58025408 	.word	0x58025408
 80068a4:	5802541c 	.word	0x5802541c
 80068a8:	58025430 	.word	0x58025430
 80068ac:	58025444 	.word	0x58025444
 80068b0:	58025458 	.word	0x58025458
 80068b4:	5802546c 	.word	0x5802546c
 80068b8:	58025480 	.word	0x58025480
 80068bc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a28      	ldr	r2, [pc, #160]	; (8006968 <DMA_SetConfig+0x338>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d022      	beq.n	8006910 <DMA_SetConfig+0x2e0>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a27      	ldr	r2, [pc, #156]	; (800696c <DMA_SetConfig+0x33c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d01d      	beq.n	8006910 <DMA_SetConfig+0x2e0>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a25      	ldr	r2, [pc, #148]	; (8006970 <DMA_SetConfig+0x340>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d018      	beq.n	8006910 <DMA_SetConfig+0x2e0>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a24      	ldr	r2, [pc, #144]	; (8006974 <DMA_SetConfig+0x344>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d013      	beq.n	8006910 <DMA_SetConfig+0x2e0>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a22      	ldr	r2, [pc, #136]	; (8006978 <DMA_SetConfig+0x348>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00e      	beq.n	8006910 <DMA_SetConfig+0x2e0>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a21      	ldr	r2, [pc, #132]	; (800697c <DMA_SetConfig+0x34c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d009      	beq.n	8006910 <DMA_SetConfig+0x2e0>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <DMA_SetConfig+0x350>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d004      	beq.n	8006910 <DMA_SetConfig+0x2e0>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <DMA_SetConfig+0x354>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d101      	bne.n	8006914 <DMA_SetConfig+0x2e4>
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <DMA_SetConfig+0x2e6>
 8006914:	2300      	movs	r3, #0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d020      	beq.n	800695c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2201      	movs	r2, #1
 8006924:	409a      	lsls	r2, r3
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b40      	cmp	r3, #64	; 0x40
 8006938:	d108      	bne.n	800694c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	60da      	str	r2, [r3, #12]
}
 800694a:	e007      	b.n	800695c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	60da      	str	r2, [r3, #12]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	58025408 	.word	0x58025408
 800696c:	5802541c 	.word	0x5802541c
 8006970:	58025430 	.word	0x58025430
 8006974:	58025444 	.word	0x58025444
 8006978:	58025458 	.word	0x58025458
 800697c:	5802546c 	.word	0x5802546c
 8006980:	58025480 	.word	0x58025480
 8006984:	58025494 	.word	0x58025494

08006988 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a42      	ldr	r2, [pc, #264]	; (8006aa0 <DMA_CalcBaseAndBitshift+0x118>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d04a      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a41      	ldr	r2, [pc, #260]	; (8006aa4 <DMA_CalcBaseAndBitshift+0x11c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d045      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a3f      	ldr	r2, [pc, #252]	; (8006aa8 <DMA_CalcBaseAndBitshift+0x120>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d040      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a3e      	ldr	r2, [pc, #248]	; (8006aac <DMA_CalcBaseAndBitshift+0x124>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d03b      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a3c      	ldr	r2, [pc, #240]	; (8006ab0 <DMA_CalcBaseAndBitshift+0x128>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d036      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a3b      	ldr	r2, [pc, #236]	; (8006ab4 <DMA_CalcBaseAndBitshift+0x12c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d031      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a39      	ldr	r2, [pc, #228]	; (8006ab8 <DMA_CalcBaseAndBitshift+0x130>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d02c      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a38      	ldr	r2, [pc, #224]	; (8006abc <DMA_CalcBaseAndBitshift+0x134>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d027      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a36      	ldr	r2, [pc, #216]	; (8006ac0 <DMA_CalcBaseAndBitshift+0x138>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d022      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a35      	ldr	r2, [pc, #212]	; (8006ac4 <DMA_CalcBaseAndBitshift+0x13c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d01d      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a33      	ldr	r2, [pc, #204]	; (8006ac8 <DMA_CalcBaseAndBitshift+0x140>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d018      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a32      	ldr	r2, [pc, #200]	; (8006acc <DMA_CalcBaseAndBitshift+0x144>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a30      	ldr	r2, [pc, #192]	; (8006ad0 <DMA_CalcBaseAndBitshift+0x148>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00e      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2f      	ldr	r2, [pc, #188]	; (8006ad4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d009      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a2d      	ldr	r2, [pc, #180]	; (8006ad8 <DMA_CalcBaseAndBitshift+0x150>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <DMA_CalcBaseAndBitshift+0xa8>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a2c      	ldr	r2, [pc, #176]	; (8006adc <DMA_CalcBaseAndBitshift+0x154>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d101      	bne.n	8006a34 <DMA_CalcBaseAndBitshift+0xac>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <DMA_CalcBaseAndBitshift+0xae>
 8006a34:	2300      	movs	r3, #0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d024      	beq.n	8006a84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	3b10      	subs	r3, #16
 8006a42:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <DMA_CalcBaseAndBitshift+0x158>)
 8006a44:	fba2 2303 	umull	r2, r3, r2, r3
 8006a48:	091b      	lsrs	r3, r3, #4
 8006a4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 0307 	and.w	r3, r3, #7
 8006a52:	4a24      	ldr	r2, [pc, #144]	; (8006ae4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006a54:	5cd3      	ldrb	r3, [r2, r3]
 8006a56:	461a      	mov	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d908      	bls.n	8006a74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	4b1f      	ldr	r3, [pc, #124]	; (8006ae8 <DMA_CalcBaseAndBitshift+0x160>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	1d1a      	adds	r2, r3, #4
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	659a      	str	r2, [r3, #88]	; 0x58
 8006a72:	e00d      	b.n	8006a90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ae8 <DMA_CalcBaseAndBitshift+0x160>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	6593      	str	r3, [r2, #88]	; 0x58
 8006a82:	e005      	b.n	8006a90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	40020010 	.word	0x40020010
 8006aa4:	40020028 	.word	0x40020028
 8006aa8:	40020040 	.word	0x40020040
 8006aac:	40020058 	.word	0x40020058
 8006ab0:	40020070 	.word	0x40020070
 8006ab4:	40020088 	.word	0x40020088
 8006ab8:	400200a0 	.word	0x400200a0
 8006abc:	400200b8 	.word	0x400200b8
 8006ac0:	40020410 	.word	0x40020410
 8006ac4:	40020428 	.word	0x40020428
 8006ac8:	40020440 	.word	0x40020440
 8006acc:	40020458 	.word	0x40020458
 8006ad0:	40020470 	.word	0x40020470
 8006ad4:	40020488 	.word	0x40020488
 8006ad8:	400204a0 	.word	0x400204a0
 8006adc:	400204b8 	.word	0x400204b8
 8006ae0:	aaaaaaab 	.word	0xaaaaaaab
 8006ae4:	0800ca64 	.word	0x0800ca64
 8006ae8:	fffffc00 	.word	0xfffffc00

08006aec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d120      	bne.n	8006b42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d858      	bhi.n	8006bba <DMA_CheckFifoParam+0xce>
 8006b08:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <DMA_CheckFifoParam+0x24>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b21 	.word	0x08006b21
 8006b14:	08006b33 	.word	0x08006b33
 8006b18:	08006b21 	.word	0x08006b21
 8006b1c:	08006bbb 	.word	0x08006bbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d048      	beq.n	8006bbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b30:	e045      	b.n	8006bbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b3a:	d142      	bne.n	8006bc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b40:	e03f      	b.n	8006bc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4a:	d123      	bne.n	8006b94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d838      	bhi.n	8006bc6 <DMA_CheckFifoParam+0xda>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <DMA_CheckFifoParam+0x70>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b6d 	.word	0x08006b6d
 8006b60:	08006b73 	.word	0x08006b73
 8006b64:	08006b6d 	.word	0x08006b6d
 8006b68:	08006b85 	.word	0x08006b85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
        break;
 8006b70:	e030      	b.n	8006bd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d025      	beq.n	8006bca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b82:	e022      	b.n	8006bca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b8c:	d11f      	bne.n	8006bce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b92:	e01c      	b.n	8006bce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d902      	bls.n	8006ba2 <DMA_CheckFifoParam+0xb6>
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d003      	beq.n	8006ba8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006ba0:	e018      	b.n	8006bd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8006ba6:	e015      	b.n	8006bd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00e      	beq.n	8006bd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8006bb8:	e00b      	b.n	8006bd2 <DMA_CheckFifoParam+0xe6>
        break;
 8006bba:	bf00      	nop
 8006bbc:	e00a      	b.n	8006bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006bbe:	bf00      	nop
 8006bc0:	e008      	b.n	8006bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006bc2:	bf00      	nop
 8006bc4:	e006      	b.n	8006bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006bc6:	bf00      	nop
 8006bc8:	e004      	b.n	8006bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006bca:	bf00      	nop
 8006bcc:	e002      	b.n	8006bd4 <DMA_CheckFifoParam+0xe8>
        break;
 8006bce:	bf00      	nop
 8006bd0:	e000      	b.n	8006bd4 <DMA_CheckFifoParam+0xe8>
    break;
 8006bd2:	bf00      	nop
    }
  }

  return status;
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop

08006be4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a38      	ldr	r2, [pc, #224]	; (8006cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d022      	beq.n	8006c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a36      	ldr	r2, [pc, #216]	; (8006cdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01d      	beq.n	8006c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a35      	ldr	r2, [pc, #212]	; (8006ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d018      	beq.n	8006c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a33      	ldr	r2, [pc, #204]	; (8006ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d013      	beq.n	8006c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a32      	ldr	r2, [pc, #200]	; (8006ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d00e      	beq.n	8006c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a30      	ldr	r2, [pc, #192]	; (8006cec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d009      	beq.n	8006c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2f      	ldr	r2, [pc, #188]	; (8006cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2d      	ldr	r2, [pc, #180]	; (8006cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d101      	bne.n	8006c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006c46:	2300      	movs	r3, #0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01a      	beq.n	8006c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	3b08      	subs	r3, #8
 8006c54:	4a28      	ldr	r2, [pc, #160]	; (8006cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c56:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5a:	091b      	lsrs	r3, r3, #4
 8006c5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4b26      	ldr	r3, [pc, #152]	; (8006cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	461a      	mov	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a24      	ldr	r2, [pc, #144]	; (8006d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	2201      	movs	r2, #1
 8006c7a:	409a      	lsls	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c80:	e024      	b.n	8006ccc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	3b10      	subs	r3, #16
 8006c8a:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c90:	091b      	lsrs	r3, r3, #4
 8006c92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4a1c      	ldr	r2, [pc, #112]	; (8006d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d806      	bhi.n	8006caa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	4a1b      	ldr	r2, [pc, #108]	; (8006d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d902      	bls.n	8006caa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3308      	adds	r3, #8
 8006ca8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4b18      	ldr	r3, [pc, #96]	; (8006d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006cae:	4413      	add	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006cbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f003 031f 	and.w	r3, r3, #31
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	409a      	lsls	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	58025408 	.word	0x58025408
 8006cdc:	5802541c 	.word	0x5802541c
 8006ce0:	58025430 	.word	0x58025430
 8006ce4:	58025444 	.word	0x58025444
 8006ce8:	58025458 	.word	0x58025458
 8006cec:	5802546c 	.word	0x5802546c
 8006cf0:	58025480 	.word	0x58025480
 8006cf4:	58025494 	.word	0x58025494
 8006cf8:	cccccccd 	.word	0xcccccccd
 8006cfc:	16009600 	.word	0x16009600
 8006d00:	58025880 	.word	0x58025880
 8006d04:	aaaaaaab 	.word	0xaaaaaaab
 8006d08:	400204b8 	.word	0x400204b8
 8006d0c:	4002040f 	.word	0x4002040f
 8006d10:	10008200 	.word	0x10008200
 8006d14:	40020880 	.word	0x40020880

08006d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d04a      	beq.n	8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d847      	bhi.n	8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a25      	ldr	r2, [pc, #148]	; (8006dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d022      	beq.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a24      	ldr	r2, [pc, #144]	; (8006dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d01d      	beq.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d018      	beq.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d013      	beq.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00e      	beq.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d009      	beq.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a1b      	ldr	r2, [pc, #108]	; (8006dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d101      	bne.n	8006d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	461a      	mov	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a15      	ldr	r2, [pc, #84]	; (8006df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006da0:	671a      	str	r2, [r3, #112]	; 0x70
 8006da2:	e009      	b.n	8006db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	461a      	mov	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a11      	ldr	r2, [pc, #68]	; (8006dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006db6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	58025408 	.word	0x58025408
 8006dd4:	5802541c 	.word	0x5802541c
 8006dd8:	58025430 	.word	0x58025430
 8006ddc:	58025444 	.word	0x58025444
 8006de0:	58025458 	.word	0x58025458
 8006de4:	5802546c 	.word	0x5802546c
 8006de8:	58025480 	.word	0x58025480
 8006dec:	58025494 	.word	0x58025494
 8006df0:	1600963f 	.word	0x1600963f
 8006df4:	58025940 	.word	0x58025940
 8006df8:	1000823f 	.word	0x1000823f
 8006dfc:	40020940 	.word	0x40020940

08006e00 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e0c6      	b.n	8006fa0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d102      	bne.n	8006e20 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fa ffaa 	bl	8001d74 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2223      	movs	r2, #35	; 0x23
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e26:	4b60      	ldr	r3, [pc, #384]	; (8006fa8 <HAL_ETH_Init+0x1a8>)
 8006e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e2c:	4a5e      	ldr	r2, [pc, #376]	; (8006fa8 <HAL_ETH_Init+0x1a8>)
 8006e2e:	f043 0302 	orr.w	r3, r3, #2
 8006e32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006e36:	4b5c      	ldr	r3, [pc, #368]	; (8006fa8 <HAL_ETH_Init+0x1a8>)
 8006e38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	7a1b      	ldrb	r3, [r3, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d103      	bne.n	8006e54 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	f7fb fb35 	bl	80024bc <HAL_SYSCFG_ETHInterfaceSelect>
 8006e52:	e003      	b.n	8006e5c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006e54:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006e58:	f7fb fb30 	bl	80024bc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0201 	orr.w	r2, r2, #1
 8006e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e74:	f7fb fae8 	bl	8002448 <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006e7a:	e00f      	b.n	8006e9c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8006e7c:	f7fb fae4 	bl	8002448 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006e8a:	d907      	bls.n	8006e9c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2204      	movs	r2, #4
 8006e90:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	22e0      	movs	r2, #224	; 0xe0
 8006e96:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e081      	b.n	8006fa0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e6      	bne.n	8006e7c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fac0 	bl	8007434 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006eb4:	f001 fe68 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	4b3c      	ldr	r3, [pc, #240]	; (8006fac <HAL_ETH_Init+0x1ac>)
 8006ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec0:	0c9a      	lsrs	r2, r3, #18
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3a01      	subs	r2, #1
 8006ec8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa13 	bl	80072f8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006ee8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8006eec:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	22e0      	movs	r2, #224	; 0xe0
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e04a      	b.n	8006fa0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	f241 1308 	movw	r3, #4360	; 0x1108
 8006f12:	4413      	add	r3, r2
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b26      	ldr	r3, [pc, #152]	; (8006fb0 <HAL_ETH_Init+0x1b0>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6952      	ldr	r2, [r2, #20]
 8006f1e:	0052      	lsls	r2, r2, #1
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	6809      	ldr	r1, [r1, #0]
 8006f24:	431a      	orrs	r2, r3
 8006f26:	f241 1308 	movw	r3, #4360	; 0x1108
 8006f2a:	440b      	add	r3, r1
 8006f2c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fad8 	bl	80074e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fb1c 	bl	8007572 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	3305      	adds	r3, #5
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	021a      	lsls	r2, r3, #8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	3303      	adds	r3, #3
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	061a      	lsls	r2, r3, #24
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	3302      	adds	r3, #2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	041b      	lsls	r3, r3, #16
 8006f6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	3301      	adds	r3, #1
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006f78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006f86:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006f88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2210      	movs	r2, #16
 8006f96:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2210      	movs	r2, #16
 8006f9c:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	431bde83 	.word	0x431bde83
 8006fb0:	ffff8001 	.word	0xffff8001

08006fb4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8006fc6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	791b      	ldrb	r3, [r3, #4]
 8006fcc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8006fce:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	7b1b      	ldrb	r3, [r3, #12]
 8006fd4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8006fd6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	7b5b      	ldrb	r3, [r3, #13]
 8006fdc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006fde:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	7b9b      	ldrb	r3, [r3, #14]
 8006fe4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8006fe6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	7bdb      	ldrb	r3, [r3, #15]
 8006fec:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006fee:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	2a00      	cmp	r2, #0
 8006ff6:	d102      	bne.n	8006ffe <ETH_SetMACConfig+0x4a>
 8006ff8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006ffc:	e000      	b.n	8007000 <ETH_SetMACConfig+0x4c>
 8006ffe:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007000:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	7c52      	ldrb	r2, [r2, #17]
 8007006:	2a00      	cmp	r2, #0
 8007008:	d102      	bne.n	8007010 <ETH_SetMACConfig+0x5c>
 800700a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800700e:	e000      	b.n	8007012 <ETH_SetMACConfig+0x5e>
 8007010:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007012:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	7c9b      	ldrb	r3, [r3, #18]
 8007018:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800701a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8007020:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8007026:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	7f1b      	ldrb	r3, [r3, #28]
 800702c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800702e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	7f5b      	ldrb	r3, [r3, #29]
 8007034:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8007036:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	7f92      	ldrb	r2, [r2, #30]
 800703c:	2a00      	cmp	r2, #0
 800703e:	d102      	bne.n	8007046 <ETH_SetMACConfig+0x92>
 8007040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007044:	e000      	b.n	8007048 <ETH_SetMACConfig+0x94>
 8007046:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8007048:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	7fdb      	ldrb	r3, [r3, #31]
 800704e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8007050:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007058:	2a00      	cmp	r2, #0
 800705a:	d102      	bne.n	8007062 <ETH_SetMACConfig+0xae>
 800705c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007060:	e000      	b.n	8007064 <ETH_SetMACConfig+0xb0>
 8007062:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8007064:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800706a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007072:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8007074:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	4b56      	ldr	r3, [pc, #344]	; (80071e0 <ETH_SetMACConfig+0x22c>)
 8007086:	4013      	ands	r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	68f9      	ldr	r1, [r7, #12]
 800708e:	430b      	orrs	r3, r1
 8007090:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007096:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800709e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80070a0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070a8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80070aa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80070b2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80070b4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80070bc:	2a00      	cmp	r2, #0
 80070be:	d102      	bne.n	80070c6 <ETH_SetMACConfig+0x112>
 80070c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80070c4:	e000      	b.n	80070c8 <ETH_SetMACConfig+0x114>
 80070c6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80070c8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	4b42      	ldr	r3, [pc, #264]	; (80071e4 <ETH_SetMACConfig+0x230>)
 80070da:	4013      	ands	r3, r2
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	68f9      	ldr	r1, [r7, #12]
 80070e2:	430b      	orrs	r3, r1
 80070e4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070ec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	4b3a      	ldr	r3, [pc, #232]	; (80071e8 <ETH_SetMACConfig+0x234>)
 80070fe:	4013      	ands	r3, r2
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	68f9      	ldr	r1, [r7, #12]
 8007106:	430b      	orrs	r3, r1
 8007108:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007110:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007116:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800711e:	2a00      	cmp	r2, #0
 8007120:	d101      	bne.n	8007126 <ETH_SetMACConfig+0x172>
 8007122:	2280      	movs	r2, #128	; 0x80
 8007124:	e000      	b.n	8007128 <ETH_SetMACConfig+0x174>
 8007126:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007128:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800713a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800713e:	4013      	ands	r3, r2
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	68f9      	ldr	r1, [r7, #12]
 8007146:	430b      	orrs	r3, r1
 8007148:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007150:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007158:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	f023 0103 	bic.w	r1, r3, #3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	430a      	orrs	r2, r1
 8007172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800717e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800719a:	2a00      	cmp	r2, #0
 800719c:	d101      	bne.n	80071a2 <ETH_SetMACConfig+0x1ee>
 800719e:	2240      	movs	r2, #64	; 0x40
 80071a0:	e000      	b.n	80071a4 <ETH_SetMACConfig+0x1f0>
 80071a2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80071a4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80071ac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80071ae:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80071b6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80071c4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80071d4:	bf00      	nop
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	00048083 	.word	0x00048083
 80071e4:	c0f88000 	.word	0xc0f88000
 80071e8:	fffffef0 	.word	0xfffffef0

080071ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	4b38      	ldr	r3, [pc, #224]	; (80072e4 <ETH_SetDMAConfig+0xf8>)
 8007202:	4013      	ands	r3, r2
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	6812      	ldr	r2, [r2, #0]
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	6809      	ldr	r1, [r1, #0]
 800720c:	431a      	orrs	r2, r3
 800720e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8007212:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	791b      	ldrb	r3, [r3, #4]
 8007218:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800721e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	7b1b      	ldrb	r3, [r3, #12]
 8007224:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007226:	4313      	orrs	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	f241 0304 	movw	r3, #4100	; 0x1004
 8007232:	4413      	add	r3, r2
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	4b2c      	ldr	r3, [pc, #176]	; (80072e8 <ETH_SetDMAConfig+0xfc>)
 8007238:	4013      	ands	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6811      	ldr	r1, [r2, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	431a      	orrs	r2, r3
 8007242:	f241 0304 	movw	r3, #4100	; 0x1004
 8007246:	440b      	add	r3, r1
 8007248:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	7b5b      	ldrb	r3, [r3, #13]
 800724e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4b22      	ldr	r3, [pc, #136]	; (80072ec <ETH_SetDMAConfig+0x100>)
 8007264:	4013      	ands	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6811      	ldr	r1, [r2, #0]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	431a      	orrs	r2, r3
 800726e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8007272:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	7d1b      	ldrb	r3, [r3, #20]
 800727c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800727e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	7f5b      	ldrb	r3, [r3, #29]
 8007284:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	f241 1304 	movw	r3, #4356	; 0x1104
 8007292:	4413      	add	r3, r2
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <ETH_SetDMAConfig+0x104>)
 8007298:	4013      	ands	r3, r2
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6811      	ldr	r1, [r2, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	431a      	orrs	r2, r3
 80072a2:	f241 1304 	movw	r3, #4356	; 0x1104
 80072a6:	440b      	add	r3, r1
 80072a8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	7f1b      	ldrb	r3, [r3, #28]
 80072ae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	f241 1308 	movw	r3, #4360	; 0x1108
 80072c0:	4413      	add	r3, r2
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <ETH_SetDMAConfig+0x108>)
 80072c6:	4013      	ands	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6811      	ldr	r1, [r2, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	f241 1308 	movw	r3, #4360	; 0x1108
 80072d4:	440b      	add	r3, r1
 80072d6:	601a      	str	r2, [r3, #0]
}
 80072d8:	bf00      	nop
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	ffff87fd 	.word	0xffff87fd
 80072e8:	ffff2ffe 	.word	0xffff2ffe
 80072ec:	fffec000 	.word	0xfffec000
 80072f0:	ffc0efef 	.word	0xffc0efef
 80072f4:	7fc0ffff 	.word	0x7fc0ffff

080072f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b0a4      	sub	sp, #144	; 0x90
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007300:	2301      	movs	r3, #1
 8007302:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007306:	2300      	movs	r3, #0
 8007308:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800730a:	2300      	movs	r3, #0
 800730c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007310:	2300      	movs	r3, #0
 8007312:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007328:	2300      	movs	r3, #0
 800732a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800732e:	2301      	movs	r3, #1
 8007330:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007334:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007338:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800733a:	2300      	movs	r3, #0
 800733c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007340:	2300      	movs	r3, #0
 8007342:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007344:	2300      	movs	r3, #0
 8007346:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800734a:	2300      	movs	r3, #0
 800734c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007350:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007354:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007356:	2300      	movs	r3, #0
 8007358:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800735c:	2300      	movs	r3, #0
 800735e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007366:	2300      	movs	r3, #0
 8007368:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800736c:	2300      	movs	r3, #0
 800736e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007372:	2300      	movs	r3, #0
 8007374:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007376:	2300      	movs	r3, #0
 8007378:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800737a:	2300      	movs	r3, #0
 800737c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800737e:	2300      	movs	r3, #0
 8007380:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007384:	2300      	movs	r3, #0
 8007386:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007390:	2320      	movs	r3, #32
 8007392:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800739c:	2300      	movs	r3, #0
 800739e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80073a2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80073a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073ac:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80073b4:	2302      	movs	r3, #2
 80073b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80073c0:	2300      	movs	r3, #0
 80073c2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80073d2:	2300      	movs	r3, #0
 80073d4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80073dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff fde6 	bl	8006fb4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80073ec:	2301      	movs	r3, #1
 80073ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80073fe:	2300      	movs	r3, #0
 8007400:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007402:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007406:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007408:	2300      	movs	r3, #0
 800740a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800740c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007410:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007412:	2300      	movs	r3, #0
 8007414:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8007418:	f44f 7306 	mov.w	r3, #536	; 0x218
 800741c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800741e:	f107 0308 	add.w	r3, r7, #8
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fee1 	bl	80071ec <ETH_SetDMAConfig>
}
 800742a:	bf00      	nop
 800742c:	3790      	adds	r7, #144	; 0x90
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007444:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800744c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800744e:	f001 fb9b 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 8007452:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	4a1e      	ldr	r2, [pc, #120]	; (80074d0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d908      	bls.n	800746e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4a1d      	ldr	r2, [pc, #116]	; (80074d4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d804      	bhi.n	800746e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e027      	b.n	80074be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	4a18      	ldr	r2, [pc, #96]	; (80074d4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d908      	bls.n	8007488 <ETH_MAC_MDIO_ClkConfig+0x54>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d804      	bhi.n	8007488 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	e01a      	b.n	80074be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4a13      	ldr	r2, [pc, #76]	; (80074d8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d903      	bls.n	8007498 <ETH_MAC_MDIO_ClkConfig+0x64>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4a12      	ldr	r2, [pc, #72]	; (80074dc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d911      	bls.n	80074bc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a10      	ldr	r2, [pc, #64]	; (80074dc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d908      	bls.n	80074b2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4a0f      	ldr	r2, [pc, #60]	; (80074e0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d804      	bhi.n	80074b2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e005      	b.n	80074be <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	e000      	b.n	80074be <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80074bc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	01312cff 	.word	0x01312cff
 80074d4:	02160ebf 	.word	0x02160ebf
 80074d8:	039386ff 	.word	0x039386ff
 80074dc:	05f5e0ff 	.word	0x05f5e0ff
 80074e0:	08f0d17f 	.word	0x08f0d17f

080074e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e01d      	b.n	800752e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	68d9      	ldr	r1, [r3, #12]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4613      	mov	r3, r2
 80074fa:	005b      	lsls	r3, r3, #1
 80074fc:	4413      	add	r3, r2
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	440b      	add	r3, r1
 8007502:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2200      	movs	r2, #0
 800751a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	3206      	adds	r2, #6
 8007524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3301      	adds	r3, #1
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b03      	cmp	r3, #3
 8007532:	d9de      	bls.n	80074f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	f241 132c 	movw	r3, #4396	; 0x112c
 8007542:	4413      	add	r3, r2
 8007544:	2203      	movs	r2, #3
 8007546:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68d9      	ldr	r1, [r3, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	f241 1314 	movw	r3, #4372	; 0x1114
 8007554:	4413      	add	r3, r2
 8007556:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007572:	b480      	push	{r7}
 8007574:	b085      	sub	sp, #20
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	e024      	b.n	80075ca <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6919      	ldr	r1, [r3, #16]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4613      	mov	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4413      	add	r3, r2
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	440b      	add	r3, r1
 8007590:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2200      	movs	r2, #0
 80075a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	2200      	movs	r2, #0
 80075ae:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2200      	movs	r2, #0
 80075b4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	6879      	ldr	r1, [r7, #4]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	330a      	adds	r3, #10
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	440b      	add	r3, r1
 80075c2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3301      	adds	r3, #1
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d9d7      	bls.n	8007580 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	f241 1330 	movw	r3, #4400	; 0x1130
 80075f6:	4413      	add	r3, r2
 80075f8:	2203      	movs	r2, #3
 80075fa:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6919      	ldr	r1, [r3, #16]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	f241 131c 	movw	r3, #4380	; 0x111c
 8007608:	4413      	add	r3, r2
 800760a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	f241 1328 	movw	r3, #4392	; 0x1128
 800761c:	4413      	add	r3, r2
 800761e:	6019      	str	r1, [r3, #0]
}
 8007620:	bf00      	nop
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800762c:	b480      	push	{r7}
 800762e:	b089      	sub	sp, #36	; 0x24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007636:	2300      	movs	r3, #0
 8007638:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800763a:	4b89      	ldr	r3, [pc, #548]	; (8007860 <HAL_GPIO_Init+0x234>)
 800763c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800763e:	e194      	b.n	800796a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	2101      	movs	r1, #1
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	fa01 f303 	lsl.w	r3, r1, r3
 800764c:	4013      	ands	r3, r2
 800764e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 8186 	beq.w	8007964 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d00b      	beq.n	8007678 <HAL_GPIO_Init+0x4c>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b02      	cmp	r3, #2
 8007666:	d007      	beq.n	8007678 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800766c:	2b11      	cmp	r3, #17
 800766e:	d003      	beq.n	8007678 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	2b12      	cmp	r3, #18
 8007676:	d130      	bne.n	80076da <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	2203      	movs	r2, #3
 8007684:	fa02 f303 	lsl.w	r3, r2, r3
 8007688:	43db      	mvns	r3, r3
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	4013      	ands	r3, r2
 800768e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	fa02 f303 	lsl.w	r3, r2, r3
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	4313      	orrs	r3, r2
 80076a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076ae:	2201      	movs	r2, #1
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	fa02 f303 	lsl.w	r3, r2, r3
 80076b6:	43db      	mvns	r3, r3
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	4013      	ands	r3, r2
 80076bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	091b      	lsrs	r3, r3, #4
 80076c4:	f003 0201 	and.w	r2, r3, #1
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	2203      	movs	r2, #3
 80076e6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ea:	43db      	mvns	r3, r3
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	4013      	ands	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689a      	ldr	r2, [r3, #8]
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	4313      	orrs	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2b02      	cmp	r3, #2
 8007710:	d003      	beq.n	800771a <HAL_GPIO_Init+0xee>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b12      	cmp	r3, #18
 8007718:	d123      	bne.n	8007762 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	08da      	lsrs	r2, r3, #3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3208      	adds	r2, #8
 8007722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	220f      	movs	r2, #15
 8007732:	fa02 f303 	lsl.w	r3, r2, r3
 8007736:	43db      	mvns	r3, r3
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	4013      	ands	r3, r2
 800773c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	fa02 f303 	lsl.w	r3, r2, r3
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	4313      	orrs	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	08da      	lsrs	r2, r3, #3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3208      	adds	r2, #8
 800775c:	69b9      	ldr	r1, [r7, #24]
 800775e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	2203      	movs	r2, #3
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43db      	mvns	r3, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4013      	ands	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f003 0203 	and.w	r2, r3, #3
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	fa02 f303 	lsl.w	r3, r2, r3
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	4313      	orrs	r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 80e0 	beq.w	8007964 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077a4:	4b2f      	ldr	r3, [pc, #188]	; (8007864 <HAL_GPIO_Init+0x238>)
 80077a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077aa:	4a2e      	ldr	r2, [pc, #184]	; (8007864 <HAL_GPIO_Init+0x238>)
 80077ac:	f043 0302 	orr.w	r3, r3, #2
 80077b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80077b4:	4b2b      	ldr	r3, [pc, #172]	; (8007864 <HAL_GPIO_Init+0x238>)
 80077b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077c2:	4a29      	ldr	r2, [pc, #164]	; (8007868 <HAL_GPIO_Init+0x23c>)
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	089b      	lsrs	r3, r3, #2
 80077c8:	3302      	adds	r3, #2
 80077ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	220f      	movs	r2, #15
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	43db      	mvns	r3, r3
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	4013      	ands	r3, r2
 80077e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a20      	ldr	r2, [pc, #128]	; (800786c <HAL_GPIO_Init+0x240>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d052      	beq.n	8007894 <HAL_GPIO_Init+0x268>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a1f      	ldr	r2, [pc, #124]	; (8007870 <HAL_GPIO_Init+0x244>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d031      	beq.n	800785a <HAL_GPIO_Init+0x22e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a1e      	ldr	r2, [pc, #120]	; (8007874 <HAL_GPIO_Init+0x248>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d02b      	beq.n	8007856 <HAL_GPIO_Init+0x22a>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a1d      	ldr	r2, [pc, #116]	; (8007878 <HAL_GPIO_Init+0x24c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d025      	beq.n	8007852 <HAL_GPIO_Init+0x226>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a1c      	ldr	r2, [pc, #112]	; (800787c <HAL_GPIO_Init+0x250>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d01f      	beq.n	800784e <HAL_GPIO_Init+0x222>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a1b      	ldr	r2, [pc, #108]	; (8007880 <HAL_GPIO_Init+0x254>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d019      	beq.n	800784a <HAL_GPIO_Init+0x21e>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a1a      	ldr	r2, [pc, #104]	; (8007884 <HAL_GPIO_Init+0x258>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d013      	beq.n	8007846 <HAL_GPIO_Init+0x21a>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a19      	ldr	r2, [pc, #100]	; (8007888 <HAL_GPIO_Init+0x25c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00d      	beq.n	8007842 <HAL_GPIO_Init+0x216>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a18      	ldr	r2, [pc, #96]	; (800788c <HAL_GPIO_Init+0x260>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d007      	beq.n	800783e <HAL_GPIO_Init+0x212>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a17      	ldr	r2, [pc, #92]	; (8007890 <HAL_GPIO_Init+0x264>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d101      	bne.n	800783a <HAL_GPIO_Init+0x20e>
 8007836:	2309      	movs	r3, #9
 8007838:	e02d      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 800783a:	230a      	movs	r3, #10
 800783c:	e02b      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 800783e:	2308      	movs	r3, #8
 8007840:	e029      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 8007842:	2307      	movs	r3, #7
 8007844:	e027      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 8007846:	2306      	movs	r3, #6
 8007848:	e025      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 800784a:	2305      	movs	r3, #5
 800784c:	e023      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 800784e:	2304      	movs	r3, #4
 8007850:	e021      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 8007852:	2303      	movs	r3, #3
 8007854:	e01f      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 8007856:	2302      	movs	r3, #2
 8007858:	e01d      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 800785a:	2301      	movs	r3, #1
 800785c:	e01b      	b.n	8007896 <HAL_GPIO_Init+0x26a>
 800785e:	bf00      	nop
 8007860:	58000080 	.word	0x58000080
 8007864:	58024400 	.word	0x58024400
 8007868:	58000400 	.word	0x58000400
 800786c:	58020000 	.word	0x58020000
 8007870:	58020400 	.word	0x58020400
 8007874:	58020800 	.word	0x58020800
 8007878:	58020c00 	.word	0x58020c00
 800787c:	58021000 	.word	0x58021000
 8007880:	58021400 	.word	0x58021400
 8007884:	58021800 	.word	0x58021800
 8007888:	58021c00 	.word	0x58021c00
 800788c:	58022000 	.word	0x58022000
 8007890:	58022400 	.word	0x58022400
 8007894:	2300      	movs	r3, #0
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	f002 0203 	and.w	r2, r2, #3
 800789c:	0092      	lsls	r2, r2, #2
 800789e:	4093      	lsls	r3, r2
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078a6:	4938      	ldr	r1, [pc, #224]	; (8007988 <HAL_GPIO_Init+0x35c>)
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	089b      	lsrs	r3, r3, #2
 80078ac:	3302      	adds	r3, #2
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	43db      	mvns	r3, r3
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	4013      	ands	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	69ba      	ldr	r2, [r7, #24]
 80078dc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	43db      	mvns	r3, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	4013      	ands	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	43db      	mvns	r3, r3
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	4013      	ands	r3, r2
 8007918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800792e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	43db      	mvns	r3, r3
 8007942:	69ba      	ldr	r2, [r7, #24]
 8007944:	4013      	ands	r3, r2
 8007946:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800795c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	3301      	adds	r3, #1
 8007968:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	fa22 f303 	lsr.w	r3, r2, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	f47f ae63 	bne.w	8007640 <HAL_GPIO_Init+0x14>
  }
}
 800797a:	bf00      	nop
 800797c:	3724      	adds	r7, #36	; 0x24
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	58000400 	.word	0x58000400

0800798c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	807b      	strh	r3, [r7, #2]
 8007998:	4613      	mov	r3, r2
 800799a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800799c:	787b      	ldrb	r3, [r7, #1]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079a2:	887a      	ldrh	r2, [r7, #2]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80079a8:	e003      	b.n	80079b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80079aa:	887b      	ldrh	r3, [r7, #2]
 80079ac:	041a      	lsls	r2, r3, #16
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	619a      	str	r2, [r3, #24]
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	4603      	mov	r3, r0
 80079c6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80079c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d008      	beq.n	80079ea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80079d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80079e2:	88fb      	ldrh	r3, [r7, #6]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7fa f865 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80079f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f4:	b08f      	sub	sp, #60	; 0x3c
 80079f6:	af0a      	add	r7, sp, #40	; 0x28
 80079f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e116      	b.n	8007c32 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fa faf8 	bl	8002014 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2203      	movs	r2, #3
 8007a28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d102      	bne.n	8007a3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f004 fbc0 	bl	800c1c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	603b      	str	r3, [r7, #0]
 8007a4e:	687e      	ldr	r6, [r7, #4]
 8007a50:	466d      	mov	r5, sp
 8007a52:	f106 0410 	add.w	r4, r6, #16
 8007a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007a62:	e885 0003 	stmia.w	r5, {r0, r1}
 8007a66:	1d33      	adds	r3, r6, #4
 8007a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a6a:	6838      	ldr	r0, [r7, #0]
 8007a6c:	f004 fb4a 	bl	800c104 <USB_CoreInit>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e0d7      	b.n	8007c32 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f004 fbae 	bl	800c1ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]
 8007a92:	e04a      	b.n	8007b2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007a94:	7bfa      	ldrb	r2, [r7, #15]
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	1a9b      	subs	r3, r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	440b      	add	r3, r1
 8007aa2:	333d      	adds	r3, #61	; 0x3d
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007aa8:	7bfa      	ldrb	r2, [r7, #15]
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	4613      	mov	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	1a9b      	subs	r3, r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	440b      	add	r3, r1
 8007ab6:	333c      	adds	r3, #60	; 0x3c
 8007ab8:	7bfa      	ldrb	r2, [r7, #15]
 8007aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007abc:	7bfa      	ldrb	r2, [r7, #15]
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	b298      	uxth	r0, r3
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	3342      	adds	r3, #66	; 0x42
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007ad4:	7bfa      	ldrb	r2, [r7, #15]
 8007ad6:	6879      	ldr	r1, [r7, #4]
 8007ad8:	4613      	mov	r3, r2
 8007ada:	00db      	lsls	r3, r3, #3
 8007adc:	1a9b      	subs	r3, r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	440b      	add	r3, r1
 8007ae2:	333f      	adds	r3, #63	; 0x3f
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007ae8:	7bfa      	ldrb	r2, [r7, #15]
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	4613      	mov	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	1a9b      	subs	r3, r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	3344      	adds	r3, #68	; 0x44
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007afc:	7bfa      	ldrb	r2, [r7, #15]
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	4613      	mov	r3, r2
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	440b      	add	r3, r1
 8007b0a:	3348      	adds	r3, #72	; 0x48
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007b10:	7bfa      	ldrb	r2, [r7, #15]
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	4613      	mov	r3, r2
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	1a9b      	subs	r3, r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	440b      	add	r3, r1
 8007b1e:	3350      	adds	r3, #80	; 0x50
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	3301      	adds	r3, #1
 8007b28:	73fb      	strb	r3, [r7, #15]
 8007b2a:	7bfa      	ldrb	r2, [r7, #15]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d3af      	bcc.n	8007a94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b34:	2300      	movs	r3, #0
 8007b36:	73fb      	strb	r3, [r7, #15]
 8007b38:	e044      	b.n	8007bc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007b3a:	7bfa      	ldrb	r2, [r7, #15]
 8007b3c:	6879      	ldr	r1, [r7, #4]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	440b      	add	r3, r1
 8007b48:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007b50:	7bfa      	ldrb	r2, [r7, #15]
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	4613      	mov	r3, r2
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	1a9b      	subs	r3, r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	440b      	add	r3, r1
 8007b5e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007b62:	7bfa      	ldrb	r2, [r7, #15]
 8007b64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007b66:	7bfa      	ldrb	r2, [r7, #15]
 8007b68:	6879      	ldr	r1, [r7, #4]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	1a9b      	subs	r3, r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	440b      	add	r3, r1
 8007b74:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007b78:	2200      	movs	r2, #0
 8007b7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b7c:	7bfa      	ldrb	r2, [r7, #15]
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	4613      	mov	r3, r2
 8007b82:	00db      	lsls	r3, r3, #3
 8007b84:	1a9b      	subs	r3, r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	440b      	add	r3, r1
 8007b8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b92:	7bfa      	ldrb	r2, [r7, #15]
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	1a9b      	subs	r3, r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	440b      	add	r3, r1
 8007ba0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ba8:	7bfa      	ldrb	r2, [r7, #15]
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	1a9b      	subs	r3, r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	73fb      	strb	r3, [r7, #15]
 8007bc4:	7bfa      	ldrb	r2, [r7, #15]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d3b5      	bcc.n	8007b3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	687e      	ldr	r6, [r7, #4]
 8007bd6:	466d      	mov	r5, sp
 8007bd8:	f106 0410 	add.w	r4, r6, #16
 8007bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007be4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007be8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007bec:	1d33      	adds	r3, r6, #4
 8007bee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bf0:	6838      	ldr	r0, [r7, #0]
 8007bf2:	f004 fb25 	bl	800c240 <USB_DevInit>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e014      	b.n	8007c32 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d102      	bne.n	8007c26 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f80b 	bl	8007c3c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f004 fcc7 	bl	800c5be <USB_DevDisconnect>

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007c3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c6a:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <HAL_PCDEx_ActivateLPM+0x44>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	10000003 	.word	0x10000003

08007c84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c8c:	4b19      	ldr	r3, [pc, #100]	; (8007cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d00a      	beq.n	8007cae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c98:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d001      	beq.n	8007caa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e01f      	b.n	8007cea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	e01d      	b.n	8007cea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007cae:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f023 0207 	bic.w	r2, r3, #7
 8007cb6:	490f      	ldr	r1, [pc, #60]	; (8007cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007cbe:	f7fa fbc3 	bl	8002448 <HAL_GetTick>
 8007cc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cc4:	e009      	b.n	8007cda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007cc6:	f7fa fbbf 	bl	8002448 <HAL_GetTick>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	1ad3      	subs	r3, r2, r3
 8007cd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cd4:	d901      	bls.n	8007cda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e007      	b.n	8007cea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007cda:	4b06      	ldr	r3, [pc, #24]	; (8007cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce6:	d1ee      	bne.n	8007cc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	58024800 	.word	0x58024800

08007cf8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	4a04      	ldr	r2, [pc, #16]	; (8007d14 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d06:	60d3      	str	r3, [r2, #12]
}
 8007d08:	bf00      	nop
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	58024800 	.word	0x58024800

08007d18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08c      	sub	sp, #48	; 0x30
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e3ff      	b.n	800852a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 8087 	beq.w	8007e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d38:	4b99      	ldr	r3, [pc, #612]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d42:	4b97      	ldr	r3, [pc, #604]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4a:	2b10      	cmp	r3, #16
 8007d4c:	d007      	beq.n	8007d5e <HAL_RCC_OscConfig+0x46>
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	2b18      	cmp	r3, #24
 8007d52:	d110      	bne.n	8007d76 <HAL_RCC_OscConfig+0x5e>
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d10b      	bne.n	8007d76 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d5e:	4b90      	ldr	r3, [pc, #576]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d06c      	beq.n	8007e44 <HAL_RCC_OscConfig+0x12c>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d168      	bne.n	8007e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e3d9      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d7e:	d106      	bne.n	8007d8e <HAL_RCC_OscConfig+0x76>
 8007d80:	4b87      	ldr	r3, [pc, #540]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a86      	ldr	r2, [pc, #536]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d8a:	6013      	str	r3, [r2, #0]
 8007d8c:	e02e      	b.n	8007dec <HAL_RCC_OscConfig+0xd4>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10c      	bne.n	8007db0 <HAL_RCC_OscConfig+0x98>
 8007d96:	4b82      	ldr	r3, [pc, #520]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a81      	ldr	r2, [pc, #516]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007da0:	6013      	str	r3, [r2, #0]
 8007da2:	4b7f      	ldr	r3, [pc, #508]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a7e      	ldr	r2, [pc, #504]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	e01d      	b.n	8007dec <HAL_RCC_OscConfig+0xd4>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007db8:	d10c      	bne.n	8007dd4 <HAL_RCC_OscConfig+0xbc>
 8007dba:	4b79      	ldr	r3, [pc, #484]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a78      	ldr	r2, [pc, #480]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	4b76      	ldr	r3, [pc, #472]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a75      	ldr	r2, [pc, #468]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dd0:	6013      	str	r3, [r2, #0]
 8007dd2:	e00b      	b.n	8007dec <HAL_RCC_OscConfig+0xd4>
 8007dd4:	4b72      	ldr	r3, [pc, #456]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a71      	ldr	r2, [pc, #452]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	4b6f      	ldr	r3, [pc, #444]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a6e      	ldr	r2, [pc, #440]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d013      	beq.n	8007e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df4:	f7fa fb28 	bl	8002448 <HAL_GetTick>
 8007df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dfa:	e008      	b.n	8007e0e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007dfc:	f7fa fb24 	bl	8002448 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b64      	cmp	r3, #100	; 0x64
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e38d      	b.n	800852a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e0e:	4b64      	ldr	r3, [pc, #400]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0f0      	beq.n	8007dfc <HAL_RCC_OscConfig+0xe4>
 8007e1a:	e014      	b.n	8007e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1c:	f7fa fb14 	bl	8002448 <HAL_GetTick>
 8007e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e22:	e008      	b.n	8007e36 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e24:	f7fa fb10 	bl	8002448 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b64      	cmp	r3, #100	; 0x64
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e379      	b.n	800852a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e36:	4b5a      	ldr	r3, [pc, #360]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1f0      	bne.n	8007e24 <HAL_RCC_OscConfig+0x10c>
 8007e42:	e000      	b.n	8007e46 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 80ae 	beq.w	8007fb0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e54:	4b52      	ldr	r3, [pc, #328]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e5e:	4b50      	ldr	r3, [pc, #320]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d007      	beq.n	8007e7a <HAL_RCC_OscConfig+0x162>
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	2b18      	cmp	r3, #24
 8007e6e:	d13a      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x1ce>
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d135      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e7a:	4b49      	ldr	r3, [pc, #292]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0304 	and.w	r3, r3, #4
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d005      	beq.n	8007e92 <HAL_RCC_OscConfig+0x17a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e34b      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e92:	f7fa fb07 	bl	80024a4 <HAL_GetREVID>
 8007e96:	4602      	mov	r2, r0
 8007e98:	f241 0303 	movw	r3, #4099	; 0x1003
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d817      	bhi.n	8007ed0 <HAL_RCC_OscConfig+0x1b8>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b40      	cmp	r3, #64	; 0x40
 8007ea6:	d108      	bne.n	8007eba <HAL_RCC_OscConfig+0x1a2>
 8007ea8:	4b3d      	ldr	r3, [pc, #244]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007eb0:	4a3b      	ldr	r2, [pc, #236]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eb6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eb8:	e07a      	b.n	8007fb0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eba:	4b39      	ldr	r3, [pc, #228]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	031b      	lsls	r3, r3, #12
 8007ec8:	4935      	ldr	r1, [pc, #212]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ece:	e06f      	b.n	8007fb0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed0:	4b33      	ldr	r3, [pc, #204]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	061b      	lsls	r3, r3, #24
 8007ede:	4930      	ldr	r1, [pc, #192]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ee4:	e064      	b.n	8007fb0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d045      	beq.n	8007f7a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007eee:	4b2c      	ldr	r3, [pc, #176]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f023 0219 	bic.w	r2, r3, #25
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	4929      	ldr	r1, [pc, #164]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f00:	f7fa faa2 	bl	8002448 <HAL_GetTick>
 8007f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f08:	f7fa fa9e 	bl	8002448 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e307      	b.n	800852a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f1a:	4b21      	ldr	r3, [pc, #132]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f0      	beq.n	8007f08 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f26:	f7fa fabd 	bl	80024a4 <HAL_GetREVID>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	f241 0303 	movw	r3, #4099	; 0x1003
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d817      	bhi.n	8007f64 <HAL_RCC_OscConfig+0x24c>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b40      	cmp	r3, #64	; 0x40
 8007f3a:	d108      	bne.n	8007f4e <HAL_RCC_OscConfig+0x236>
 8007f3c:	4b18      	ldr	r3, [pc, #96]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007f44:	4a16      	ldr	r2, [pc, #88]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f4a:	6053      	str	r3, [r2, #4]
 8007f4c:	e030      	b.n	8007fb0 <HAL_RCC_OscConfig+0x298>
 8007f4e:	4b14      	ldr	r3, [pc, #80]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	031b      	lsls	r3, r3, #12
 8007f5c:	4910      	ldr	r1, [pc, #64]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	604b      	str	r3, [r1, #4]
 8007f62:	e025      	b.n	8007fb0 <HAL_RCC_OscConfig+0x298>
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	061b      	lsls	r3, r3, #24
 8007f72:	490b      	ldr	r1, [pc, #44]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	604b      	str	r3, [r1, #4]
 8007f78:	e01a      	b.n	8007fb0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a08      	ldr	r2, [pc, #32]	; (8007fa0 <HAL_RCC_OscConfig+0x288>)
 8007f80:	f023 0301 	bic.w	r3, r3, #1
 8007f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f86:	f7fa fa5f 	bl	8002448 <HAL_GetTick>
 8007f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f8c:	e00a      	b.n	8007fa4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f8e:	f7fa fa5b 	bl	8002448 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d903      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e2c4      	b.n	800852a <HAL_RCC_OscConfig+0x812>
 8007fa0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007fa4:	4ba4      	ldr	r3, [pc, #656]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0304 	and.w	r3, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1ee      	bne.n	8007f8e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0310 	and.w	r3, r3, #16
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80a9 	beq.w	8008110 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fbe:	4b9e      	ldr	r3, [pc, #632]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fc8:	4b9b      	ldr	r3, [pc, #620]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8007fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fcc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d007      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x2cc>
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2b18      	cmp	r3, #24
 8007fd8:	d13a      	bne.n	8008050 <HAL_RCC_OscConfig+0x338>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f003 0303 	and.w	r3, r3, #3
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d135      	bne.n	8008050 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fe4:	4b94      	ldr	r3, [pc, #592]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d005      	beq.n	8007ffc <HAL_RCC_OscConfig+0x2e4>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	2b80      	cmp	r3, #128	; 0x80
 8007ff6:	d001      	beq.n	8007ffc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e296      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ffc:	f7fa fa52 	bl	80024a4 <HAL_GetREVID>
 8008000:	4602      	mov	r2, r0
 8008002:	f241 0303 	movw	r3, #4099	; 0x1003
 8008006:	429a      	cmp	r2, r3
 8008008:	d817      	bhi.n	800803a <HAL_RCC_OscConfig+0x322>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	2b20      	cmp	r3, #32
 8008010:	d108      	bne.n	8008024 <HAL_RCC_OscConfig+0x30c>
 8008012:	4b89      	ldr	r3, [pc, #548]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800801a:	4a87      	ldr	r2, [pc, #540]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 800801c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008020:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008022:	e075      	b.n	8008110 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008024:	4b84      	ldr	r3, [pc, #528]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	069b      	lsls	r3, r3, #26
 8008032:	4981      	ldr	r1, [pc, #516]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8008034:	4313      	orrs	r3, r2
 8008036:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008038:	e06a      	b.n	8008110 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800803a:	4b7f      	ldr	r3, [pc, #508]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a1b      	ldr	r3, [r3, #32]
 8008046:	061b      	lsls	r3, r3, #24
 8008048:	497b      	ldr	r1, [pc, #492]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 800804a:	4313      	orrs	r3, r2
 800804c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800804e:	e05f      	b.n	8008110 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d042      	beq.n	80080de <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008058:	4b77      	ldr	r3, [pc, #476]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a76      	ldr	r2, [pc, #472]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 800805e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008064:	f7fa f9f0 	bl	8002448 <HAL_GetTick>
 8008068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800806a:	e008      	b.n	800807e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800806c:	f7fa f9ec 	bl	8002448 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e255      	b.n	800852a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800807e:	4b6e      	ldr	r3, [pc, #440]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008086:	2b00      	cmp	r3, #0
 8008088:	d0f0      	beq.n	800806c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800808a:	f7fa fa0b 	bl	80024a4 <HAL_GetREVID>
 800808e:	4602      	mov	r2, r0
 8008090:	f241 0303 	movw	r3, #4099	; 0x1003
 8008094:	429a      	cmp	r2, r3
 8008096:	d817      	bhi.n	80080c8 <HAL_RCC_OscConfig+0x3b0>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	2b20      	cmp	r3, #32
 800809e:	d108      	bne.n	80080b2 <HAL_RCC_OscConfig+0x39a>
 80080a0:	4b65      	ldr	r3, [pc, #404]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80080a8:	4a63      	ldr	r2, [pc, #396]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80080aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080ae:	6053      	str	r3, [r2, #4]
 80080b0:	e02e      	b.n	8008110 <HAL_RCC_OscConfig+0x3f8>
 80080b2:	4b61      	ldr	r3, [pc, #388]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	069b      	lsls	r3, r3, #26
 80080c0:	495d      	ldr	r1, [pc, #372]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	604b      	str	r3, [r1, #4]
 80080c6:	e023      	b.n	8008110 <HAL_RCC_OscConfig+0x3f8>
 80080c8:	4b5b      	ldr	r3, [pc, #364]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a1b      	ldr	r3, [r3, #32]
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	4958      	ldr	r1, [pc, #352]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	60cb      	str	r3, [r1, #12]
 80080dc:	e018      	b.n	8008110 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80080de:	4b56      	ldr	r3, [pc, #344]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a55      	ldr	r2, [pc, #340]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80080e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ea:	f7fa f9ad 	bl	8002448 <HAL_GetTick>
 80080ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080f0:	e008      	b.n	8008104 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080f2:	f7fa f9a9 	bl	8002448 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e212      	b.n	800852a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008104:	4b4c      	ldr	r3, [pc, #304]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f0      	bne.n	80080f2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0308 	and.w	r3, r3, #8
 8008118:	2b00      	cmp	r3, #0
 800811a:	d036      	beq.n	800818a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d019      	beq.n	8008158 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008124:	4b44      	ldr	r3, [pc, #272]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8008126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008128:	4a43      	ldr	r2, [pc, #268]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 800812a:	f043 0301 	orr.w	r3, r3, #1
 800812e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008130:	f7fa f98a 	bl	8002448 <HAL_GetTick>
 8008134:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008136:	e008      	b.n	800814a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008138:	f7fa f986 	bl	8002448 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b02      	cmp	r3, #2
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e1ef      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800814a:	4b3b      	ldr	r3, [pc, #236]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 800814c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <HAL_RCC_OscConfig+0x420>
 8008156:	e018      	b.n	800818a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008158:	4b37      	ldr	r3, [pc, #220]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 800815a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815c:	4a36      	ldr	r2, [pc, #216]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 800815e:	f023 0301 	bic.w	r3, r3, #1
 8008162:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008164:	f7fa f970 	bl	8002448 <HAL_GetTick>
 8008168:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800816a:	e008      	b.n	800817e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800816c:	f7fa f96c 	bl	8002448 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d901      	bls.n	800817e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	e1d5      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800817e:	4b2e      	ldr	r3, [pc, #184]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 8008180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008182:	f003 0302 	and.w	r3, r3, #2
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f0      	bne.n	800816c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0320 	and.w	r3, r3, #32
 8008192:	2b00      	cmp	r3, #0
 8008194:	d036      	beq.n	8008204 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d019      	beq.n	80081d2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800819e:	4b26      	ldr	r3, [pc, #152]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a25      	ldr	r2, [pc, #148]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80081a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081aa:	f7fa f94d 	bl	8002448 <HAL_GetTick>
 80081ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081b0:	e008      	b.n	80081c4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80081b2:	f7fa f949 	bl	8002448 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e1b2      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80081c4:	4b1c      	ldr	r3, [pc, #112]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0f0      	beq.n	80081b2 <HAL_RCC_OscConfig+0x49a>
 80081d0:	e018      	b.n	8008204 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80081d2:	4b19      	ldr	r3, [pc, #100]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a18      	ldr	r2, [pc, #96]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80081d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80081de:	f7fa f933 	bl	8002448 <HAL_GetTick>
 80081e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081e4:	e008      	b.n	80081f8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80081e6:	f7fa f92f 	bl	8002448 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e198      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081f8:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <HAL_RCC_OscConfig+0x520>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1f0      	bne.n	80081e6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8085 	beq.w	800831c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008212:	4b0a      	ldr	r3, [pc, #40]	; (800823c <HAL_RCC_OscConfig+0x524>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a09      	ldr	r2, [pc, #36]	; (800823c <HAL_RCC_OscConfig+0x524>)
 8008218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800821c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800821e:	f7fa f913 	bl	8002448 <HAL_GetTick>
 8008222:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008224:	e00c      	b.n	8008240 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008226:	f7fa f90f 	bl	8002448 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	2b64      	cmp	r3, #100	; 0x64
 8008232:	d905      	bls.n	8008240 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e178      	b.n	800852a <HAL_RCC_OscConfig+0x812>
 8008238:	58024400 	.word	0x58024400
 800823c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008240:	4b96      	ldr	r3, [pc, #600]	; (800849c <HAL_RCC_OscConfig+0x784>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0ec      	beq.n	8008226 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d106      	bne.n	8008262 <HAL_RCC_OscConfig+0x54a>
 8008254:	4b92      	ldr	r3, [pc, #584]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008258:	4a91      	ldr	r2, [pc, #580]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	6713      	str	r3, [r2, #112]	; 0x70
 8008260:	e02d      	b.n	80082be <HAL_RCC_OscConfig+0x5a6>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10c      	bne.n	8008284 <HAL_RCC_OscConfig+0x56c>
 800826a:	4b8d      	ldr	r3, [pc, #564]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	4a8c      	ldr	r2, [pc, #560]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008270:	f023 0301 	bic.w	r3, r3, #1
 8008274:	6713      	str	r3, [r2, #112]	; 0x70
 8008276:	4b8a      	ldr	r3, [pc, #552]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827a:	4a89      	ldr	r2, [pc, #548]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800827c:	f023 0304 	bic.w	r3, r3, #4
 8008280:	6713      	str	r3, [r2, #112]	; 0x70
 8008282:	e01c      	b.n	80082be <HAL_RCC_OscConfig+0x5a6>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	2b05      	cmp	r3, #5
 800828a:	d10c      	bne.n	80082a6 <HAL_RCC_OscConfig+0x58e>
 800828c:	4b84      	ldr	r3, [pc, #528]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800828e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008290:	4a83      	ldr	r2, [pc, #524]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008292:	f043 0304 	orr.w	r3, r3, #4
 8008296:	6713      	str	r3, [r2, #112]	; 0x70
 8008298:	4b81      	ldr	r3, [pc, #516]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800829a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829c:	4a80      	ldr	r2, [pc, #512]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800829e:	f043 0301 	orr.w	r3, r3, #1
 80082a2:	6713      	str	r3, [r2, #112]	; 0x70
 80082a4:	e00b      	b.n	80082be <HAL_RCC_OscConfig+0x5a6>
 80082a6:	4b7e      	ldr	r3, [pc, #504]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	4a7d      	ldr	r2, [pc, #500]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80082ac:	f023 0301 	bic.w	r3, r3, #1
 80082b0:	6713      	str	r3, [r2, #112]	; 0x70
 80082b2:	4b7b      	ldr	r3, [pc, #492]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80082b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b6:	4a7a      	ldr	r2, [pc, #488]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80082b8:	f023 0304 	bic.w	r3, r3, #4
 80082bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d015      	beq.n	80082f2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c6:	f7fa f8bf 	bl	8002448 <HAL_GetTick>
 80082ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082cc:	e00a      	b.n	80082e4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ce:	f7fa f8bb 	bl	8002448 <HAL_GetTick>
 80082d2:	4602      	mov	r2, r0
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082dc:	4293      	cmp	r3, r2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e122      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80082e4:	4b6e      	ldr	r3, [pc, #440]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80082e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0ee      	beq.n	80082ce <HAL_RCC_OscConfig+0x5b6>
 80082f0:	e014      	b.n	800831c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082f2:	f7fa f8a9 	bl	8002448 <HAL_GetTick>
 80082f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082f8:	e00a      	b.n	8008310 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082fa:	f7fa f8a5 	bl	8002448 <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	f241 3288 	movw	r2, #5000	; 0x1388
 8008308:	4293      	cmp	r3, r2
 800830a:	d901      	bls.n	8008310 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e10c      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008310:	4b63      	ldr	r3, [pc, #396]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1ee      	bne.n	80082fa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 8101 	beq.w	8008528 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008326:	4b5e      	ldr	r3, [pc, #376]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800832e:	2b18      	cmp	r3, #24
 8008330:	f000 80bc 	beq.w	80084ac <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	2b02      	cmp	r3, #2
 800833a:	f040 8095 	bne.w	8008468 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800833e:	4b58      	ldr	r3, [pc, #352]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a57      	ldr	r2, [pc, #348]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834a:	f7fa f87d 	bl	8002448 <HAL_GetTick>
 800834e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008350:	e008      	b.n	8008364 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008352:	f7fa f879 	bl	8002448 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e0e2      	b.n	800852a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008364:	4b4e      	ldr	r3, [pc, #312]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1f0      	bne.n	8008352 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008370:	4b4b      	ldr	r3, [pc, #300]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008374:	4b4b      	ldr	r3, [pc, #300]	; (80084a4 <HAL_RCC_OscConfig+0x78c>)
 8008376:	4013      	ands	r3, r2
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008380:	0112      	lsls	r2, r2, #4
 8008382:	430a      	orrs	r2, r1
 8008384:	4946      	ldr	r1, [pc, #280]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008386:	4313      	orrs	r3, r2
 8008388:	628b      	str	r3, [r1, #40]	; 0x28
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838e:	3b01      	subs	r3, #1
 8008390:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008398:	3b01      	subs	r3, #1
 800839a:	025b      	lsls	r3, r3, #9
 800839c:	b29b      	uxth	r3, r3
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	3b01      	subs	r3, #1
 80083a6:	041b      	lsls	r3, r3, #16
 80083a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b2:	3b01      	subs	r3, #1
 80083b4:	061b      	lsls	r3, r3, #24
 80083b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80083ba:	4939      	ldr	r1, [pc, #228]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80083c0:	4b37      	ldr	r3, [pc, #220]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	4a36      	ldr	r2, [pc, #216]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80083c6:	f023 0301 	bic.w	r3, r3, #1
 80083ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80083cc:	4b34      	ldr	r3, [pc, #208]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80083ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d0:	4b35      	ldr	r3, [pc, #212]	; (80084a8 <HAL_RCC_OscConfig+0x790>)
 80083d2:	4013      	ands	r3, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083d8:	00d2      	lsls	r2, r2, #3
 80083da:	4931      	ldr	r1, [pc, #196]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80083e0:	4b2f      	ldr	r3, [pc, #188]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	f023 020c 	bic.w	r2, r3, #12
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	492c      	ldr	r1, [pc, #176]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083f2:	4b2b      	ldr	r3, [pc, #172]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 80083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f6:	f023 0202 	bic.w	r2, r3, #2
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fe:	4928      	ldr	r1, [pc, #160]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008400:	4313      	orrs	r3, r2
 8008402:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008404:	4b26      	ldr	r3, [pc, #152]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	4a25      	ldr	r2, [pc, #148]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800840a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800840e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008410:	4b23      	ldr	r3, [pc, #140]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	4a22      	ldr	r2, [pc, #136]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800841a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800841c:	4b20      	ldr	r3, [pc, #128]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	4a1f      	ldr	r2, [pc, #124]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008422:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008426:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008428:	4b1d      	ldr	r3, [pc, #116]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	4a1c      	ldr	r2, [pc, #112]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800842e:	f043 0301 	orr.w	r3, r3, #1
 8008432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008434:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a19      	ldr	r2, [pc, #100]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800843a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800843e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008440:	f7fa f802 	bl	8002448 <HAL_GetTick>
 8008444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008448:	f7f9 fffe 	bl	8002448 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e067      	b.n	800852a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800845a:	4b11      	ldr	r3, [pc, #68]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0f0      	beq.n	8008448 <HAL_RCC_OscConfig+0x730>
 8008466:	e05f      	b.n	8008528 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008468:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a0c      	ldr	r2, [pc, #48]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 800846e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008474:	f7f9 ffe8 	bl	8002448 <HAL_GetTick>
 8008478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800847c:	f7f9 ffe4 	bl	8002448 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e04d      	b.n	800852a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800848e:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <HAL_RCC_OscConfig+0x788>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f0      	bne.n	800847c <HAL_RCC_OscConfig+0x764>
 800849a:	e045      	b.n	8008528 <HAL_RCC_OscConfig+0x810>
 800849c:	58024800 	.word	0x58024800
 80084a0:	58024400 	.word	0x58024400
 80084a4:	fffffc0c 	.word	0xfffffc0c
 80084a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80084ac:	4b21      	ldr	r3, [pc, #132]	; (8008534 <HAL_RCC_OscConfig+0x81c>)
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80084b2:	4b20      	ldr	r3, [pc, #128]	; (8008534 <HAL_RCC_OscConfig+0x81c>)
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d031      	beq.n	8008524 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f003 0203 	and.w	r2, r3, #3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d12a      	bne.n	8008524 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084da:	429a      	cmp	r2, r3
 80084dc:	d122      	bne.n	8008524 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d11a      	bne.n	8008524 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	0a5b      	lsrs	r3, r3, #9
 80084f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d111      	bne.n	8008524 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	0c1b      	lsrs	r3, r3, #16
 8008504:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800850e:	429a      	cmp	r2, r3
 8008510:	d108      	bne.n	8008524 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	0e1b      	lsrs	r3, r3, #24
 8008516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008520:	429a      	cmp	r2, r3
 8008522:	d001      	beq.n	8008528 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3730      	adds	r7, #48	; 0x30
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400

08008538 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e19c      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800854c:	4b8a      	ldr	r3, [pc, #552]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 030f 	and.w	r3, r3, #15
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d910      	bls.n	800857c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800855a:	4b87      	ldr	r3, [pc, #540]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f023 020f 	bic.w	r2, r3, #15
 8008562:	4985      	ldr	r1, [pc, #532]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	4313      	orrs	r3, r2
 8008568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800856a:	4b83      	ldr	r3, [pc, #524]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d001      	beq.n	800857c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e184      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d010      	beq.n	80085aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	4b7b      	ldr	r3, [pc, #492]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008594:	429a      	cmp	r2, r3
 8008596:	d908      	bls.n	80085aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008598:	4b78      	ldr	r3, [pc, #480]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	4975      	ldr	r1, [pc, #468]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d010      	beq.n	80085d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	695a      	ldr	r2, [r3, #20]
 80085ba:	4b70      	ldr	r3, [pc, #448]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d908      	bls.n	80085d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085c6:	4b6d      	ldr	r3, [pc, #436]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	695b      	ldr	r3, [r3, #20]
 80085d2:	496a      	ldr	r1, [pc, #424]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0310 	and.w	r3, r3, #16
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d010      	beq.n	8008606 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	4b64      	ldr	r3, [pc, #400]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d908      	bls.n	8008606 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085f4:	4b61      	ldr	r3, [pc, #388]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	495e      	ldr	r1, [pc, #376]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008602:	4313      	orrs	r3, r2
 8008604:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0320 	and.w	r3, r3, #32
 800860e:	2b00      	cmp	r3, #0
 8008610:	d010      	beq.n	8008634 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69da      	ldr	r2, [r3, #28]
 8008616:	4b59      	ldr	r3, [pc, #356]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800861e:	429a      	cmp	r2, r3
 8008620:	d908      	bls.n	8008634 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008622:	4b56      	ldr	r3, [pc, #344]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	4953      	ldr	r1, [pc, #332]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008630:	4313      	orrs	r3, r2
 8008632:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d010      	beq.n	8008662 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	4b4d      	ldr	r3, [pc, #308]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	f003 030f 	and.w	r3, r3, #15
 800864c:	429a      	cmp	r2, r3
 800864e:	d908      	bls.n	8008662 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008650:	4b4a      	ldr	r3, [pc, #296]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	f023 020f 	bic.w	r2, r3, #15
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	4947      	ldr	r1, [pc, #284]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800865e:	4313      	orrs	r3, r2
 8008660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d055      	beq.n	800871a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800866e:	4b43      	ldr	r3, [pc, #268]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	4940      	ldr	r1, [pc, #256]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800867c:	4313      	orrs	r3, r2
 800867e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d107      	bne.n	8008698 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008688:	4b3c      	ldr	r3, [pc, #240]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d121      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e0f6      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	2b03      	cmp	r3, #3
 800869e:	d107      	bne.n	80086b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086a0:	4b36      	ldr	r3, [pc, #216]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d115      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0ea      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d107      	bne.n	80086c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086b8:	4b30      	ldr	r3, [pc, #192]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d109      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e0de      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086c8:	4b2c      	ldr	r3, [pc, #176]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e0d6      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086d8:	4b28      	ldr	r3, [pc, #160]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f023 0207 	bic.w	r2, r3, #7
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4925      	ldr	r1, [pc, #148]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ea:	f7f9 fead 	bl	8002448 <HAL_GetTick>
 80086ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086f0:	e00a      	b.n	8008708 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086f2:	f7f9 fea9 	bl	8002448 <HAL_GetTick>
 80086f6:	4602      	mov	r2, r0
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008700:	4293      	cmp	r3, r2
 8008702:	d901      	bls.n	8008708 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e0be      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008708:	4b1c      	ldr	r3, [pc, #112]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	429a      	cmp	r2, r3
 8008718:	d1eb      	bne.n	80086f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d010      	beq.n	8008748 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	4b14      	ldr	r3, [pc, #80]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	429a      	cmp	r2, r3
 8008734:	d208      	bcs.n	8008748 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008736:	4b11      	ldr	r3, [pc, #68]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f023 020f 	bic.w	r2, r3, #15
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	490e      	ldr	r1, [pc, #56]	; (800877c <HAL_RCC_ClockConfig+0x244>)
 8008744:	4313      	orrs	r3, r2
 8008746:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008748:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	429a      	cmp	r2, r3
 8008754:	d214      	bcs.n	8008780 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008756:	4b08      	ldr	r3, [pc, #32]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f023 020f 	bic.w	r2, r3, #15
 800875e:	4906      	ldr	r1, [pc, #24]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	4313      	orrs	r3, r2
 8008764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008766:	4b04      	ldr	r3, [pc, #16]	; (8008778 <HAL_RCC_ClockConfig+0x240>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	429a      	cmp	r2, r3
 8008772:	d005      	beq.n	8008780 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e086      	b.n	8008886 <HAL_RCC_ClockConfig+0x34e>
 8008778:	52002000 	.word	0x52002000
 800877c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d010      	beq.n	80087ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	4b3f      	ldr	r3, [pc, #252]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008798:	429a      	cmp	r2, r3
 800879a:	d208      	bcs.n	80087ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800879c:	4b3c      	ldr	r3, [pc, #240]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	4939      	ldr	r1, [pc, #228]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d010      	beq.n	80087dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	4b34      	ldr	r3, [pc, #208]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d208      	bcs.n	80087dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087ca:	4b31      	ldr	r3, [pc, #196]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	492e      	ldr	r1, [pc, #184]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d010      	beq.n	800880a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699a      	ldr	r2, [r3, #24]
 80087ec:	4b28      	ldr	r3, [pc, #160]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d208      	bcs.n	800880a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80087f8:	4b25      	ldr	r3, [pc, #148]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 80087fa:	69db      	ldr	r3, [r3, #28]
 80087fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	4922      	ldr	r1, [pc, #136]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008806:	4313      	orrs	r3, r2
 8008808:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0320 	and.w	r3, r3, #32
 8008812:	2b00      	cmp	r3, #0
 8008814:	d010      	beq.n	8008838 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	69da      	ldr	r2, [r3, #28]
 800881a:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008822:	429a      	cmp	r2, r3
 8008824:	d208      	bcs.n	8008838 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008826:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	4917      	ldr	r1, [pc, #92]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008834:	4313      	orrs	r3, r2
 8008836:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008838:	f000 f834 	bl	80088a4 <HAL_RCC_GetSysClockFreq>
 800883c:	4601      	mov	r1, r0
 800883e:	4b14      	ldr	r3, [pc, #80]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	4a12      	ldr	r2, [pc, #72]	; (8008894 <HAL_RCC_ClockConfig+0x35c>)
 800884a:	5cd3      	ldrb	r3, [r2, r3]
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	fa21 f303 	lsr.w	r3, r1, r3
 8008854:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008856:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <HAL_RCC_ClockConfig+0x358>)
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	f003 030f 	and.w	r3, r3, #15
 800885e:	4a0d      	ldr	r2, [pc, #52]	; (8008894 <HAL_RCC_ClockConfig+0x35c>)
 8008860:	5cd3      	ldrb	r3, [r2, r3]
 8008862:	f003 031f 	and.w	r3, r3, #31
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	fa22 f303 	lsr.w	r3, r2, r3
 800886c:	4a0a      	ldr	r2, [pc, #40]	; (8008898 <HAL_RCC_ClockConfig+0x360>)
 800886e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <HAL_RCC_ClockConfig+0x364>)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008876:	4b0a      	ldr	r3, [pc, #40]	; (80088a0 <HAL_RCC_ClockConfig+0x368>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f7f9 fd9a 	bl	80023b4 <HAL_InitTick>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	58024400 	.word	0x58024400
 8008894:	0800ca54 	.word	0x0800ca54
 8008898:	24000008 	.word	0x24000008
 800889c:	24000004 	.word	0x24000004
 80088a0:	2400000c 	.word	0x2400000c

080088a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b089      	sub	sp, #36	; 0x24
 80088a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088aa:	4baf      	ldr	r3, [pc, #700]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088b2:	2b18      	cmp	r3, #24
 80088b4:	f200 814e 	bhi.w	8008b54 <HAL_RCC_GetSysClockFreq+0x2b0>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	08008925 	.word	0x08008925
 80088c4:	08008b55 	.word	0x08008b55
 80088c8:	08008b55 	.word	0x08008b55
 80088cc:	08008b55 	.word	0x08008b55
 80088d0:	08008b55 	.word	0x08008b55
 80088d4:	08008b55 	.word	0x08008b55
 80088d8:	08008b55 	.word	0x08008b55
 80088dc:	08008b55 	.word	0x08008b55
 80088e0:	0800894b 	.word	0x0800894b
 80088e4:	08008b55 	.word	0x08008b55
 80088e8:	08008b55 	.word	0x08008b55
 80088ec:	08008b55 	.word	0x08008b55
 80088f0:	08008b55 	.word	0x08008b55
 80088f4:	08008b55 	.word	0x08008b55
 80088f8:	08008b55 	.word	0x08008b55
 80088fc:	08008b55 	.word	0x08008b55
 8008900:	08008951 	.word	0x08008951
 8008904:	08008b55 	.word	0x08008b55
 8008908:	08008b55 	.word	0x08008b55
 800890c:	08008b55 	.word	0x08008b55
 8008910:	08008b55 	.word	0x08008b55
 8008914:	08008b55 	.word	0x08008b55
 8008918:	08008b55 	.word	0x08008b55
 800891c:	08008b55 	.word	0x08008b55
 8008920:	08008957 	.word	0x08008957
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008924:	4b90      	ldr	r3, [pc, #576]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0320 	and.w	r3, r3, #32
 800892c:	2b00      	cmp	r3, #0
 800892e:	d009      	beq.n	8008944 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008930:	4b8d      	ldr	r3, [pc, #564]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	08db      	lsrs	r3, r3, #3
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	4a8c      	ldr	r2, [pc, #560]	; (8008b6c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800893c:	fa22 f303 	lsr.w	r3, r2, r3
 8008940:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008942:	e10a      	b.n	8008b5a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008944:	4b89      	ldr	r3, [pc, #548]	; (8008b6c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8008946:	61bb      	str	r3, [r7, #24]
    break;
 8008948:	e107      	b.n	8008b5a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800894a:	4b89      	ldr	r3, [pc, #548]	; (8008b70 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800894c:	61bb      	str	r3, [r7, #24]
    break;
 800894e:	e104      	b.n	8008b5a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008950:	4b88      	ldr	r3, [pc, #544]	; (8008b74 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8008952:	61bb      	str	r3, [r7, #24]
    break;
 8008954:	e101      	b.n	8008b5a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008956:	4b84      	ldr	r3, [pc, #528]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	f003 0303 	and.w	r3, r3, #3
 800895e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008960:	4b81      	ldr	r3, [pc, #516]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	091b      	lsrs	r3, r3, #4
 8008966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800896a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800896c:	4b7e      	ldr	r3, [pc, #504]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	f003 0301 	and.w	r3, r3, #1
 8008974:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008976:	4b7c      	ldr	r3, [pc, #496]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897a:	08db      	lsrs	r3, r3, #3
 800897c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	fb02 f303 	mul.w	r3, r2, r3
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80da 	beq.w	8008b4e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d05a      	beq.n	8008a56 <HAL_RCC_GetSysClockFreq+0x1b2>
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d302      	bcc.n	80089aa <HAL_RCC_GetSysClockFreq+0x106>
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d078      	beq.n	8008a9a <HAL_RCC_GetSysClockFreq+0x1f6>
 80089a8:	e099      	b.n	8008ade <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089aa:	4b6f      	ldr	r3, [pc, #444]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d02d      	beq.n	8008a12 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089b6:	4b6c      	ldr	r3, [pc, #432]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	08db      	lsrs	r3, r3, #3
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	4a6a      	ldr	r2, [pc, #424]	; (8008b6c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80089c2:	fa22 f303 	lsr.w	r3, r2, r3
 80089c6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	ee07 3a90 	vmov	s15, r3
 80089d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e0:	4b61      	ldr	r3, [pc, #388]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e8:	ee07 3a90 	vmov	s15, r3
 80089ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80089f4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>
 80089f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008a10:	e087      	b.n	8008b22 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	ee07 3a90 	vmov	s15, r3
 8008a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8008b7c <HAL_RCC_GetSysClockFreq+0x2d8>
 8008a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a24:	4b50      	ldr	r3, [pc, #320]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a34:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a38:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a54:	e065      	b.n	8008b22 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	ee07 3a90 	vmov	s15, r3
 8008a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a60:	eddf 6a47 	vldr	s13, [pc, #284]	; 8008b80 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a68:	4b3f      	ldr	r3, [pc, #252]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a70:	ee07 3a90 	vmov	s15, r3
 8008a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a78:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a7c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a98:	e043      	b.n	8008b22 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	ee07 3a90 	vmov	s15, r3
 8008aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008b84 <HAL_RCC_GetSysClockFreq+0x2e0>
 8008aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aac:	4b2e      	ldr	r3, [pc, #184]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab4:	ee07 3a90 	vmov	s15, r3
 8008ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008abc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ac0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008adc:	e021      	b.n	8008b22 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	ee07 3a90 	vmov	s15, r3
 8008ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008b80 <HAL_RCC_GetSysClockFreq+0x2dc>
 8008aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af0:	4b1d      	ldr	r3, [pc, #116]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af8:	ee07 3a90 	vmov	s15, r3
 8008afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b00:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b04:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8008b78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8008b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b20:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008b22:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8008b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b26:	0a5b      	lsrs	r3, r3, #9
 8008b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b46:	ee17 3a90 	vmov	r3, s15
 8008b4a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008b4c:	e005      	b.n	8008b5a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	61bb      	str	r3, [r7, #24]
    break;
 8008b52:	e002      	b.n	8008b5a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8008b54:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8008b56:	61bb      	str	r3, [r7, #24]
    break;
 8008b58:	bf00      	nop
  }

  return sysclockfreq;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3724      	adds	r7, #36	; 0x24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	58024400 	.word	0x58024400
 8008b6c:	03d09000 	.word	0x03d09000
 8008b70:	003d0900 	.word	0x003d0900
 8008b74:	007a1200 	.word	0x007a1200
 8008b78:	46000000 	.word	0x46000000
 8008b7c:	4c742400 	.word	0x4c742400
 8008b80:	4a742400 	.word	0x4a742400
 8008b84:	4af42400 	.word	0x4af42400

08008b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008b8e:	f7ff fe89 	bl	80088a4 <HAL_RCC_GetSysClockFreq>
 8008b92:	4601      	mov	r1, r0
 8008b94:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	0a1b      	lsrs	r3, r3, #8
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	4a0f      	ldr	r2, [pc, #60]	; (8008bdc <HAL_RCC_GetHCLKFreq+0x54>)
 8008ba0:	5cd3      	ldrb	r3, [r2, r3]
 8008ba2:	f003 031f 	and.w	r3, r3, #31
 8008ba6:	fa21 f303 	lsr.w	r3, r1, r3
 8008baa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <HAL_RCC_GetHCLKFreq+0x54>)
 8008bb6:	5cd3      	ldrb	r3, [r2, r3]
 8008bb8:	f003 031f 	and.w	r3, r3, #31
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc2:	4a07      	ldr	r2, [pc, #28]	; (8008be0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bc6:	4a07      	ldr	r2, [pc, #28]	; (8008be4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008bcc:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <HAL_RCC_GetHCLKFreq+0x58>)
 8008bce:	681b      	ldr	r3, [r3, #0]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	0800ca54 	.word	0x0800ca54
 8008be0:	24000008 	.word	0x24000008
 8008be4:	24000004 	.word	0x24000004

08008be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008bec:	f7ff ffcc 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 8008bf0:	4601      	mov	r1, r0
 8008bf2:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	091b      	lsrs	r3, r3, #4
 8008bf8:	f003 0307 	and.w	r3, r3, #7
 8008bfc:	4a04      	ldr	r2, [pc, #16]	; (8008c10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008bfe:	5cd3      	ldrb	r3, [r2, r3]
 8008c00:	f003 031f 	and.w	r3, r3, #31
 8008c04:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	58024400 	.word	0x58024400
 8008c10:	0800ca54 	.word	0x0800ca54

08008c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c18:	f7ff ffb6 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 8008c1c:	4601      	mov	r1, r0
 8008c1e:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	0a1b      	lsrs	r3, r3, #8
 8008c24:	f003 0307 	and.w	r3, r3, #7
 8008c28:	4a04      	ldr	r2, [pc, #16]	; (8008c3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c2a:	5cd3      	ldrb	r3, [r2, r3]
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	58024400 	.word	0x58024400
 8008c3c:	0800ca54 	.word	0x0800ca54

08008c40 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c48:	2300      	movs	r3, #0
 8008c4a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d03d      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c64:	d013      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c6a:	d802      	bhi.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d007      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8008c70:	e01f      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c76:	d013      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8008c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c7c:	d01c      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008c7e:	e018      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c80:	4baf      	ldr	r3, [pc, #700]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	4aae      	ldr	r2, [pc, #696]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c8c:	e015      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3304      	adds	r3, #4
 8008c92:	2102      	movs	r1, #2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 fd33 	bl	800a700 <RCCEx_PLL2_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008c9e:	e00c      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3324      	adds	r3, #36	; 0x24
 8008ca4:	2102      	movs	r1, #2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 fddc 	bl	800a864 <RCCEx_PLL3_Config>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008cb0:	e003      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb6:	e000      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8008cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008cc0:	4b9f      	ldr	r3, [pc, #636]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ccc:	499c      	ldr	r1, [pc, #624]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	650b      	str	r3, [r1, #80]	; 0x50
 8008cd2:	e001      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d03d      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d826      	bhi.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8008cec:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8008cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf2:	bf00      	nop
 8008cf4:	08008d09 	.word	0x08008d09
 8008cf8:	08008d17 	.word	0x08008d17
 8008cfc:	08008d29 	.word	0x08008d29
 8008d00:	08008d41 	.word	0x08008d41
 8008d04:	08008d41 	.word	0x08008d41
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d08:	4b8d      	ldr	r3, [pc, #564]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4a8c      	ldr	r2, [pc, #560]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d14:	e015      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 fcef 	bl	800a700 <RCCEx_PLL2_Config>
 8008d22:	4603      	mov	r3, r0
 8008d24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d26:	e00c      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 fd98 	bl	800a864 <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d38:	e003      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3e:	e000      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8008d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d48:	4b7d      	ldr	r3, [pc, #500]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4c:	f023 0207 	bic.w	r2, r3, #7
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d54:	497a      	ldr	r1, [pc, #488]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	650b      	str	r3, [r1, #80]	; 0x50
 8008d5a:	e001      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d03e      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d70:	2b80      	cmp	r3, #128	; 0x80
 8008d72:	d01c      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008d74:	2b80      	cmp	r3, #128	; 0x80
 8008d76:	d804      	bhi.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d008      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008d7c:	2b40      	cmp	r3, #64	; 0x40
 8008d7e:	d00d      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008d80:	e01e      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008d82:	2bc0      	cmp	r3, #192	; 0xc0
 8008d84:	d01f      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d8a:	d01e      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008d8c:	e018      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d8e:	4b6c      	ldr	r3, [pc, #432]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	4a6b      	ldr	r2, [pc, #428]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008d9a:	e017      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	2100      	movs	r1, #0
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 fcac 	bl	800a700 <RCCEx_PLL2_Config>
 8008da8:	4603      	mov	r3, r0
 8008daa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008dac:	e00e      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	3324      	adds	r3, #36	; 0x24
 8008db2:	2100      	movs	r1, #0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f001 fd55 	bl	800a864 <RCCEx_PLL3_Config>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008dbe:	e005      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc4:	e002      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e000      	b.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8008dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d109      	bne.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008dd2:	4b5b      	ldr	r3, [pc, #364]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dde:	4958      	ldr	r1, [pc, #352]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	650b      	str	r3, [r1, #80]	; 0x50
 8008de4:	e001      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d044      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e00:	d01f      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e06:	d805      	bhi.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e10:	d00e      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8008e12:	e01f      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8008e14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e18:	d01f      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8008e1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e1e:	d01e      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008e20:	e018      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e22:	4b47      	ldr	r3, [pc, #284]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e26:	4a46      	ldr	r2, [pc, #280]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e2e:	e017      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3304      	adds	r3, #4
 8008e34:	2100      	movs	r1, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f001 fc62 	bl	800a700 <RCCEx_PLL2_Config>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008e40:	e00e      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	3324      	adds	r3, #36	; 0x24
 8008e46:	2100      	movs	r1, #0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f001 fd0b 	bl	800a864 <RCCEx_PLL3_Config>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e52:	e005      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	75fb      	strb	r3, [r7, #23]
      break;
 8008e58:	e002      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008e5a:	bf00      	nop
 8008e5c:	e000      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8008e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008e66:	4b36      	ldr	r3, [pc, #216]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e74:	4932      	ldr	r1, [pc, #200]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	658b      	str	r3, [r1, #88]	; 0x58
 8008e7a:	e001      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d044      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008e92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e96:	d01f      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008e98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e9c:	d805      	bhi.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8008ea2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008ea6:	d00e      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8008ea8:	e01f      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8008eaa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008eae:	d01f      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eb4:	d01e      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008eb6:	e018      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb8:	4b21      	ldr	r3, [pc, #132]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	4a20      	ldr	r2, [pc, #128]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ec4:	e017      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	2100      	movs	r1, #0
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 fc17 	bl	800a700 <RCCEx_PLL2_Config>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008ed6:	e00e      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3324      	adds	r3, #36	; 0x24
 8008edc:	2100      	movs	r1, #0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f001 fcc0 	bl	800a864 <RCCEx_PLL3_Config>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ee8:	e005      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]
      break;
 8008eee:	e002      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008ef0:	bf00      	nop
 8008ef2:	e000      	b.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8008ef4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10a      	bne.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008efc:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f00:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f0a:	490d      	ldr	r1, [pc, #52]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	658b      	str	r3, [r1, #88]	; 0x58
 8008f10:	e001      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f12:	7dfb      	ldrb	r3, [r7, #23]
 8008f14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d035      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f26:	2b10      	cmp	r3, #16
 8008f28:	d00c      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8008f2a:	2b10      	cmp	r3, #16
 8008f2c:	d802      	bhi.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01b      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8008f32:	e017      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008f34:	2b20      	cmp	r3, #32
 8008f36:	d00c      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8008f38:	2b30      	cmp	r3, #48	; 0x30
 8008f3a:	d018      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8008f3c:	e012      	b.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8008f3e:	bf00      	nop
 8008f40:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f44:	4baf      	ldr	r3, [pc, #700]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f48:	4aae      	ldr	r2, [pc, #696]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008f50:	e00e      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	3304      	adds	r3, #4
 8008f56:	2102      	movs	r1, #2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f001 fbd1 	bl	800a700 <RCCEx_PLL2_Config>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008f62:	e005      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	75fb      	strb	r3, [r7, #23]
      break;
 8008f68:	e002      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008f6a:	bf00      	nop
 8008f6c:	e000      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8008f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008f76:	4ba3      	ldr	r3, [pc, #652]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f82:	49a0      	ldr	r1, [pc, #640]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008f88:	e001      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d042      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa2:	d01f      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8008fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa8:	d805      	bhi.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8008fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb2:	d00e      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8008fb4:	e01f      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8008fb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008fba:	d01f      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fc0:	d01e      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8008fc2:	e018      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc4:	4b8f      	ldr	r3, [pc, #572]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	4a8e      	ldr	r2, [pc, #568]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8008fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fd0:	e017      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	3304      	adds	r3, #4
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 fb91 	bl	800a700 <RCCEx_PLL2_Config>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008fe2:	e00e      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3324      	adds	r3, #36	; 0x24
 8008fe8:	2100      	movs	r1, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f001 fc3a 	bl	800a864 <RCCEx_PLL3_Config>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ff4:	e005      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8008ffa:	e002      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8008ffc:	bf00      	nop
 8008ffe:	e000      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8009000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009002:	7dfb      	ldrb	r3, [r7, #23]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009008:	4b7e      	ldr	r3, [pc, #504]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800900a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800900c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009014:	497b      	ldr	r1, [pc, #492]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009016:	4313      	orrs	r3, r2
 8009018:	650b      	str	r3, [r1, #80]	; 0x50
 800901a:	e001      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901c:	7dfb      	ldrb	r3, [r7, #23]
 800901e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009028:	2b00      	cmp	r3, #0
 800902a:	d042      	beq.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009034:	d01b      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800903a:	d805      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800903c:	2b00      	cmp	r3, #0
 800903e:	d022      	beq.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8009040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009044:	d00a      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009046:	e01b      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8009048:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800904c:	d01d      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800904e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009052:	d01c      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009054:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009058:	d01b      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800905a:	e011      	b.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3304      	adds	r3, #4
 8009060:	2101      	movs	r1, #1
 8009062:	4618      	mov	r0, r3
 8009064:	f001 fb4c 	bl	800a700 <RCCEx_PLL2_Config>
 8009068:	4603      	mov	r3, r0
 800906a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800906c:	e012      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	3324      	adds	r3, #36	; 0x24
 8009072:	2101      	movs	r1, #1
 8009074:	4618      	mov	r0, r3
 8009076:	f001 fbf5 	bl	800a864 <RCCEx_PLL3_Config>
 800907a:	4603      	mov	r3, r0
 800907c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800907e:	e009      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	75fb      	strb	r3, [r7, #23]
      break;
 8009084:	e006      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009086:	bf00      	nop
 8009088:	e004      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800908a:	bf00      	nop
 800908c:	e002      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800908e:	bf00      	nop
 8009090:	e000      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8009092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009094:	7dfb      	ldrb	r3, [r7, #23]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d109      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800909a:	4b5a      	ldr	r3, [pc, #360]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800909c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a6:	4957      	ldr	r1, [pc, #348]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80090a8:	4313      	orrs	r3, r2
 80090aa:	650b      	str	r3, [r1, #80]	; 0x50
 80090ac:	e001      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d044      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c8:	d01b      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80090ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ce:	d805      	bhi.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d022      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80090d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090d8:	d00a      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80090da:	e01b      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80090dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e0:	d01d      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80090e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090e6:	d01c      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80090e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090ec:	d01b      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80090ee:	e011      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	2101      	movs	r1, #1
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 fb02 	bl	800a700 <RCCEx_PLL2_Config>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009100:	e012      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3324      	adds	r3, #36	; 0x24
 8009106:	2101      	movs	r1, #1
 8009108:	4618      	mov	r0, r3
 800910a:	f001 fbab 	bl	800a864 <RCCEx_PLL3_Config>
 800910e:	4603      	mov	r3, r0
 8009110:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009112:	e009      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	75fb      	strb	r3, [r7, #23]
      break;
 8009118:	e006      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800911a:	bf00      	nop
 800911c:	e004      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800911e:	bf00      	nop
 8009120:	e002      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009122:	bf00      	nop
 8009124:	e000      	b.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8009126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800912e:	4b35      	ldr	r3, [pc, #212]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009132:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800913c:	4931      	ldr	r1, [pc, #196]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800913e:	4313      	orrs	r3, r2
 8009140:	658b      	str	r3, [r1, #88]	; 0x58
 8009142:	e001      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009144:	7dfb      	ldrb	r3, [r7, #23]
 8009146:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d02d      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800915c:	d005      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800915e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009162:	d009      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d013      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009168:	e00f      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800916a:	4b26      	ldr	r3, [pc, #152]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	4a25      	ldr	r2, [pc, #148]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8009170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009174:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009176:	e00c      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3304      	adds	r3, #4
 800917c:	2101      	movs	r1, #1
 800917e:	4618      	mov	r0, r3
 8009180:	f001 fabe 	bl	800a700 <RCCEx_PLL2_Config>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009188:	e003      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	75fb      	strb	r3, [r7, #23]
      break;
 800918e:	e000      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8009190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d109      	bne.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009198:	4b1a      	ldr	r3, [pc, #104]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800919a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a4:	4917      	ldr	r1, [pc, #92]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	650b      	str	r3, [r1, #80]	; 0x50
 80091aa:	e001      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
 80091ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d035      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c0:	2b03      	cmp	r3, #3
 80091c2:	d81b      	bhi.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80091c4:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80091c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ca:	bf00      	nop
 80091cc:	08009209 	.word	0x08009209
 80091d0:	080091dd 	.word	0x080091dd
 80091d4:	080091eb 	.word	0x080091eb
 80091d8:	08009209 	.word	0x08009209
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091dc:	4b09      	ldr	r3, [pc, #36]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	4a08      	ldr	r2, [pc, #32]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80091e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091e8:	e00f      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	3304      	adds	r3, #4
 80091ee:	2102      	movs	r1, #2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 fa85 	bl	800a700 <RCCEx_PLL2_Config>
 80091f6:	4603      	mov	r3, r0
 80091f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80091fa:	e006      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009200:	e003      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8009202:	bf00      	nop
 8009204:	58024400 	.word	0x58024400
      break;
 8009208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800920a:	7dfb      	ldrb	r3, [r7, #23]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d109      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009210:	4bba      	ldr	r3, [pc, #744]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009214:	f023 0203 	bic.w	r2, r3, #3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921c:	49b7      	ldr	r1, [pc, #732]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800921e:	4313      	orrs	r3, r2
 8009220:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009222:	e001      	b.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009224:	7dfb      	ldrb	r3, [r7, #23]
 8009226:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 8086 	beq.w	8009342 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009236:	4bb2      	ldr	r3, [pc, #712]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4ab1      	ldr	r2, [pc, #708]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800923c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009242:	f7f9 f901 	bl	8002448 <HAL_GetTick>
 8009246:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009248:	e009      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800924a:	f7f9 f8fd 	bl	8002448 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	2b64      	cmp	r3, #100	; 0x64
 8009256:	d902      	bls.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	75fb      	strb	r3, [r7, #23]
        break;
 800925c:	e005      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800925e:	4ba8      	ldr	r3, [pc, #672]	; (8009500 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0ef      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d166      	bne.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009270:	4ba2      	ldr	r3, [pc, #648]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009272:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800927a:	4053      	eors	r3, r2
 800927c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009280:	2b00      	cmp	r3, #0
 8009282:	d013      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009284:	4b9d      	ldr	r3, [pc, #628]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800928c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800928e:	4b9b      	ldr	r3, [pc, #620]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009292:	4a9a      	ldr	r2, [pc, #616]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009298:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800929a:	4b98      	ldr	r3, [pc, #608]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800929c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929e:	4a97      	ldr	r2, [pc, #604]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80092a6:	4a95      	ldr	r2, [pc, #596]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b6:	d115      	bne.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b8:	f7f9 f8c6 	bl	8002448 <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092be:	e00b      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092c0:	f7f9 f8c2 	bl	8002448 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d902      	bls.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	75fb      	strb	r3, [r7, #23]
            break;
 80092d6:	e005      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092d8:	4b88      	ldr	r3, [pc, #544]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0ed      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d126      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80092f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092f8:	d10d      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80092fa:	4b80      	ldr	r3, [pc, #512]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009308:	0919      	lsrs	r1, r3, #4
 800930a:	4b7e      	ldr	r3, [pc, #504]	; (8009504 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800930c:	400b      	ands	r3, r1
 800930e:	497b      	ldr	r1, [pc, #492]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009310:	4313      	orrs	r3, r2
 8009312:	610b      	str	r3, [r1, #16]
 8009314:	e005      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009316:	4b79      	ldr	r3, [pc, #484]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	4a78      	ldr	r2, [pc, #480]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800931c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009320:	6113      	str	r3, [r2, #16]
 8009322:	4b76      	ldr	r3, [pc, #472]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800932c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009330:	4972      	ldr	r1, [pc, #456]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009332:	4313      	orrs	r3, r2
 8009334:	670b      	str	r3, [r1, #112]	; 0x70
 8009336:	e004      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	75bb      	strb	r3, [r7, #22]
 800933c:	e001      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933e:	7dfb      	ldrb	r3, [r7, #23]
 8009340:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	2b00      	cmp	r3, #0
 800934c:	d07d      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009352:	2b28      	cmp	r3, #40	; 0x28
 8009354:	d866      	bhi.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8009356:	a201      	add	r2, pc, #4	; (adr r2, 800935c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800935c:	0800942b 	.word	0x0800942b
 8009360:	08009425 	.word	0x08009425
 8009364:	08009425 	.word	0x08009425
 8009368:	08009425 	.word	0x08009425
 800936c:	08009425 	.word	0x08009425
 8009370:	08009425 	.word	0x08009425
 8009374:	08009425 	.word	0x08009425
 8009378:	08009425 	.word	0x08009425
 800937c:	08009401 	.word	0x08009401
 8009380:	08009425 	.word	0x08009425
 8009384:	08009425 	.word	0x08009425
 8009388:	08009425 	.word	0x08009425
 800938c:	08009425 	.word	0x08009425
 8009390:	08009425 	.word	0x08009425
 8009394:	08009425 	.word	0x08009425
 8009398:	08009425 	.word	0x08009425
 800939c:	08009413 	.word	0x08009413
 80093a0:	08009425 	.word	0x08009425
 80093a4:	08009425 	.word	0x08009425
 80093a8:	08009425 	.word	0x08009425
 80093ac:	08009425 	.word	0x08009425
 80093b0:	08009425 	.word	0x08009425
 80093b4:	08009425 	.word	0x08009425
 80093b8:	08009425 	.word	0x08009425
 80093bc:	0800942b 	.word	0x0800942b
 80093c0:	08009425 	.word	0x08009425
 80093c4:	08009425 	.word	0x08009425
 80093c8:	08009425 	.word	0x08009425
 80093cc:	08009425 	.word	0x08009425
 80093d0:	08009425 	.word	0x08009425
 80093d4:	08009425 	.word	0x08009425
 80093d8:	08009425 	.word	0x08009425
 80093dc:	0800942b 	.word	0x0800942b
 80093e0:	08009425 	.word	0x08009425
 80093e4:	08009425 	.word	0x08009425
 80093e8:	08009425 	.word	0x08009425
 80093ec:	08009425 	.word	0x08009425
 80093f0:	08009425 	.word	0x08009425
 80093f4:	08009425 	.word	0x08009425
 80093f8:	08009425 	.word	0x08009425
 80093fc:	0800942b 	.word	0x0800942b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3304      	adds	r3, #4
 8009404:	2101      	movs	r1, #1
 8009406:	4618      	mov	r0, r3
 8009408:	f001 f97a 	bl	800a700 <RCCEx_PLL2_Config>
 800940c:	4603      	mov	r3, r0
 800940e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009410:	e00c      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	3324      	adds	r3, #36	; 0x24
 8009416:	2101      	movs	r1, #1
 8009418:	4618      	mov	r0, r3
 800941a:	f001 fa23 	bl	800a864 <RCCEx_PLL3_Config>
 800941e:	4603      	mov	r3, r0
 8009420:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009422:	e003      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	75fb      	strb	r3, [r7, #23]
      break;
 8009428:	e000      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800942a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d109      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009432:	4b32      	ldr	r3, [pc, #200]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009436:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800943e:	492f      	ldr	r1, [pc, #188]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8009440:	4313      	orrs	r3, r2
 8009442:	654b      	str	r3, [r1, #84]	; 0x54
 8009444:	e001      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009446:	7dfb      	ldrb	r3, [r7, #23]
 8009448:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d037      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800945a:	2b05      	cmp	r3, #5
 800945c:	d820      	bhi.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800945e:	a201      	add	r2, pc, #4	; (adr r2, 8009464 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8009460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009464:	080094a7 	.word	0x080094a7
 8009468:	0800947d 	.word	0x0800947d
 800946c:	0800948f 	.word	0x0800948f
 8009470:	080094a7 	.word	0x080094a7
 8009474:	080094a7 	.word	0x080094a7
 8009478:	080094a7 	.word	0x080094a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3304      	adds	r3, #4
 8009480:	2101      	movs	r1, #1
 8009482:	4618      	mov	r0, r3
 8009484:	f001 f93c 	bl	800a700 <RCCEx_PLL2_Config>
 8009488:	4603      	mov	r3, r0
 800948a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800948c:	e00c      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	3324      	adds	r3, #36	; 0x24
 8009492:	2101      	movs	r1, #1
 8009494:	4618      	mov	r0, r3
 8009496:	f001 f9e5 	bl	800a864 <RCCEx_PLL3_Config>
 800949a:	4603      	mov	r3, r0
 800949c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800949e:	e003      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	75fb      	strb	r3, [r7, #23]
      break;
 80094a4:	e000      	b.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80094a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d109      	bne.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80094b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b2:	f023 0207 	bic.w	r2, r3, #7
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ba:	4910      	ldr	r1, [pc, #64]	; (80094fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	654b      	str	r3, [r1, #84]	; 0x54
 80094c0:	e001      	b.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c2:	7dfb      	ldrb	r3, [r7, #23]
 80094c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0304 	and.w	r3, r3, #4
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d040      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094d8:	2b05      	cmp	r3, #5
 80094da:	d827      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80094dc:	a201      	add	r2, pc, #4	; (adr r2, 80094e4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	08009533 	.word	0x08009533
 80094e8:	08009509 	.word	0x08009509
 80094ec:	0800951b 	.word	0x0800951b
 80094f0:	08009533 	.word	0x08009533
 80094f4:	08009533 	.word	0x08009533
 80094f8:	08009533 	.word	0x08009533
 80094fc:	58024400 	.word	0x58024400
 8009500:	58024800 	.word	0x58024800
 8009504:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3304      	adds	r3, #4
 800950c:	2101      	movs	r1, #1
 800950e:	4618      	mov	r0, r3
 8009510:	f001 f8f6 	bl	800a700 <RCCEx_PLL2_Config>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009518:	e00c      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3324      	adds	r3, #36	; 0x24
 800951e:	2101      	movs	r1, #1
 8009520:	4618      	mov	r0, r3
 8009522:	f001 f99f 	bl	800a864 <RCCEx_PLL3_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800952a:	e003      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]
      break;
 8009530:	e000      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8009532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10a      	bne.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800953a:	4bb2      	ldr	r3, [pc, #712]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800953c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953e:	f023 0207 	bic.w	r2, r3, #7
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009548:	49ae      	ldr	r1, [pc, #696]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800954a:	4313      	orrs	r3, r2
 800954c:	658b      	str	r3, [r1, #88]	; 0x58
 800954e:	e001      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009550:	7dfb      	ldrb	r3, [r7, #23]
 8009552:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0320 	and.w	r3, r3, #32
 800955c:	2b00      	cmp	r3, #0
 800955e:	d044      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800956a:	d01b      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800956c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009570:	d805      	bhi.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d022      	beq.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8009576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800957a:	d00a      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800957c:	e01b      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800957e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009582:	d01d      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8009584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009588:	d01c      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800958a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800958e:	d01b      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8009590:	e011      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3304      	adds	r3, #4
 8009596:	2100      	movs	r1, #0
 8009598:	4618      	mov	r0, r3
 800959a:	f001 f8b1 	bl	800a700 <RCCEx_PLL2_Config>
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095a2:	e012      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3324      	adds	r3, #36	; 0x24
 80095a8:	2102      	movs	r1, #2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f001 f95a 	bl	800a864 <RCCEx_PLL3_Config>
 80095b0:	4603      	mov	r3, r0
 80095b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80095b4:	e009      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	75fb      	strb	r3, [r7, #23]
      break;
 80095ba:	e006      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80095bc:	bf00      	nop
 80095be:	e004      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80095c0:	bf00      	nop
 80095c2:	e002      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80095c4:	bf00      	nop
 80095c6:	e000      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80095c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095d0:	4b8c      	ldr	r3, [pc, #560]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80095d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095de:	4989      	ldr	r1, [pc, #548]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	654b      	str	r3, [r1, #84]	; 0x54
 80095e4:	e001      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d044      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009600:	d01b      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8009602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009606:	d805      	bhi.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d022      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800960c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009610:	d00a      	beq.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8009612:	e01b      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8009614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009618:	d01d      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800961a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800961e:	d01c      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8009620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009624:	d01b      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8009626:	e011      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3304      	adds	r3, #4
 800962c:	2100      	movs	r1, #0
 800962e:	4618      	mov	r0, r3
 8009630:	f001 f866 	bl	800a700 <RCCEx_PLL2_Config>
 8009634:	4603      	mov	r3, r0
 8009636:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009638:	e012      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3324      	adds	r3, #36	; 0x24
 800963e:	2102      	movs	r1, #2
 8009640:	4618      	mov	r0, r3
 8009642:	f001 f90f 	bl	800a864 <RCCEx_PLL3_Config>
 8009646:	4603      	mov	r3, r0
 8009648:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800964a:	e009      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	75fb      	strb	r3, [r7, #23]
      break;
 8009650:	e006      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009652:	bf00      	nop
 8009654:	e004      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8009656:	bf00      	nop
 8009658:	e002      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800965a:	bf00      	nop
 800965c:	e000      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800965e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009660:	7dfb      	ldrb	r3, [r7, #23]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10a      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009666:	4b67      	ldr	r3, [pc, #412]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800966a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009674:	4963      	ldr	r1, [pc, #396]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009676:	4313      	orrs	r3, r2
 8009678:	658b      	str	r3, [r1, #88]	; 0x58
 800967a:	e001      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
 800967e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009688:	2b00      	cmp	r3, #0
 800968a:	d044      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009692:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009696:	d01b      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8009698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800969c:	d805      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d022      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80096a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a6:	d00a      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80096a8:	e01b      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80096aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ae:	d01d      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80096b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096b4:	d01c      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80096b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096ba:	d01b      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80096bc:	e011      	b.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3304      	adds	r3, #4
 80096c2:	2100      	movs	r1, #0
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 f81b 	bl	800a700 <RCCEx_PLL2_Config>
 80096ca:	4603      	mov	r3, r0
 80096cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096ce:	e012      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3324      	adds	r3, #36	; 0x24
 80096d4:	2102      	movs	r1, #2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f001 f8c4 	bl	800a864 <RCCEx_PLL3_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80096e0:	e009      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	75fb      	strb	r3, [r7, #23]
      break;
 80096e6:	e006      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80096e8:	bf00      	nop
 80096ea:	e004      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80096ec:	bf00      	nop
 80096ee:	e002      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80096f0:	bf00      	nop
 80096f2:	e000      	b.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80096f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10a      	bne.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80096fc:	4b41      	ldr	r3, [pc, #260]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80096fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009700:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800970a:	493e      	ldr	r1, [pc, #248]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800970c:	4313      	orrs	r3, r2
 800970e:	658b      	str	r3, [r1, #88]	; 0x58
 8009710:	e001      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009712:	7dfb      	ldrb	r3, [r7, #23]
 8009714:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0308 	and.w	r3, r3, #8
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01a      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800972c:	d10a      	bne.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3324      	adds	r3, #36	; 0x24
 8009732:	2102      	movs	r1, #2
 8009734:	4618      	mov	r0, r3
 8009736:	f001 f895 	bl	800a864 <RCCEx_PLL3_Config>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009744:	4b2f      	ldr	r3, [pc, #188]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009748:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009752:	492c      	ldr	r1, [pc, #176]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009754:	4313      	orrs	r3, r2
 8009756:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0310 	and.w	r3, r3, #16
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01a      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800976a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800976e:	d10a      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	3324      	adds	r3, #36	; 0x24
 8009774:	2102      	movs	r1, #2
 8009776:	4618      	mov	r0, r3
 8009778:	f001 f874 	bl	800a864 <RCCEx_PLL3_Config>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009786:	4b1f      	ldr	r3, [pc, #124]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009794:	491b      	ldr	r1, [pc, #108]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8009796:	4313      	orrs	r3, r2
 8009798:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d032      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097b0:	d00d      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80097b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097b6:	d016      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d111      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3304      	adds	r3, #4
 80097c0:	2100      	movs	r1, #0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 ff9c 	bl	800a700 <RCCEx_PLL2_Config>
 80097c8:	4603      	mov	r3, r0
 80097ca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097cc:	e00c      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3324      	adds	r3, #36	; 0x24
 80097d2:	2102      	movs	r1, #2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 f845 	bl	800a864 <RCCEx_PLL3_Config>
 80097da:	4603      	mov	r3, r0
 80097dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80097de:	e003      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	75fb      	strb	r3, [r7, #23]
      break;
 80097e4:	e000      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80097e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10c      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097ee:	4b05      	ldr	r3, [pc, #20]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80097f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097fc:	4901      	ldr	r1, [pc, #4]	; (8009804 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	658b      	str	r3, [r1, #88]	; 0x58
 8009802:	e003      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8009804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d02f      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800981e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009822:	d00c      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009824:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009828:	d015      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800982a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800982e:	d10f      	bne.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009830:	4b79      	ldr	r3, [pc, #484]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009834:	4a78      	ldr	r2, [pc, #480]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800983a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800983c:	e00c      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	3324      	adds	r3, #36	; 0x24
 8009842:	2101      	movs	r1, #1
 8009844:	4618      	mov	r0, r3
 8009846:	f001 f80d 	bl	800a864 <RCCEx_PLL3_Config>
 800984a:	4603      	mov	r3, r0
 800984c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800984e:	e003      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	75fb      	strb	r3, [r7, #23]
      break;
 8009854:	e000      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8009856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10a      	bne.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800985e:	4b6e      	ldr	r3, [pc, #440]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009862:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800986c:	496a      	ldr	r1, [pc, #424]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800986e:	4313      	orrs	r3, r2
 8009870:	654b      	str	r3, [r1, #84]	; 0x54
 8009872:	e001      	b.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009874:	7dfb      	ldrb	r3, [r7, #23]
 8009876:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d029      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800988c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009890:	d007      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009892:	e00f      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009894:	4b60      	ldr	r3, [pc, #384]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	4a5f      	ldr	r2, [pc, #380]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800989a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800989e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098a0:	e00b      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3304      	adds	r3, #4
 80098a6:	2102      	movs	r1, #2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 ff29 	bl	800a700 <RCCEx_PLL2_Config>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80098b2:	e002      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	75fb      	strb	r3, [r7, #23]
      break;
 80098b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d109      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098c0:	4b55      	ldr	r3, [pc, #340]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80098c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098cc:	4952      	ldr	r1, [pc, #328]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80098ce:	4313      	orrs	r3, r2
 80098d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098d2:	e001      	b.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d4:	7dfb      	ldrb	r3, [r7, #23]
 80098d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00a      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	3324      	adds	r3, #36	; 0x24
 80098e8:	2102      	movs	r1, #2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 ffba 	bl	800a864 <RCCEx_PLL3_Config>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d02f      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800990a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800990e:	d00c      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009914:	d802      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8009916:	2b00      	cmp	r3, #0
 8009918:	d011      	beq.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800991a:	e00d      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800991c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009920:	d00f      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8009922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009926:	d00e      	beq.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8009928:	e006      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800992a:	4b3b      	ldr	r3, [pc, #236]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800992c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992e:	4a3a      	ldr	r2, [pc, #232]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009936:	e007      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	75fb      	strb	r3, [r7, #23]
      break;
 800993c:	e004      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800993e:	bf00      	nop
 8009940:	e002      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009942:	bf00      	nop
 8009944:	e000      	b.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8009946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800994e:	4b32      	ldr	r3, [pc, #200]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800995a:	492f      	ldr	r1, [pc, #188]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800995c:	4313      	orrs	r3, r2
 800995e:	654b      	str	r3, [r1, #84]	; 0x54
 8009960:	e001      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d008      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009972:	4b29      	ldr	r3, [pc, #164]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009976:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997e:	4926      	ldr	r1, [pc, #152]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009980:	4313      	orrs	r3, r2
 8009982:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d009      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009990:	4b21      	ldr	r3, [pc, #132]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800999e:	491e      	ldr	r1, [pc, #120]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d008      	beq.n	80099c2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099b0:	4b19      	ldr	r3, [pc, #100]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099bc:	4916      	ldr	r1, [pc, #88]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00d      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	4a11      	ldr	r2, [pc, #68]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099d8:	6113      	str	r3, [r2, #16]
 80099da:	4b0f      	ldr	r3, [pc, #60]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099dc:	691a      	ldr	r2, [r3, #16]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80099e4:	490c      	ldr	r1, [pc, #48]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099e6:	4313      	orrs	r3, r2
 80099e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	da08      	bge.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80099f2:	4b09      	ldr	r3, [pc, #36]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80099f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fe:	4906      	ldr	r1, [pc, #24]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8009a04:	7dbb      	ldrb	r3, [r7, #22]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d101      	bne.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	e000      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	58024400 	.word	0x58024400

08009a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b090      	sub	sp, #64	; 0x40
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a2a:	d150      	bne.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009a2c:	4ba1      	ldr	r3, [pc, #644]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d844      	bhi.n	8009ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8009a3c:	a201      	add	r2, pc, #4	; (adr r2, 8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a42:	bf00      	nop
 8009a44:	08009a59 	.word	0x08009a59
 8009a48:	08009a69 	.word	0x08009a69
 8009a4c:	08009a79 	.word	0x08009a79
 8009a50:	08009ac1 	.word	0x08009ac1
 8009a54:	08009a89 	.word	0x08009a89
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 fd03 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a66:	e241      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a68:	f107 0318 	add.w	r3, r7, #24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fa63 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a76:	e239      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a78:	f107 030c 	add.w	r3, r7, #12
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fba7 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a86:	e231      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a88:	4b8a      	ldr	r3, [pc, #552]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a90:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009a98:	4b87      	ldr	r3, [pc, #540]	; (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009a9c:	e226      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aa4:	d102      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8009aa6:	4b85      	ldr	r3, [pc, #532]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aaa:	e21f      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ab2:	d102      	bne.n	8009aba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8009ab4:	4b82      	ldr	r3, [pc, #520]	; (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ab8:	e218      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009abe:	e215      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009ac0:	4b80      	ldr	r3, [pc, #512]	; (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ac4:	e212      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009aca:	bf00      	nop
 8009acc:	e20e      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ad4:	d14f      	bne.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8009ad6:	4b77      	ldr	r3, [pc, #476]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ada:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009ade:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae2:	2b80      	cmp	r3, #128	; 0x80
 8009ae4:	d01c      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8009ae6:	2b80      	cmp	r3, #128	; 0x80
 8009ae8:	d804      	bhi.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d008      	beq.n	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8009aee:	2b40      	cmp	r3, #64	; 0x40
 8009af0:	d00e      	beq.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009af2:	e03c      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8009af4:	2bc0      	cmp	r3, #192	; 0xc0
 8009af6:	d037      	beq.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8009af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009afc:	d018      	beq.n	8009b30 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8009afe:	e036      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 fcaf 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b0e:	e1ed      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b10:	f107 0318 	add.w	r3, r7, #24
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fa0f 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b1e:	e1e5      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b20:	f107 030c 	add.w	r3, r7, #12
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fb53 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b2e:	e1dd      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009b30:	4b60      	ldr	r3, [pc, #384]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b38:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d102      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009b40:	4b5d      	ldr	r3, [pc, #372]	; (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009b44:	e1d2      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b4c:	d102      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8009b4e:	4b5b      	ldr	r3, [pc, #364]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b52:	e1cb      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b5a:	d102      	bne.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8009b5c:	4b58      	ldr	r3, [pc, #352]	; (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b60:	e1c4      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b66:	e1c1      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b68:	4b56      	ldr	r3, [pc, #344]	; (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b6c:	e1be      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b72:	bf00      	nop
 8009b74:	e1ba      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b7c:	d153      	bne.n	8009c26 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009b7e:	4b4d      	ldr	r3, [pc, #308]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009b86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b8e:	d01f      	beq.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b94:	d805      	bhi.n	8009ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b9e:	d00f      	beq.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8009ba0:	e03d      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8009ba2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ba6:	d037      	beq.n	8009c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bac:	d018      	beq.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8009bae:	e036      	b.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f000 fc57 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bbe:	e195      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bc0:	f107 0318 	add.w	r3, r7, #24
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f000 f9b7 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bce:	e18d      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bd0:	f107 030c 	add.w	r3, r7, #12
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f000 fafb 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bde:	e185      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009be0:	4b34      	ldr	r3, [pc, #208]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009be8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009bf0:	4b31      	ldr	r3, [pc, #196]	; (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009bf4:	e17a      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bfc:	d102      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8009bfe:	4b2f      	ldr	r3, [pc, #188]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009c00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c02:	e173      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c0a:	d102      	bne.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8009c0c:	4b2c      	ldr	r3, [pc, #176]	; (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c10:	e16c      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c16:	e169      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c18:	4b2a      	ldr	r3, [pc, #168]	; (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c1c:	e166      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c22:	bf00      	nop
 8009c24:	e162      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c2c:	d15d      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8009c2e:	4b21      	ldr	r3, [pc, #132]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c32:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009c36:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c3e:	d01f      	beq.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c44:	d805      	bhi.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00a      	beq.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009c4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c4e:	d00f      	beq.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8009c50:	e047      	b.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009c52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c56:	d041      	beq.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8009c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009c5c:	d018      	beq.n	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8009c5e:	e040      	b.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fbff 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c6e:	e13d      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c70:	f107 0318 	add.w	r3, r7, #24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 f95f 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c7e:	e135      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c80:	f107 030c 	add.w	r3, r7, #12
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 faa3 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c8e:	e12d      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009c90:	4b08      	ldr	r3, [pc, #32]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c98:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009ca0:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009ca4:	e122      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cac:	d10c      	bne.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8009cae:	4b03      	ldr	r3, [pc, #12]	; (8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cb2:	e11b      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009cb4:	58024400 	.word	0x58024400
 8009cb8:	03d09000 	.word	0x03d09000
 8009cbc:	003d0900 	.word	0x003d0900
 8009cc0:	007a1200 	.word	0x007a1200
 8009cc4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cce:	d102      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8009cd0:	4b89      	ldr	r3, [pc, #548]	; (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cd4:	e10a      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cda:	e107      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009cdc:	4b87      	ldr	r3, [pc, #540]	; (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8009cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ce0:	e104      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ce6:	bf00      	nop
 8009ce8:	e100      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf0:	d153      	bne.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009cf2:	4b83      	ldr	r3, [pc, #524]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009cfa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d02:	d01f      	beq.n	8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8009d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d08:	d805      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00a      	beq.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8009d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d12:	d00f      	beq.n	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8009d14:	e03d      	b.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8009d16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d1a:	d037      	beq.n	8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8009d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d20:	d018      	beq.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009d22:	e036      	b.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f000 fb9d 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d32:	e0db      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d34:	f107 0318 	add.w	r3, r7, #24
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 f8fd 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d42:	e0d3      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d44:	f107 030c 	add.w	r3, r7, #12
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 fa41 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d52:	e0cb      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d54:	4b6a      	ldr	r3, [pc, #424]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d102      	bne.n	8009d6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009d64:	4b67      	ldr	r3, [pc, #412]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009d68:	e0c0      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d70:	d102      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8009d72:	4b65      	ldr	r3, [pc, #404]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d76:	e0b9      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d7e:	d102      	bne.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8009d80:	4b5d      	ldr	r3, [pc, #372]	; (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d84:	e0b2      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d8a:	e0af      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d8c:	4b5b      	ldr	r3, [pc, #364]	; (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8009d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d90:	e0ac      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8009d92:	2300      	movs	r3, #0
 8009d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d96:	bf00      	nop
 8009d98:	e0a8      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009da0:	d13d      	bne.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009da2:	4b57      	ldr	r3, [pc, #348]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009daa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009db2:	d00c      	beq.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009db8:	d011      	beq.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d12b      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dbe:	f107 0318 	add.w	r3, r7, #24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 f8b8 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dcc:	e08e      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dce:	f107 030c 	add.w	r3, r7, #12
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 f9fc 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ddc:	e086      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009dde:	4b48      	ldr	r3, [pc, #288]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009de6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8009de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d102      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8009dee:	4b45      	ldr	r3, [pc, #276]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8009df2:	e07b      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8009df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dfa:	d102      	bne.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8009dfc:	4b42      	ldr	r3, [pc, #264]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e00:	e074      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8009e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e08:	d102      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8009e0a:	4b3b      	ldr	r3, [pc, #236]	; (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e0e:	e06d      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e14:	e06a      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e1a:	bf00      	nop
 8009e1c:	e066      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e24:	d11f      	bne.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009e26:	4b36      	ldr	r3, [pc, #216]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e2e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d003      	beq.n	8009e3e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8009e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e3a:	d008      	beq.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009e3c:	e00f      	b.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 fb10 	bl	800a468 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e4c:	e04e      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e4e:	f107 0318 	add.w	r3, r7, #24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f000 f870 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e5c:	e046      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e62:	bf00      	nop
 8009e64:	e042      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e6c:	d13c      	bne.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009e6e:	4b24      	ldr	r3, [pc, #144]	; (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8009e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e72:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009e76:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e7e:	d01e      	beq.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8009e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e84:	d805      	bhi.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00d      	beq.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e8e:	d00e      	beq.n	8009eae <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8009e90:	e026      	b.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8009e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e96:	d01d      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8009e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e9c:	d01d      	beq.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8009e9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ea2:	d014      	beq.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8009ea4:	e01c      	b.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ea6:	f000 f831 	bl	8009f0c <HAL_RCCEx_GetD3PCLK1Freq>
 8009eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009eac:	e01e      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eae:	f107 0318 	add.w	r3, r7, #24
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 f840 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ebc:	e016      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ebe:	f107 030c 	add.w	r3, r7, #12
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 f984 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ecc:	e00e      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8009ece:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8009ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ed2:	e00b      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ed8:	e008      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8009eda:	4b07      	ldr	r3, [pc, #28]	; (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8009edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ede:	e005      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ee4:	bf00      	nop
 8009ee6:	e001      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3740      	adds	r7, #64	; 0x40
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	007a1200 	.word	0x007a1200
 8009efc:	00bb8000 	.word	0x00bb8000
 8009f00:	58024400 	.word	0x58024400
 8009f04:	03d09000 	.word	0x03d09000
 8009f08:	003d0900 	.word	0x003d0900

08009f0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009f10:	f7fe fe3a 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 8009f14:	4601      	mov	r1, r0
 8009f16:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	091b      	lsrs	r3, r3, #4
 8009f1c:	f003 0307 	and.w	r3, r3, #7
 8009f20:	4a04      	ldr	r2, [pc, #16]	; (8009f34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009f22:	5cd3      	ldrb	r3, [r2, r3]
 8009f24:	f003 031f 	and.w	r3, r3, #31
 8009f28:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	58024400 	.word	0x58024400
 8009f34:	0800ca54 	.word	0x0800ca54

08009f38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b089      	sub	sp, #36	; 0x24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f40:	4b9d      	ldr	r3, [pc, #628]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f44:	f003 0303 	and.w	r3, r3, #3
 8009f48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009f4a:	4b9b      	ldr	r3, [pc, #620]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4e:	0b1b      	lsrs	r3, r3, #12
 8009f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f56:	4b98      	ldr	r3, [pc, #608]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5a:	091b      	lsrs	r3, r3, #4
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009f62:	4b95      	ldr	r3, [pc, #596]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f66:	08db      	lsrs	r3, r3, #3
 8009f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	fb02 f303 	mul.w	r3, r2, r3
 8009f72:	ee07 3a90 	vmov	s15, r3
 8009f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 810a 	beq.w	800a19a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d05a      	beq.n	800a042 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d302      	bcc.n	8009f96 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d078      	beq.n	800a086 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8009f94:	e099      	b.n	800a0ca <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f96:	4b88      	ldr	r3, [pc, #544]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d02d      	beq.n	8009ffe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fa2:	4b85      	ldr	r3, [pc, #532]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	08db      	lsrs	r3, r3, #3
 8009fa8:	f003 0303 	and.w	r3, r3, #3
 8009fac:	4a83      	ldr	r2, [pc, #524]	; (800a1bc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8009fae:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	ee07 3a90 	vmov	s15, r3
 8009fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	ee07 3a90 	vmov	s15, r3
 8009fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fcc:	4b7a      	ldr	r3, [pc, #488]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fd4:	ee07 3a90 	vmov	s15, r3
 8009fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fdc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fe0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8009fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009ffc:	e087      	b.n	800a10e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	ee07 3a90 	vmov	s15, r3
 800a004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a008:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800a00c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a010:	4b69      	ldr	r3, [pc, #420]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a018:	ee07 3a90 	vmov	s15, r3
 800a01c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a020:	ed97 6a03 	vldr	s12, [r7, #12]
 800a024:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a028:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a02c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a034:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a03c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a040:	e065      	b.n	800a10e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	ee07 3a90 	vmov	s15, r3
 800a048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a04c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a054:	4b58      	ldr	r3, [pc, #352]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a05c:	ee07 3a90 	vmov	s15, r3
 800a060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a064:	ed97 6a03 	vldr	s12, [r7, #12]
 800a068:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a06c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a07c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a080:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a084:	e043      	b.n	800a10e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a090:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a1cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800a094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a098:	4b47      	ldr	r3, [pc, #284]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0a0:	ee07 3a90 	vmov	s15, r3
 800a0a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a0b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0c8:	e021      	b.n	800a10e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	ee07 3a90 	vmov	s15, r3
 800a0d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800a0d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0dc:	4b36      	ldr	r3, [pc, #216]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ec:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800a0f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a104:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a108:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a10c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a10e:	4b2a      	ldr	r3, [pc, #168]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a112:	0a5b      	lsrs	r3, r3, #9
 800a114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a124:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a128:	edd7 6a07 	vldr	s13, [r7, #28]
 800a12c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a134:	ee17 2a90 	vmov	r2, s15
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a13c:	4b1e      	ldr	r3, [pc, #120]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a140:	0c1b      	lsrs	r3, r3, #16
 800a142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a152:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a156:	edd7 6a07 	vldr	s13, [r7, #28]
 800a15a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a15e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a162:	ee17 2a90 	vmov	r2, s15
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a16a:	4b13      	ldr	r3, [pc, #76]	; (800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800a16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16e:	0e1b      	lsrs	r3, r3, #24
 800a170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a174:	ee07 3a90 	vmov	s15, r3
 800a178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a180:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a184:	edd7 6a07 	vldr	s13, [r7, #28]
 800a188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a18c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a190:	ee17 2a90 	vmov	r2, s15
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a198:	e008      	b.n	800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	609a      	str	r2, [r3, #8]
}
 800a1ac:	bf00      	nop
 800a1ae:	3724      	adds	r7, #36	; 0x24
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	58024400 	.word	0x58024400
 800a1bc:	03d09000 	.word	0x03d09000
 800a1c0:	46000000 	.word	0x46000000
 800a1c4:	4c742400 	.word	0x4c742400
 800a1c8:	4a742400 	.word	0x4a742400
 800a1cc:	4af42400 	.word	0x4af42400

0800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b089      	sub	sp, #36	; 0x24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1d8:	4b9d      	ldr	r3, [pc, #628]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1dc:	f003 0303 	and.w	r3, r3, #3
 800a1e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a1e2:	4b9b      	ldr	r3, [pc, #620]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	0d1b      	lsrs	r3, r3, #20
 800a1e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a1ee:	4b98      	ldr	r3, [pc, #608]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f2:	0a1b      	lsrs	r3, r3, #8
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a1fa:	4b95      	ldr	r3, [pc, #596]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fe:	08db      	lsrs	r3, r3, #3
 800a200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	fb02 f303 	mul.w	r3, r2, r3
 800a20a:	ee07 3a90 	vmov	s15, r3
 800a20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a212:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 810a 	beq.w	800a432 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d05a      	beq.n	800a2da <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800a224:	2b01      	cmp	r3, #1
 800a226:	d302      	bcc.n	800a22e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d078      	beq.n	800a31e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800a22c:	e099      	b.n	800a362 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a22e:	4b88      	ldr	r3, [pc, #544]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d02d      	beq.n	800a296 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a23a:	4b85      	ldr	r3, [pc, #532]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	08db      	lsrs	r3, r3, #3
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	4a83      	ldr	r2, [pc, #524]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800a246:	fa22 f303 	lsr.w	r3, r2, r3
 800a24a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	ee07 3a90 	vmov	s15, r3
 800a252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	ee07 3a90 	vmov	s15, r3
 800a25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a264:	4b7a      	ldr	r3, [pc, #488]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26c:	ee07 3a90 	vmov	s15, r3
 800a270:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a274:	ed97 6a03 	vldr	s12, [r7, #12]
 800a278:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a27c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a28c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a290:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a294:	e087      	b.n	800a3a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	ee07 3a90 	vmov	s15, r3
 800a29c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800a2a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a8:	4b69      	ldr	r3, [pc, #420]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b0:	ee07 3a90 	vmov	s15, r3
 800a2b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a2c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2d8:	e065      	b.n	800a3a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	ee07 3a90 	vmov	s15, r3
 800a2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a2e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ec:	4b58      	ldr	r3, [pc, #352]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f4:	ee07 3a90 	vmov	s15, r3
 800a2f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a300:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a30c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a314:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a318:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a31c:	e043      	b.n	800a3a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	ee07 3a90 	vmov	s15, r3
 800a324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a328:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a464 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800a32c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a330:	4b47      	ldr	r3, [pc, #284]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a338:	ee07 3a90 	vmov	s15, r3
 800a33c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a340:	ed97 6a03 	vldr	s12, [r7, #12]
 800a344:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a360:	e021      	b.n	800a3a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	ee07 3a90 	vmov	s15, r3
 800a368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800a370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a374:	4b36      	ldr	r3, [pc, #216]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37c:	ee07 3a90 	vmov	s15, r3
 800a380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a384:	ed97 6a03 	vldr	s12, [r7, #12]
 800a388:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800a38c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3a4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a3a6:	4b2a      	ldr	r3, [pc, #168]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	0a5b      	lsrs	r3, r3, #9
 800a3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b0:	ee07 3a90 	vmov	s15, r3
 800a3b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3cc:	ee17 2a90 	vmov	r2, s15
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a3d4:	4b1e      	ldr	r3, [pc, #120]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d8:	0c1b      	lsrs	r3, r3, #16
 800a3da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3de:	ee07 3a90 	vmov	s15, r3
 800a3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3fa:	ee17 2a90 	vmov	r2, s15
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a402:	4b13      	ldr	r3, [pc, #76]	; (800a450 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800a404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a406:	0e1b      	lsrs	r3, r3, #24
 800a408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a40c:	ee07 3a90 	vmov	s15, r3
 800a410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a414:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a418:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a41c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a428:	ee17 2a90 	vmov	r2, s15
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a430:	e008      	b.n	800a444 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	609a      	str	r2, [r3, #8]
}
 800a444:	bf00      	nop
 800a446:	3724      	adds	r7, #36	; 0x24
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	58024400 	.word	0x58024400
 800a454:	03d09000 	.word	0x03d09000
 800a458:	46000000 	.word	0x46000000
 800a45c:	4c742400 	.word	0x4c742400
 800a460:	4a742400 	.word	0x4a742400
 800a464:	4af42400 	.word	0x4af42400

0800a468 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a468:	b480      	push	{r7}
 800a46a:	b089      	sub	sp, #36	; 0x24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a470:	4b9d      	ldr	r3, [pc, #628]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a474:	f003 0303 	and.w	r3, r3, #3
 800a478:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a47a:	4b9b      	ldr	r3, [pc, #620]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47e:	091b      	lsrs	r3, r3, #4
 800a480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a484:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a486:	4b98      	ldr	r3, [pc, #608]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a490:	4b95      	ldr	r3, [pc, #596]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a494:	08db      	lsrs	r3, r3, #3
 800a496:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	fb02 f303 	mul.w	r3, r2, r3
 800a4a0:	ee07 3a90 	vmov	s15, r3
 800a4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f000 810a 	beq.w	800a6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d05a      	beq.n	800a570 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d302      	bcc.n	800a4c4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d078      	beq.n	800a5b4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800a4c2:	e099      	b.n	800a5f8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4c4:	4b88      	ldr	r3, [pc, #544]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0320 	and.w	r3, r3, #32
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d02d      	beq.n	800a52c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4d0:	4b85      	ldr	r3, [pc, #532]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	08db      	lsrs	r3, r3, #3
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	4a84      	ldr	r2, [pc, #528]	; (800a6ec <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800a4dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	ee07 3a90 	vmov	s15, r3
 800a4e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fa:	4b7b      	ldr	r3, [pc, #492]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a50e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a526:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a52a:	e087      	b.n	800a63c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	ee07 3a90 	vmov	s15, r3
 800a532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a536:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800a53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a53e:	4b6a      	ldr	r3, [pc, #424]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a54e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a552:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a55e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a56e:	e065      	b.n	800a63c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a582:	4b59      	ldr	r3, [pc, #356]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a592:	ed97 6a03 	vldr	s12, [r7, #12]
 800a596:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5b2:	e043      	b.n	800a63c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a6fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c6:	4b48      	ldr	r3, [pc, #288]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5da:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5f6:	e021      	b.n	800a63c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	ee07 3a90 	vmov	s15, r3
 800a5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a602:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800a606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60a:	4b37      	ldr	r3, [pc, #220]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a61e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800a622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a63a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a63c:	4b2a      	ldr	r3, [pc, #168]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a640:	0a5b      	lsrs	r3, r3, #9
 800a642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a64e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a652:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a656:	edd7 6a07 	vldr	s13, [r7, #28]
 800a65a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a65e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a662:	ee17 2a90 	vmov	r2, s15
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a66a:	4b1f      	ldr	r3, [pc, #124]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66e:	0c1b      	lsrs	r3, r3, #16
 800a670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a674:	ee07 3a90 	vmov	s15, r3
 800a678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a680:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a684:	edd7 6a07 	vldr	s13, [r7, #28]
 800a688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a68c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a690:	ee17 2a90 	vmov	r2, s15
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a698:	4b13      	ldr	r3, [pc, #76]	; (800a6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800a69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69c:	0e1b      	lsrs	r3, r3, #24
 800a69e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a6ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6be:	ee17 2a90 	vmov	r2, s15
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a6c6:	e008      	b.n	800a6da <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	609a      	str	r2, [r3, #8]
}
 800a6da:	bf00      	nop
 800a6dc:	3724      	adds	r7, #36	; 0x24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	58024400 	.word	0x58024400
 800a6ec:	03d09000 	.word	0x03d09000
 800a6f0:	46000000 	.word	0x46000000
 800a6f4:	4c742400 	.word	0x4c742400
 800a6f8:	4a742400 	.word	0x4a742400
 800a6fc:	4af42400 	.word	0x4af42400

0800a700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a70e:	4b53      	ldr	r3, [pc, #332]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a712:	f003 0303 	and.w	r3, r3, #3
 800a716:	2b03      	cmp	r3, #3
 800a718:	d101      	bne.n	800a71e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e099      	b.n	800a852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a71e:	4b4f      	ldr	r3, [pc, #316]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a4e      	ldr	r2, [pc, #312]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a72a:	f7f7 fe8d 	bl	8002448 <HAL_GetTick>
 800a72e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a730:	e008      	b.n	800a744 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a732:	f7f7 fe89 	bl	8002448 <HAL_GetTick>
 800a736:	4602      	mov	r2, r0
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	1ad3      	subs	r3, r2, r3
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d901      	bls.n	800a744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e086      	b.n	800a852 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a744:	4b45      	ldr	r3, [pc, #276]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1f0      	bne.n	800a732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a750:	4b42      	ldr	r3, [pc, #264]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a754:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	031b      	lsls	r3, r3, #12
 800a75e:	493f      	ldr	r1, [pc, #252]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a760:	4313      	orrs	r3, r2
 800a762:	628b      	str	r3, [r1, #40]	; 0x28
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	3b01      	subs	r3, #1
 800a76a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	3b01      	subs	r3, #1
 800a774:	025b      	lsls	r3, r3, #9
 800a776:	b29b      	uxth	r3, r3
 800a778:	431a      	orrs	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	68db      	ldr	r3, [r3, #12]
 800a77e:	3b01      	subs	r3, #1
 800a780:	041b      	lsls	r3, r3, #16
 800a782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a786:	431a      	orrs	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	3b01      	subs	r3, #1
 800a78e:	061b      	lsls	r3, r3, #24
 800a790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a794:	4931      	ldr	r1, [pc, #196]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a796:	4313      	orrs	r3, r2
 800a798:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a79a:	4b30      	ldr	r3, [pc, #192]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	492d      	ldr	r1, [pc, #180]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a7ac:	4b2b      	ldr	r3, [pc, #172]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	f023 0220 	bic.w	r2, r3, #32
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	4928      	ldr	r1, [pc, #160]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a7be:	4b27      	ldr	r3, [pc, #156]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c2:	4a26      	ldr	r2, [pc, #152]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7c4:	f023 0310 	bic.w	r3, r3, #16
 800a7c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a7ca:	4b24      	ldr	r3, [pc, #144]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7ce:	4b24      	ldr	r3, [pc, #144]	; (800a860 <RCCEx_PLL2_Config+0x160>)
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	69d2      	ldr	r2, [r2, #28]
 800a7d6:	00d2      	lsls	r2, r2, #3
 800a7d8:	4920      	ldr	r1, [pc, #128]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a7de:	4b1f      	ldr	r3, [pc, #124]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e2:	4a1e      	ldr	r2, [pc, #120]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7e4:	f043 0310 	orr.w	r3, r3, #16
 800a7e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d106      	bne.n	800a7fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7f0:	4b1a      	ldr	r3, [pc, #104]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	4a19      	ldr	r2, [pc, #100]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a7f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7fc:	e00f      	b.n	800a81e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d106      	bne.n	800a812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a804:	4b15      	ldr	r3, [pc, #84]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a808:	4a14      	ldr	r2, [pc, #80]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a80a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a80e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a810:	e005      	b.n	800a81e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a812:	4b12      	ldr	r3, [pc, #72]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	4a11      	ldr	r2, [pc, #68]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a81c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a81e:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a0e      	ldr	r2, [pc, #56]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a82a:	f7f7 fe0d 	bl	8002448 <HAL_GetTick>
 800a82e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a830:	e008      	b.n	800a844 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a832:	f7f7 fe09 	bl	8002448 <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	d901      	bls.n	800a844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	e006      	b.n	800a852 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a844:	4b05      	ldr	r3, [pc, #20]	; (800a85c <RCCEx_PLL2_Config+0x15c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d0f0      	beq.n	800a832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400
 800a860:	ffff0007 	.word	0xffff0007

0800a864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a872:	4b53      	ldr	r3, [pc, #332]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d101      	bne.n	800a882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e099      	b.n	800a9b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a882:	4b4f      	ldr	r3, [pc, #316]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a4e      	ldr	r2, [pc, #312]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a88c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a88e:	f7f7 fddb 	bl	8002448 <HAL_GetTick>
 800a892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a894:	e008      	b.n	800a8a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a896:	f7f7 fdd7 	bl	8002448 <HAL_GetTick>
 800a89a:	4602      	mov	r2, r0
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d901      	bls.n	800a8a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e086      	b.n	800a9b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a8a8:	4b45      	ldr	r3, [pc, #276]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1f0      	bne.n	800a896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a8b4:	4b42      	ldr	r3, [pc, #264]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	051b      	lsls	r3, r3, #20
 800a8c2:	493f      	ldr	r1, [pc, #252]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	628b      	str	r3, [r1, #40]	; 0x28
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	025b      	lsls	r3, r3, #9
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	68db      	ldr	r3, [r3, #12]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	041b      	lsls	r3, r3, #16
 800a8e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8ea:	431a      	orrs	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	3b01      	subs	r3, #1
 800a8f2:	061b      	lsls	r3, r3, #24
 800a8f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8f8:	4931      	ldr	r1, [pc, #196]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8fe:	4b30      	ldr	r3, [pc, #192]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	492d      	ldr	r1, [pc, #180]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a90c:	4313      	orrs	r3, r2
 800a90e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a910:	4b2b      	ldr	r3, [pc, #172]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	4928      	ldr	r1, [pc, #160]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a91e:	4313      	orrs	r3, r2
 800a920:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a922:	4b27      	ldr	r3, [pc, #156]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a926:	4a26      	ldr	r2, [pc, #152]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a92c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a92e:	4b24      	ldr	r3, [pc, #144]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a932:	4b24      	ldr	r3, [pc, #144]	; (800a9c4 <RCCEx_PLL3_Config+0x160>)
 800a934:	4013      	ands	r3, r2
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	69d2      	ldr	r2, [r2, #28]
 800a93a:	00d2      	lsls	r2, r2, #3
 800a93c:	4920      	ldr	r1, [pc, #128]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a942:	4b1f      	ldr	r3, [pc, #124]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	4a1e      	ldr	r2, [pc, #120]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a94c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d106      	bne.n	800a962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a954:	4b1a      	ldr	r3, [pc, #104]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a958:	4a19      	ldr	r2, [pc, #100]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a95a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a95e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a960:	e00f      	b.n	800a982 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d106      	bne.n	800a976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a968:	4b15      	ldr	r3, [pc, #84]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96c:	4a14      	ldr	r2, [pc, #80]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a96e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a972:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a974:	e005      	b.n	800a982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a976:	4b12      	ldr	r3, [pc, #72]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97a:	4a11      	ldr	r2, [pc, #68]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a97c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a980:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a982:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a0e      	ldr	r2, [pc, #56]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a98c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a98e:	f7f7 fd5b 	bl	8002448 <HAL_GetTick>
 800a992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a994:	e008      	b.n	800a9a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a996:	f7f7 fd57 	bl	8002448 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d901      	bls.n	800a9a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	e006      	b.n	800a9b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a9a8:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <RCCEx_PLL3_Config+0x15c>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0f0      	beq.n	800a996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	ffff0007 	.word	0xffff0007

0800a9c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d101      	bne.n	800a9da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e049      	b.n	800aa6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d106      	bne.n	800a9f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7f7 fa8e 	bl	8001f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2202      	movs	r2, #2
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4619      	mov	r1, r3
 800aa06:	4610      	mov	r0, r2
 800aa08:	f000 f934 	bl	800ac74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
	...

0800aa78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d001      	beq.n	800aa90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e019      	b.n	800aac4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	689a      	ldr	r2, [r3, #8]
 800aa9e:	4b0c      	ldr	r3, [pc, #48]	; (800aad0 <HAL_TIM_Base_Start+0x58>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b06      	cmp	r3, #6
 800aaa8:	d00b      	beq.n	800aac2 <HAL_TIM_Base_Start+0x4a>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aab0:	d007      	beq.n	800aac2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f042 0201 	orr.w	r2, r2, #1
 800aac0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	00010007 	.word	0x00010007

0800aad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d101      	bne.n	800aaec <HAL_TIM_ConfigClockSource+0x18>
 800aae8:	2302      	movs	r3, #2
 800aaea:	e0b7      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x188>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4b57      	ldr	r3, [pc, #348]	; (800ac64 <HAL_TIM_ConfigClockSource+0x190>)
 800ab08:	4013      	ands	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b70      	cmp	r3, #112	; 0x70
 800ab22:	d02e      	beq.n	800ab82 <HAL_TIM_ConfigClockSource+0xae>
 800ab24:	2b70      	cmp	r3, #112	; 0x70
 800ab26:	d812      	bhi.n	800ab4e <HAL_TIM_ConfigClockSource+0x7a>
 800ab28:	2b30      	cmp	r3, #48	; 0x30
 800ab2a:	f000 8084 	beq.w	800ac36 <HAL_TIM_ConfigClockSource+0x162>
 800ab2e:	2b30      	cmp	r3, #48	; 0x30
 800ab30:	d806      	bhi.n	800ab40 <HAL_TIM_ConfigClockSource+0x6c>
 800ab32:	2b10      	cmp	r3, #16
 800ab34:	d07f      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x162>
 800ab36:	2b20      	cmp	r3, #32
 800ab38:	d07d      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x162>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d07b      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ab3e:	e084      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800ab40:	2b50      	cmp	r3, #80	; 0x50
 800ab42:	d048      	beq.n	800abd6 <HAL_TIM_ConfigClockSource+0x102>
 800ab44:	2b60      	cmp	r3, #96	; 0x60
 800ab46:	d056      	beq.n	800abf6 <HAL_TIM_ConfigClockSource+0x122>
 800ab48:	2b40      	cmp	r3, #64	; 0x40
 800ab4a:	d064      	beq.n	800ac16 <HAL_TIM_ConfigClockSource+0x142>
      break;
 800ab4c:	e07d      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800ab4e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab52:	d070      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x162>
 800ab54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ab58:	d809      	bhi.n	800ab6e <HAL_TIM_ConfigClockSource+0x9a>
 800ab5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab5e:	d027      	beq.n	800abb0 <HAL_TIM_ConfigClockSource+0xdc>
 800ab60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab64:	d067      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x162>
 800ab66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab6a:	d06d      	beq.n	800ac48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ab6c:	e06d      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 800ab6e:	4a3e      	ldr	r2, [pc, #248]	; (800ac68 <HAL_TIM_ConfigClockSource+0x194>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d060      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x162>
 800ab74:	4a3d      	ldr	r2, [pc, #244]	; (800ac6c <HAL_TIM_ConfigClockSource+0x198>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d05d      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x162>
 800ab7a:	4a3d      	ldr	r2, [pc, #244]	; (800ac70 <HAL_TIM_ConfigClockSource+0x19c>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d05a      	beq.n	800ac36 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800ab80:	e063      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	6899      	ldr	r1, [r3, #8]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	f000 f987 	bl	800aea4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aba4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68fa      	ldr	r2, [r7, #12]
 800abac:	609a      	str	r2, [r3, #8]
      break;
 800abae:	e04c      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6818      	ldr	r0, [r3, #0]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	6899      	ldr	r1, [r3, #8]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f000 f970 	bl	800aea4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abd2:	609a      	str	r2, [r3, #8]
      break;
 800abd4:	e039      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6818      	ldr	r0, [r3, #0]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	6859      	ldr	r1, [r3, #4]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	461a      	mov	r2, r3
 800abe4:	f000 f8e0 	bl	800ada8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2150      	movs	r1, #80	; 0x50
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f93a 	bl	800ae68 <TIM_ITRx_SetConfig>
      break;
 800abf4:	e029      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	6859      	ldr	r1, [r3, #4]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	461a      	mov	r2, r3
 800ac04:	f000 f8ff 	bl	800ae06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2160      	movs	r1, #96	; 0x60
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 f92a 	bl	800ae68 <TIM_ITRx_SetConfig>
      break;
 800ac14:	e019      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6818      	ldr	r0, [r3, #0]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	6859      	ldr	r1, [r3, #4]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	461a      	mov	r2, r3
 800ac24:	f000 f8c0 	bl	800ada8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2140      	movs	r1, #64	; 0x40
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f91a 	bl	800ae68 <TIM_ITRx_SetConfig>
      break;
 800ac34:	e009      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	4610      	mov	r0, r2
 800ac42:	f000 f911 	bl	800ae68 <TIM_ITRx_SetConfig>
      break;
 800ac46:	e000      	b.n	800ac4a <HAL_TIM_ConfigClockSource+0x176>
      break;
 800ac48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	ffceff88 	.word	0xffceff88
 800ac68:	00100030 	.word	0x00100030
 800ac6c:	00100040 	.word	0x00100040
 800ac70:	00100020 	.word	0x00100020

0800ac74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a40      	ldr	r2, [pc, #256]	; (800ad88 <TIM_Base_SetConfig+0x114>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d013      	beq.n	800acb4 <TIM_Base_SetConfig+0x40>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac92:	d00f      	beq.n	800acb4 <TIM_Base_SetConfig+0x40>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a3d      	ldr	r2, [pc, #244]	; (800ad8c <TIM_Base_SetConfig+0x118>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d00b      	beq.n	800acb4 <TIM_Base_SetConfig+0x40>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a3c      	ldr	r2, [pc, #240]	; (800ad90 <TIM_Base_SetConfig+0x11c>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d007      	beq.n	800acb4 <TIM_Base_SetConfig+0x40>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	4a3b      	ldr	r2, [pc, #236]	; (800ad94 <TIM_Base_SetConfig+0x120>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d003      	beq.n	800acb4 <TIM_Base_SetConfig+0x40>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	4a3a      	ldr	r2, [pc, #232]	; (800ad98 <TIM_Base_SetConfig+0x124>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d108      	bne.n	800acc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a2f      	ldr	r2, [pc, #188]	; (800ad88 <TIM_Base_SetConfig+0x114>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d01f      	beq.n	800ad0e <TIM_Base_SetConfig+0x9a>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd4:	d01b      	beq.n	800ad0e <TIM_Base_SetConfig+0x9a>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a2c      	ldr	r2, [pc, #176]	; (800ad8c <TIM_Base_SetConfig+0x118>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d017      	beq.n	800ad0e <TIM_Base_SetConfig+0x9a>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a2b      	ldr	r2, [pc, #172]	; (800ad90 <TIM_Base_SetConfig+0x11c>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d013      	beq.n	800ad0e <TIM_Base_SetConfig+0x9a>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	4a2a      	ldr	r2, [pc, #168]	; (800ad94 <TIM_Base_SetConfig+0x120>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d00f      	beq.n	800ad0e <TIM_Base_SetConfig+0x9a>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	4a29      	ldr	r2, [pc, #164]	; (800ad98 <TIM_Base_SetConfig+0x124>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d00b      	beq.n	800ad0e <TIM_Base_SetConfig+0x9a>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4a28      	ldr	r2, [pc, #160]	; (800ad9c <TIM_Base_SetConfig+0x128>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d007      	beq.n	800ad0e <TIM_Base_SetConfig+0x9a>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4a27      	ldr	r2, [pc, #156]	; (800ada0 <TIM_Base_SetConfig+0x12c>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d003      	beq.n	800ad0e <TIM_Base_SetConfig+0x9a>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a26      	ldr	r2, [pc, #152]	; (800ada4 <TIM_Base_SetConfig+0x130>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d108      	bne.n	800ad20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	689a      	ldr	r2, [r3, #8]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a10      	ldr	r2, [pc, #64]	; (800ad88 <TIM_Base_SetConfig+0x114>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d00f      	beq.n	800ad6c <TIM_Base_SetConfig+0xf8>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a12      	ldr	r2, [pc, #72]	; (800ad98 <TIM_Base_SetConfig+0x124>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00b      	beq.n	800ad6c <TIM_Base_SetConfig+0xf8>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a11      	ldr	r2, [pc, #68]	; (800ad9c <TIM_Base_SetConfig+0x128>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d007      	beq.n	800ad6c <TIM_Base_SetConfig+0xf8>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a10      	ldr	r2, [pc, #64]	; (800ada0 <TIM_Base_SetConfig+0x12c>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d003      	beq.n	800ad6c <TIM_Base_SetConfig+0xf8>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a0f      	ldr	r2, [pc, #60]	; (800ada4 <TIM_Base_SetConfig+0x130>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d103      	bne.n	800ad74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	691a      	ldr	r2, [r3, #16]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2201      	movs	r2, #1
 800ad78:	615a      	str	r2, [r3, #20]
}
 800ad7a:	bf00      	nop
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	40010000 	.word	0x40010000
 800ad8c:	40000400 	.word	0x40000400
 800ad90:	40000800 	.word	0x40000800
 800ad94:	40000c00 	.word	0x40000c00
 800ad98:	40010400 	.word	0x40010400
 800ad9c:	40014000 	.word	0x40014000
 800ada0:	40014400 	.word	0x40014400
 800ada4:	40014800 	.word	0x40014800

0800ada8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f023 0201 	bic.w	r2, r3, #1
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	699b      	ldr	r3, [r3, #24]
 800adca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800add2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	4313      	orrs	r3, r2
 800addc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f023 030a 	bic.w	r3, r3, #10
 800ade4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4313      	orrs	r3, r2
 800adec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	621a      	str	r2, [r3, #32]
}
 800adfa:	bf00      	nop
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b087      	sub	sp, #28
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	60f8      	str	r0, [r7, #12]
 800ae0e:	60b9      	str	r1, [r7, #8]
 800ae10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	f023 0210 	bic.w	r2, r3, #16
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	031b      	lsls	r3, r3, #12
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	621a      	str	r2, [r3, #32]
}
 800ae5a:	bf00      	nop
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
	...

0800ae68 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <TIM_ITRx_SetConfig+0x38>)
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	f043 0307 	orr.w	r3, r3, #7
 800ae8a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	609a      	str	r2, [r3, #8]
}
 800ae92:	bf00      	nop
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	ffcfff8f 	.word	0xffcfff8f

0800aea4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aebe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	021a      	lsls	r2, r3, #8
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	431a      	orrs	r2, r3
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	4313      	orrs	r3, r2
 800aed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	609a      	str	r2, [r3, #8]
}
 800aed8:	bf00      	nop
 800aeda:	371c      	adds	r7, #28
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d101      	bne.n	800aefc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aef8:	2302      	movs	r3, #2
 800aefa:	e068      	b.n	800afce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2202      	movs	r2, #2
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a2e      	ldr	r2, [pc, #184]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d004      	beq.n	800af30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a2d      	ldr	r2, [pc, #180]	; (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d108      	bne.n	800af42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800af36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	4313      	orrs	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a1e      	ldr	r2, [pc, #120]	; (800afdc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d01d      	beq.n	800afa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af6e:	d018      	beq.n	800afa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a1b      	ldr	r2, [pc, #108]	; (800afe4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d013      	beq.n	800afa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a1a      	ldr	r2, [pc, #104]	; (800afe8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00e      	beq.n	800afa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a18      	ldr	r2, [pc, #96]	; (800afec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d009      	beq.n	800afa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a13      	ldr	r2, [pc, #76]	; (800afe0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d004      	beq.n	800afa2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a14      	ldr	r2, [pc, #80]	; (800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d10c      	bne.n	800afbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	40010000 	.word	0x40010000
 800afe0:	40010400 	.word	0x40010400
 800afe4:	40000400 	.word	0x40000400
 800afe8:	40000800 	.word	0x40000800
 800afec:	40000c00 	.word	0x40000c00
 800aff0:	40001800 	.word	0x40001800

0800aff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d101      	bne.n	800b006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e042      	b.n	800b08c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d106      	bne.n	800b01e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7f6 ffb1 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2224      	movs	r2, #36	; 0x24
 800b022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f022 0201 	bic.w	r2, r2, #1
 800b034:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f82c 	bl	800b094 <UART_SetConfig>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d101      	bne.n	800b046 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e022      	b.n	800b08c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d002      	beq.n	800b054 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fdd0 	bl	800bbf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	685a      	ldr	r2, [r3, #4]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	689a      	ldr	r2, [r3, #8]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f042 0201 	orr.w	r2, r2, #1
 800b082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 fe57 	bl	800bd38 <UART_CheckIdleState>
 800b08a:	4603      	mov	r3, r0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b094:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800b098:	b08e      	sub	sp, #56	; 0x38
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	689a      	ldr	r2, [r3, #8]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	431a      	orrs	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	695b      	ldr	r3, [r3, #20]
 800b0b2:	431a      	orrs	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	69db      	ldr	r3, [r3, #28]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	4bc1      	ldr	r3, [pc, #772]	; (800b3d4 <UART_SetConfig+0x340>)
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	6812      	ldr	r2, [r2, #0]
 800b0d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b0d6:	430b      	orrs	r3, r1
 800b0d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	430a      	orrs	r2, r1
 800b0ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4ab7      	ldr	r2, [pc, #732]	; (800b3d8 <UART_SetConfig+0x344>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d004      	beq.n	800b10a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6a1b      	ldr	r3, [r3, #32]
 800b104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b106:	4313      	orrs	r3, r2
 800b108:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	689a      	ldr	r2, [r3, #8]
 800b110:	4bb2      	ldr	r3, [pc, #712]	; (800b3dc <UART_SetConfig+0x348>)
 800b112:	4013      	ands	r3, r2
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	6812      	ldr	r2, [r2, #0]
 800b118:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b11a:	430b      	orrs	r3, r1
 800b11c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	f023 010f 	bic.w	r1, r3, #15
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	430a      	orrs	r2, r1
 800b132:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4aa9      	ldr	r2, [pc, #676]	; (800b3e0 <UART_SetConfig+0x34c>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d177      	bne.n	800b22e <UART_SetConfig+0x19a>
 800b13e:	4ba9      	ldr	r3, [pc, #676]	; (800b3e4 <UART_SetConfig+0x350>)
 800b140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b146:	2b28      	cmp	r3, #40	; 0x28
 800b148:	d86c      	bhi.n	800b224 <UART_SetConfig+0x190>
 800b14a:	a201      	add	r2, pc, #4	; (adr r2, 800b150 <UART_SetConfig+0xbc>)
 800b14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b150:	0800b1f5 	.word	0x0800b1f5
 800b154:	0800b225 	.word	0x0800b225
 800b158:	0800b225 	.word	0x0800b225
 800b15c:	0800b225 	.word	0x0800b225
 800b160:	0800b225 	.word	0x0800b225
 800b164:	0800b225 	.word	0x0800b225
 800b168:	0800b225 	.word	0x0800b225
 800b16c:	0800b225 	.word	0x0800b225
 800b170:	0800b1fd 	.word	0x0800b1fd
 800b174:	0800b225 	.word	0x0800b225
 800b178:	0800b225 	.word	0x0800b225
 800b17c:	0800b225 	.word	0x0800b225
 800b180:	0800b225 	.word	0x0800b225
 800b184:	0800b225 	.word	0x0800b225
 800b188:	0800b225 	.word	0x0800b225
 800b18c:	0800b225 	.word	0x0800b225
 800b190:	0800b205 	.word	0x0800b205
 800b194:	0800b225 	.word	0x0800b225
 800b198:	0800b225 	.word	0x0800b225
 800b19c:	0800b225 	.word	0x0800b225
 800b1a0:	0800b225 	.word	0x0800b225
 800b1a4:	0800b225 	.word	0x0800b225
 800b1a8:	0800b225 	.word	0x0800b225
 800b1ac:	0800b225 	.word	0x0800b225
 800b1b0:	0800b20d 	.word	0x0800b20d
 800b1b4:	0800b225 	.word	0x0800b225
 800b1b8:	0800b225 	.word	0x0800b225
 800b1bc:	0800b225 	.word	0x0800b225
 800b1c0:	0800b225 	.word	0x0800b225
 800b1c4:	0800b225 	.word	0x0800b225
 800b1c8:	0800b225 	.word	0x0800b225
 800b1cc:	0800b225 	.word	0x0800b225
 800b1d0:	0800b215 	.word	0x0800b215
 800b1d4:	0800b225 	.word	0x0800b225
 800b1d8:	0800b225 	.word	0x0800b225
 800b1dc:	0800b225 	.word	0x0800b225
 800b1e0:	0800b225 	.word	0x0800b225
 800b1e4:	0800b225 	.word	0x0800b225
 800b1e8:	0800b225 	.word	0x0800b225
 800b1ec:	0800b225 	.word	0x0800b225
 800b1f0:	0800b21d 	.word	0x0800b21d
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fa:	e233      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b1fc:	2304      	movs	r3, #4
 800b1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b202:	e22f      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b204:	2308      	movs	r3, #8
 800b206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b20a:	e22b      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b20c:	2310      	movs	r3, #16
 800b20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b212:	e227      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b214:	2320      	movs	r3, #32
 800b216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b21a:	e223      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b21c:	2340      	movs	r3, #64	; 0x40
 800b21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b222:	e21f      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b224:	2380      	movs	r3, #128	; 0x80
 800b226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b22a:	bf00      	nop
 800b22c:	e21a      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a6d      	ldr	r2, [pc, #436]	; (800b3e8 <UART_SetConfig+0x354>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d132      	bne.n	800b29e <UART_SetConfig+0x20a>
 800b238:	4b6a      	ldr	r3, [pc, #424]	; (800b3e4 <UART_SetConfig+0x350>)
 800b23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b23c:	f003 0307 	and.w	r3, r3, #7
 800b240:	2b05      	cmp	r3, #5
 800b242:	d827      	bhi.n	800b294 <UART_SetConfig+0x200>
 800b244:	a201      	add	r2, pc, #4	; (adr r2, 800b24c <UART_SetConfig+0x1b8>)
 800b246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24a:	bf00      	nop
 800b24c:	0800b265 	.word	0x0800b265
 800b250:	0800b26d 	.word	0x0800b26d
 800b254:	0800b275 	.word	0x0800b275
 800b258:	0800b27d 	.word	0x0800b27d
 800b25c:	0800b285 	.word	0x0800b285
 800b260:	0800b28d 	.word	0x0800b28d
 800b264:	2300      	movs	r3, #0
 800b266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b26a:	e1fb      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b26c:	2304      	movs	r3, #4
 800b26e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b272:	e1f7      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b274:	2308      	movs	r3, #8
 800b276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b27a:	e1f3      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b27c:	2310      	movs	r3, #16
 800b27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b282:	e1ef      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b284:	2320      	movs	r3, #32
 800b286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b28a:	e1eb      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b28c:	2340      	movs	r3, #64	; 0x40
 800b28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b292:	e1e7      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b294:	2380      	movs	r3, #128	; 0x80
 800b296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b29a:	bf00      	nop
 800b29c:	e1e2      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a52      	ldr	r2, [pc, #328]	; (800b3ec <UART_SetConfig+0x358>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d132      	bne.n	800b30e <UART_SetConfig+0x27a>
 800b2a8:	4b4e      	ldr	r3, [pc, #312]	; (800b3e4 <UART_SetConfig+0x350>)
 800b2aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ac:	f003 0307 	and.w	r3, r3, #7
 800b2b0:	2b05      	cmp	r3, #5
 800b2b2:	d827      	bhi.n	800b304 <UART_SetConfig+0x270>
 800b2b4:	a201      	add	r2, pc, #4	; (adr r2, 800b2bc <UART_SetConfig+0x228>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b2d5 	.word	0x0800b2d5
 800b2c0:	0800b2dd 	.word	0x0800b2dd
 800b2c4:	0800b2e5 	.word	0x0800b2e5
 800b2c8:	0800b2ed 	.word	0x0800b2ed
 800b2cc:	0800b2f5 	.word	0x0800b2f5
 800b2d0:	0800b2fd 	.word	0x0800b2fd
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2da:	e1c3      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b2dc:	2304      	movs	r3, #4
 800b2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2e2:	e1bf      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b2e4:	2308      	movs	r3, #8
 800b2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ea:	e1bb      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b2ec:	2310      	movs	r3, #16
 800b2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2f2:	e1b7      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b2f4:	2320      	movs	r3, #32
 800b2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2fa:	e1b3      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b2fc:	2340      	movs	r3, #64	; 0x40
 800b2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b302:	e1af      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b304:	2380      	movs	r3, #128	; 0x80
 800b306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b30a:	bf00      	nop
 800b30c:	e1aa      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a37      	ldr	r2, [pc, #220]	; (800b3f0 <UART_SetConfig+0x35c>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d132      	bne.n	800b37e <UART_SetConfig+0x2ea>
 800b318:	4b32      	ldr	r3, [pc, #200]	; (800b3e4 <UART_SetConfig+0x350>)
 800b31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31c:	f003 0307 	and.w	r3, r3, #7
 800b320:	2b05      	cmp	r3, #5
 800b322:	d827      	bhi.n	800b374 <UART_SetConfig+0x2e0>
 800b324:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <UART_SetConfig+0x298>)
 800b326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32a:	bf00      	nop
 800b32c:	0800b345 	.word	0x0800b345
 800b330:	0800b34d 	.word	0x0800b34d
 800b334:	0800b355 	.word	0x0800b355
 800b338:	0800b35d 	.word	0x0800b35d
 800b33c:	0800b365 	.word	0x0800b365
 800b340:	0800b36d 	.word	0x0800b36d
 800b344:	2300      	movs	r3, #0
 800b346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b34a:	e18b      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b34c:	2304      	movs	r3, #4
 800b34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b352:	e187      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b354:	2308      	movs	r3, #8
 800b356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b35a:	e183      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b35c:	2310      	movs	r3, #16
 800b35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b362:	e17f      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b364:	2320      	movs	r3, #32
 800b366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b36a:	e17b      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b36c:	2340      	movs	r3, #64	; 0x40
 800b36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b372:	e177      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b374:	2380      	movs	r3, #128	; 0x80
 800b376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b37a:	bf00      	nop
 800b37c:	e172      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a1c      	ldr	r2, [pc, #112]	; (800b3f4 <UART_SetConfig+0x360>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d144      	bne.n	800b412 <UART_SetConfig+0x37e>
 800b388:	4b16      	ldr	r3, [pc, #88]	; (800b3e4 <UART_SetConfig+0x350>)
 800b38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b38c:	f003 0307 	and.w	r3, r3, #7
 800b390:	2b05      	cmp	r3, #5
 800b392:	d839      	bhi.n	800b408 <UART_SetConfig+0x374>
 800b394:	a201      	add	r2, pc, #4	; (adr r2, 800b39c <UART_SetConfig+0x308>)
 800b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39a:	bf00      	nop
 800b39c:	0800b3b5 	.word	0x0800b3b5
 800b3a0:	0800b3bd 	.word	0x0800b3bd
 800b3a4:	0800b3c5 	.word	0x0800b3c5
 800b3a8:	0800b3cd 	.word	0x0800b3cd
 800b3ac:	0800b3f9 	.word	0x0800b3f9
 800b3b0:	0800b401 	.word	0x0800b401
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ba:	e153      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b3bc:	2304      	movs	r3, #4
 800b3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3c2:	e14f      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ca:	e14b      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b3cc:	2310      	movs	r3, #16
 800b3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d2:	e147      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b3d4:	cfff69f3 	.word	0xcfff69f3
 800b3d8:	58000c00 	.word	0x58000c00
 800b3dc:	11fff4ff 	.word	0x11fff4ff
 800b3e0:	40011000 	.word	0x40011000
 800b3e4:	58024400 	.word	0x58024400
 800b3e8:	40004400 	.word	0x40004400
 800b3ec:	40004800 	.word	0x40004800
 800b3f0:	40004c00 	.word	0x40004c00
 800b3f4:	40005000 	.word	0x40005000
 800b3f8:	2320      	movs	r3, #32
 800b3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3fe:	e131      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b400:	2340      	movs	r3, #64	; 0x40
 800b402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b406:	e12d      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b408:	2380      	movs	r3, #128	; 0x80
 800b40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b40e:	bf00      	nop
 800b410:	e128      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4ab6      	ldr	r2, [pc, #728]	; (800b6f0 <UART_SetConfig+0x65c>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d178      	bne.n	800b50e <UART_SetConfig+0x47a>
 800b41c:	4bb5      	ldr	r3, [pc, #724]	; (800b6f4 <UART_SetConfig+0x660>)
 800b41e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b424:	2b28      	cmp	r3, #40	; 0x28
 800b426:	d86d      	bhi.n	800b504 <UART_SetConfig+0x470>
 800b428:	a201      	add	r2, pc, #4	; (adr r2, 800b430 <UART_SetConfig+0x39c>)
 800b42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42e:	bf00      	nop
 800b430:	0800b4d5 	.word	0x0800b4d5
 800b434:	0800b505 	.word	0x0800b505
 800b438:	0800b505 	.word	0x0800b505
 800b43c:	0800b505 	.word	0x0800b505
 800b440:	0800b505 	.word	0x0800b505
 800b444:	0800b505 	.word	0x0800b505
 800b448:	0800b505 	.word	0x0800b505
 800b44c:	0800b505 	.word	0x0800b505
 800b450:	0800b4dd 	.word	0x0800b4dd
 800b454:	0800b505 	.word	0x0800b505
 800b458:	0800b505 	.word	0x0800b505
 800b45c:	0800b505 	.word	0x0800b505
 800b460:	0800b505 	.word	0x0800b505
 800b464:	0800b505 	.word	0x0800b505
 800b468:	0800b505 	.word	0x0800b505
 800b46c:	0800b505 	.word	0x0800b505
 800b470:	0800b4e5 	.word	0x0800b4e5
 800b474:	0800b505 	.word	0x0800b505
 800b478:	0800b505 	.word	0x0800b505
 800b47c:	0800b505 	.word	0x0800b505
 800b480:	0800b505 	.word	0x0800b505
 800b484:	0800b505 	.word	0x0800b505
 800b488:	0800b505 	.word	0x0800b505
 800b48c:	0800b505 	.word	0x0800b505
 800b490:	0800b4ed 	.word	0x0800b4ed
 800b494:	0800b505 	.word	0x0800b505
 800b498:	0800b505 	.word	0x0800b505
 800b49c:	0800b505 	.word	0x0800b505
 800b4a0:	0800b505 	.word	0x0800b505
 800b4a4:	0800b505 	.word	0x0800b505
 800b4a8:	0800b505 	.word	0x0800b505
 800b4ac:	0800b505 	.word	0x0800b505
 800b4b0:	0800b4f5 	.word	0x0800b4f5
 800b4b4:	0800b505 	.word	0x0800b505
 800b4b8:	0800b505 	.word	0x0800b505
 800b4bc:	0800b505 	.word	0x0800b505
 800b4c0:	0800b505 	.word	0x0800b505
 800b4c4:	0800b505 	.word	0x0800b505
 800b4c8:	0800b505 	.word	0x0800b505
 800b4cc:	0800b505 	.word	0x0800b505
 800b4d0:	0800b4fd 	.word	0x0800b4fd
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4da:	e0c3      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b4dc:	2304      	movs	r3, #4
 800b4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4e2:	e0bf      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b4e4:	2308      	movs	r3, #8
 800b4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ea:	e0bb      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b4ec:	2310      	movs	r3, #16
 800b4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4f2:	e0b7      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4fa:	e0b3      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b4fc:	2340      	movs	r3, #64	; 0x40
 800b4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b502:	e0af      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b504:	2380      	movs	r3, #128	; 0x80
 800b506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b50a:	bf00      	nop
 800b50c:	e0aa      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a79      	ldr	r2, [pc, #484]	; (800b6f8 <UART_SetConfig+0x664>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d132      	bne.n	800b57e <UART_SetConfig+0x4ea>
 800b518:	4b76      	ldr	r3, [pc, #472]	; (800b6f4 <UART_SetConfig+0x660>)
 800b51a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b51c:	f003 0307 	and.w	r3, r3, #7
 800b520:	2b05      	cmp	r3, #5
 800b522:	d827      	bhi.n	800b574 <UART_SetConfig+0x4e0>
 800b524:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <UART_SetConfig+0x498>)
 800b526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52a:	bf00      	nop
 800b52c:	0800b545 	.word	0x0800b545
 800b530:	0800b54d 	.word	0x0800b54d
 800b534:	0800b555 	.word	0x0800b555
 800b538:	0800b55d 	.word	0x0800b55d
 800b53c:	0800b565 	.word	0x0800b565
 800b540:	0800b56d 	.word	0x0800b56d
 800b544:	2300      	movs	r3, #0
 800b546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b54a:	e08b      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b54c:	2304      	movs	r3, #4
 800b54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b552:	e087      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b554:	2308      	movs	r3, #8
 800b556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b55a:	e083      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b55c:	2310      	movs	r3, #16
 800b55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b562:	e07f      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b564:	2320      	movs	r3, #32
 800b566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b56a:	e07b      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b572:	e077      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b574:	2380      	movs	r3, #128	; 0x80
 800b576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b57a:	bf00      	nop
 800b57c:	e072      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a5e      	ldr	r2, [pc, #376]	; (800b6fc <UART_SetConfig+0x668>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d132      	bne.n	800b5ee <UART_SetConfig+0x55a>
 800b588:	4b5a      	ldr	r3, [pc, #360]	; (800b6f4 <UART_SetConfig+0x660>)
 800b58a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58c:	f003 0307 	and.w	r3, r3, #7
 800b590:	2b05      	cmp	r3, #5
 800b592:	d827      	bhi.n	800b5e4 <UART_SetConfig+0x550>
 800b594:	a201      	add	r2, pc, #4	; (adr r2, 800b59c <UART_SetConfig+0x508>)
 800b596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59a:	bf00      	nop
 800b59c:	0800b5b5 	.word	0x0800b5b5
 800b5a0:	0800b5bd 	.word	0x0800b5bd
 800b5a4:	0800b5c5 	.word	0x0800b5c5
 800b5a8:	0800b5cd 	.word	0x0800b5cd
 800b5ac:	0800b5d5 	.word	0x0800b5d5
 800b5b0:	0800b5dd 	.word	0x0800b5dd
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ba:	e053      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b5bc:	2304      	movs	r3, #4
 800b5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5c2:	e04f      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b5c4:	2308      	movs	r3, #8
 800b5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ca:	e04b      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b5cc:	2310      	movs	r3, #16
 800b5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5d2:	e047      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b5d4:	2320      	movs	r3, #32
 800b5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5da:	e043      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b5dc:	2340      	movs	r3, #64	; 0x40
 800b5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5e2:	e03f      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b5e4:	2380      	movs	r3, #128	; 0x80
 800b5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ea:	bf00      	nop
 800b5ec:	e03a      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a43      	ldr	r2, [pc, #268]	; (800b700 <UART_SetConfig+0x66c>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d132      	bne.n	800b65e <UART_SetConfig+0x5ca>
 800b5f8:	4b3e      	ldr	r3, [pc, #248]	; (800b6f4 <UART_SetConfig+0x660>)
 800b5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fc:	f003 0307 	and.w	r3, r3, #7
 800b600:	2b05      	cmp	r3, #5
 800b602:	d827      	bhi.n	800b654 <UART_SetConfig+0x5c0>
 800b604:	a201      	add	r2, pc, #4	; (adr r2, 800b60c <UART_SetConfig+0x578>)
 800b606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60a:	bf00      	nop
 800b60c:	0800b625 	.word	0x0800b625
 800b610:	0800b62d 	.word	0x0800b62d
 800b614:	0800b635 	.word	0x0800b635
 800b618:	0800b63d 	.word	0x0800b63d
 800b61c:	0800b645 	.word	0x0800b645
 800b620:	0800b64d 	.word	0x0800b64d
 800b624:	2302      	movs	r3, #2
 800b626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b62a:	e01b      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b62c:	2304      	movs	r3, #4
 800b62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b632:	e017      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b634:	2308      	movs	r3, #8
 800b636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b63a:	e013      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b63c:	2310      	movs	r3, #16
 800b63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b642:	e00f      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b644:	2320      	movs	r3, #32
 800b646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b64a:	e00b      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b64c:	2340      	movs	r3, #64	; 0x40
 800b64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b652:	e007      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b654:	2380      	movs	r3, #128	; 0x80
 800b656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b65a:	bf00      	nop
 800b65c:	e002      	b.n	800b664 <UART_SetConfig+0x5d0>
 800b65e:	2380      	movs	r3, #128	; 0x80
 800b660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a25      	ldr	r2, [pc, #148]	; (800b700 <UART_SetConfig+0x66c>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	f040 80b8 	bne.w	800b7e0 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b670:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b674:	2b08      	cmp	r3, #8
 800b676:	d019      	beq.n	800b6ac <UART_SetConfig+0x618>
 800b678:	2b08      	cmp	r3, #8
 800b67a:	dc04      	bgt.n	800b686 <UART_SetConfig+0x5f2>
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d009      	beq.n	800b694 <UART_SetConfig+0x600>
 800b680:	2b04      	cmp	r3, #4
 800b682:	d00b      	beq.n	800b69c <UART_SetConfig+0x608>
 800b684:	e042      	b.n	800b70c <UART_SetConfig+0x678>
 800b686:	2b20      	cmp	r3, #32
 800b688:	d02b      	beq.n	800b6e2 <UART_SetConfig+0x64e>
 800b68a:	2b40      	cmp	r3, #64	; 0x40
 800b68c:	d02c      	beq.n	800b6e8 <UART_SetConfig+0x654>
 800b68e:	2b10      	cmp	r3, #16
 800b690:	d014      	beq.n	800b6bc <UART_SetConfig+0x628>
 800b692:	e03b      	b.n	800b70c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b694:	f7fe fc3a 	bl	8009f0c <HAL_RCCEx_GetD3PCLK1Freq>
 800b698:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b69a:	e03d      	b.n	800b718 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b69c:	f107 0314 	add.w	r3, r7, #20
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fc49 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6aa:	e035      	b.n	800b718 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ac:	f107 0308 	add.w	r3, r7, #8
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe fd8d 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6ba:	e02d      	b.n	800b718 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6bc:	4b0d      	ldr	r3, [pc, #52]	; (800b6f4 <UART_SetConfig+0x660>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 0320 	and.w	r3, r3, #32
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d009      	beq.n	800b6dc <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6c8:	4b0a      	ldr	r3, [pc, #40]	; (800b6f4 <UART_SetConfig+0x660>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	08db      	lsrs	r3, r3, #3
 800b6ce:	f003 0303 	and.w	r3, r3, #3
 800b6d2:	4a0c      	ldr	r2, [pc, #48]	; (800b704 <UART_SetConfig+0x670>)
 800b6d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6da:	e01d      	b.n	800b718 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b6dc:	4b09      	ldr	r3, [pc, #36]	; (800b704 <UART_SetConfig+0x670>)
 800b6de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6e0:	e01a      	b.n	800b718 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6e2:	4b09      	ldr	r3, [pc, #36]	; (800b708 <UART_SetConfig+0x674>)
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6e6:	e017      	b.n	800b718 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6ee:	e013      	b.n	800b718 <UART_SetConfig+0x684>
 800b6f0:	40011400 	.word	0x40011400
 800b6f4:	58024400 	.word	0x58024400
 800b6f8:	40007800 	.word	0x40007800
 800b6fc:	40007c00 	.word	0x40007c00
 800b700:	58000c00 	.word	0x58000c00
 800b704:	03d09000 	.word	0x03d09000
 800b708:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b716:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f000 824d 	beq.w	800bbba <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b724:	4aad      	ldr	r2, [pc, #692]	; (800b9dc <UART_SetConfig+0x948>)
 800b726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b72a:	461a      	mov	r2, r3
 800b72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b732:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	4613      	mov	r3, r2
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	4413      	add	r3, r2
 800b73e:	6a3a      	ldr	r2, [r7, #32]
 800b740:	429a      	cmp	r2, r3
 800b742:	d305      	bcc.n	800b750 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b74a:	6a3a      	ldr	r2, [r7, #32]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d903      	bls.n	800b758 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b756:	e230      	b.n	800bbba <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	4618      	mov	r0, r3
 800b75c:	f04f 0100 	mov.w	r1, #0
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b764:	4a9d      	ldr	r2, [pc, #628]	; (800b9dc <UART_SetConfig+0x948>)
 800b766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	f04f 0400 	mov.w	r4, #0
 800b770:	461a      	mov	r2, r3
 800b772:	4623      	mov	r3, r4
 800b774:	f7f4 fdb0 	bl	80002d8 <__aeabi_uldivmod>
 800b778:	4603      	mov	r3, r0
 800b77a:	460c      	mov	r4, r1
 800b77c:	4619      	mov	r1, r3
 800b77e:	4622      	mov	r2, r4
 800b780:	f04f 0300 	mov.w	r3, #0
 800b784:	f04f 0400 	mov.w	r4, #0
 800b788:	0214      	lsls	r4, r2, #8
 800b78a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b78e:	020b      	lsls	r3, r1, #8
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	6852      	ldr	r2, [r2, #4]
 800b794:	0852      	lsrs	r2, r2, #1
 800b796:	4611      	mov	r1, r2
 800b798:	f04f 0200 	mov.w	r2, #0
 800b79c:	eb13 0b01 	adds.w	fp, r3, r1
 800b7a0:	eb44 0c02 	adc.w	ip, r4, r2
 800b7a4:	4658      	mov	r0, fp
 800b7a6:	4661      	mov	r1, ip
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	f04f 0400 	mov.w	r4, #0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	4623      	mov	r3, r4
 800b7b4:	f7f4 fd90 	bl	80002d8 <__aeabi_uldivmod>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7c4:	d308      	bcc.n	800b7d8 <UART_SetConfig+0x744>
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7cc:	d204      	bcs.n	800b7d8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d4:	60da      	str	r2, [r3, #12]
 800b7d6:	e1f0      	b.n	800bbba <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b7de:	e1ec      	b.n	800bbba <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	69db      	ldr	r3, [r3, #28]
 800b7e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7e8:	f040 8100 	bne.w	800b9ec <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b7ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b7f0:	2b40      	cmp	r3, #64	; 0x40
 800b7f2:	f200 80b7 	bhi.w	800b964 <UART_SetConfig+0x8d0>
 800b7f6:	a201      	add	r2, pc, #4	; (adr r2, 800b7fc <UART_SetConfig+0x768>)
 800b7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7fc:	0800b901 	.word	0x0800b901
 800b800:	0800b909 	.word	0x0800b909
 800b804:	0800b965 	.word	0x0800b965
 800b808:	0800b965 	.word	0x0800b965
 800b80c:	0800b911 	.word	0x0800b911
 800b810:	0800b965 	.word	0x0800b965
 800b814:	0800b965 	.word	0x0800b965
 800b818:	0800b965 	.word	0x0800b965
 800b81c:	0800b921 	.word	0x0800b921
 800b820:	0800b965 	.word	0x0800b965
 800b824:	0800b965 	.word	0x0800b965
 800b828:	0800b965 	.word	0x0800b965
 800b82c:	0800b965 	.word	0x0800b965
 800b830:	0800b965 	.word	0x0800b965
 800b834:	0800b965 	.word	0x0800b965
 800b838:	0800b965 	.word	0x0800b965
 800b83c:	0800b931 	.word	0x0800b931
 800b840:	0800b965 	.word	0x0800b965
 800b844:	0800b965 	.word	0x0800b965
 800b848:	0800b965 	.word	0x0800b965
 800b84c:	0800b965 	.word	0x0800b965
 800b850:	0800b965 	.word	0x0800b965
 800b854:	0800b965 	.word	0x0800b965
 800b858:	0800b965 	.word	0x0800b965
 800b85c:	0800b965 	.word	0x0800b965
 800b860:	0800b965 	.word	0x0800b965
 800b864:	0800b965 	.word	0x0800b965
 800b868:	0800b965 	.word	0x0800b965
 800b86c:	0800b965 	.word	0x0800b965
 800b870:	0800b965 	.word	0x0800b965
 800b874:	0800b965 	.word	0x0800b965
 800b878:	0800b965 	.word	0x0800b965
 800b87c:	0800b957 	.word	0x0800b957
 800b880:	0800b965 	.word	0x0800b965
 800b884:	0800b965 	.word	0x0800b965
 800b888:	0800b965 	.word	0x0800b965
 800b88c:	0800b965 	.word	0x0800b965
 800b890:	0800b965 	.word	0x0800b965
 800b894:	0800b965 	.word	0x0800b965
 800b898:	0800b965 	.word	0x0800b965
 800b89c:	0800b965 	.word	0x0800b965
 800b8a0:	0800b965 	.word	0x0800b965
 800b8a4:	0800b965 	.word	0x0800b965
 800b8a8:	0800b965 	.word	0x0800b965
 800b8ac:	0800b965 	.word	0x0800b965
 800b8b0:	0800b965 	.word	0x0800b965
 800b8b4:	0800b965 	.word	0x0800b965
 800b8b8:	0800b965 	.word	0x0800b965
 800b8bc:	0800b965 	.word	0x0800b965
 800b8c0:	0800b965 	.word	0x0800b965
 800b8c4:	0800b965 	.word	0x0800b965
 800b8c8:	0800b965 	.word	0x0800b965
 800b8cc:	0800b965 	.word	0x0800b965
 800b8d0:	0800b965 	.word	0x0800b965
 800b8d4:	0800b965 	.word	0x0800b965
 800b8d8:	0800b965 	.word	0x0800b965
 800b8dc:	0800b965 	.word	0x0800b965
 800b8e0:	0800b965 	.word	0x0800b965
 800b8e4:	0800b965 	.word	0x0800b965
 800b8e8:	0800b965 	.word	0x0800b965
 800b8ec:	0800b965 	.word	0x0800b965
 800b8f0:	0800b965 	.word	0x0800b965
 800b8f4:	0800b965 	.word	0x0800b965
 800b8f8:	0800b965 	.word	0x0800b965
 800b8fc:	0800b95d 	.word	0x0800b95d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b900:	f7fd f972 	bl	8008be8 <HAL_RCC_GetPCLK1Freq>
 800b904:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b906:	e033      	b.n	800b970 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b908:	f7fd f984 	bl	8008c14 <HAL_RCC_GetPCLK2Freq>
 800b90c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b90e:	e02f      	b.n	800b970 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b910:	f107 0314 	add.w	r3, r7, #20
 800b914:	4618      	mov	r0, r3
 800b916:	f7fe fb0f 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b91e:	e027      	b.n	800b970 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b920:	f107 0308 	add.w	r3, r7, #8
 800b924:	4618      	mov	r0, r3
 800b926:	f7fe fc53 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b92e:	e01f      	b.n	800b970 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b930:	4b2b      	ldr	r3, [pc, #172]	; (800b9e0 <UART_SetConfig+0x94c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0320 	and.w	r3, r3, #32
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d009      	beq.n	800b950 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b93c:	4b28      	ldr	r3, [pc, #160]	; (800b9e0 <UART_SetConfig+0x94c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	08db      	lsrs	r3, r3, #3
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	4a27      	ldr	r2, [pc, #156]	; (800b9e4 <UART_SetConfig+0x950>)
 800b948:	fa22 f303 	lsr.w	r3, r2, r3
 800b94c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b94e:	e00f      	b.n	800b970 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b950:	4b24      	ldr	r3, [pc, #144]	; (800b9e4 <UART_SetConfig+0x950>)
 800b952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b954:	e00c      	b.n	800b970 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b956:	4b24      	ldr	r3, [pc, #144]	; (800b9e8 <UART_SetConfig+0x954>)
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b95a:	e009      	b.n	800b970 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b95c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b962:	e005      	b.n	800b970 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b964:	2300      	movs	r3, #0
 800b966:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b96e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 8121 	beq.w	800bbba <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	4a17      	ldr	r2, [pc, #92]	; (800b9dc <UART_SetConfig+0x948>)
 800b97e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b982:	461a      	mov	r2, r3
 800b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b986:	fbb3 f3f2 	udiv	r3, r3, r2
 800b98a:	005a      	lsls	r2, r3, #1
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	085b      	lsrs	r3, r3, #1
 800b992:	441a      	add	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	2b0f      	cmp	r3, #15
 800b9a4:	d916      	bls.n	800b9d4 <UART_SetConfig+0x940>
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ac:	d212      	bcs.n	800b9d4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	f023 030f 	bic.w	r3, r3, #15
 800b9b6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ba:	085b      	lsrs	r3, r3, #1
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	f003 0307 	and.w	r3, r3, #7
 800b9c2:	b29a      	uxth	r2, r3
 800b9c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b9d0:	60da      	str	r2, [r3, #12]
 800b9d2:	e0f2      	b.n	800bbba <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b9da:	e0ee      	b.n	800bbba <UART_SetConfig+0xb26>
 800b9dc:	0800ca6c 	.word	0x0800ca6c
 800b9e0:	58024400 	.word	0x58024400
 800b9e4:	03d09000 	.word	0x03d09000
 800b9e8:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b9f0:	2b40      	cmp	r3, #64	; 0x40
 800b9f2:	f200 80b7 	bhi.w	800bb64 <UART_SetConfig+0xad0>
 800b9f6:	a201      	add	r2, pc, #4	; (adr r2, 800b9fc <UART_SetConfig+0x968>)
 800b9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fc:	0800bb01 	.word	0x0800bb01
 800ba00:	0800bb09 	.word	0x0800bb09
 800ba04:	0800bb65 	.word	0x0800bb65
 800ba08:	0800bb65 	.word	0x0800bb65
 800ba0c:	0800bb11 	.word	0x0800bb11
 800ba10:	0800bb65 	.word	0x0800bb65
 800ba14:	0800bb65 	.word	0x0800bb65
 800ba18:	0800bb65 	.word	0x0800bb65
 800ba1c:	0800bb21 	.word	0x0800bb21
 800ba20:	0800bb65 	.word	0x0800bb65
 800ba24:	0800bb65 	.word	0x0800bb65
 800ba28:	0800bb65 	.word	0x0800bb65
 800ba2c:	0800bb65 	.word	0x0800bb65
 800ba30:	0800bb65 	.word	0x0800bb65
 800ba34:	0800bb65 	.word	0x0800bb65
 800ba38:	0800bb65 	.word	0x0800bb65
 800ba3c:	0800bb31 	.word	0x0800bb31
 800ba40:	0800bb65 	.word	0x0800bb65
 800ba44:	0800bb65 	.word	0x0800bb65
 800ba48:	0800bb65 	.word	0x0800bb65
 800ba4c:	0800bb65 	.word	0x0800bb65
 800ba50:	0800bb65 	.word	0x0800bb65
 800ba54:	0800bb65 	.word	0x0800bb65
 800ba58:	0800bb65 	.word	0x0800bb65
 800ba5c:	0800bb65 	.word	0x0800bb65
 800ba60:	0800bb65 	.word	0x0800bb65
 800ba64:	0800bb65 	.word	0x0800bb65
 800ba68:	0800bb65 	.word	0x0800bb65
 800ba6c:	0800bb65 	.word	0x0800bb65
 800ba70:	0800bb65 	.word	0x0800bb65
 800ba74:	0800bb65 	.word	0x0800bb65
 800ba78:	0800bb65 	.word	0x0800bb65
 800ba7c:	0800bb57 	.word	0x0800bb57
 800ba80:	0800bb65 	.word	0x0800bb65
 800ba84:	0800bb65 	.word	0x0800bb65
 800ba88:	0800bb65 	.word	0x0800bb65
 800ba8c:	0800bb65 	.word	0x0800bb65
 800ba90:	0800bb65 	.word	0x0800bb65
 800ba94:	0800bb65 	.word	0x0800bb65
 800ba98:	0800bb65 	.word	0x0800bb65
 800ba9c:	0800bb65 	.word	0x0800bb65
 800baa0:	0800bb65 	.word	0x0800bb65
 800baa4:	0800bb65 	.word	0x0800bb65
 800baa8:	0800bb65 	.word	0x0800bb65
 800baac:	0800bb65 	.word	0x0800bb65
 800bab0:	0800bb65 	.word	0x0800bb65
 800bab4:	0800bb65 	.word	0x0800bb65
 800bab8:	0800bb65 	.word	0x0800bb65
 800babc:	0800bb65 	.word	0x0800bb65
 800bac0:	0800bb65 	.word	0x0800bb65
 800bac4:	0800bb65 	.word	0x0800bb65
 800bac8:	0800bb65 	.word	0x0800bb65
 800bacc:	0800bb65 	.word	0x0800bb65
 800bad0:	0800bb65 	.word	0x0800bb65
 800bad4:	0800bb65 	.word	0x0800bb65
 800bad8:	0800bb65 	.word	0x0800bb65
 800badc:	0800bb65 	.word	0x0800bb65
 800bae0:	0800bb65 	.word	0x0800bb65
 800bae4:	0800bb65 	.word	0x0800bb65
 800bae8:	0800bb65 	.word	0x0800bb65
 800baec:	0800bb65 	.word	0x0800bb65
 800baf0:	0800bb65 	.word	0x0800bb65
 800baf4:	0800bb65 	.word	0x0800bb65
 800baf8:	0800bb65 	.word	0x0800bb65
 800bafc:	0800bb5d 	.word	0x0800bb5d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb00:	f7fd f872 	bl	8008be8 <HAL_RCC_GetPCLK1Freq>
 800bb04:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb06:	e033      	b.n	800bb70 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb08:	f7fd f884 	bl	8008c14 <HAL_RCC_GetPCLK2Freq>
 800bb0c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb0e:	e02f      	b.n	800bb70 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb10:	f107 0314 	add.w	r3, r7, #20
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fe fa0f 	bl	8009f38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb1a:	69bb      	ldr	r3, [r7, #24]
 800bb1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb1e:	e027      	b.n	800bb70 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb20:	f107 0308 	add.w	r3, r7, #8
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fe fb53 	bl	800a1d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb2e:	e01f      	b.n	800bb70 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb30:	4b2c      	ldr	r3, [pc, #176]	; (800bbe4 <UART_SetConfig+0xb50>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 0320 	and.w	r3, r3, #32
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d009      	beq.n	800bb50 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb3c:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <UART_SetConfig+0xb50>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	08db      	lsrs	r3, r3, #3
 800bb42:	f003 0303 	and.w	r3, r3, #3
 800bb46:	4a28      	ldr	r2, [pc, #160]	; (800bbe8 <UART_SetConfig+0xb54>)
 800bb48:	fa22 f303 	lsr.w	r3, r2, r3
 800bb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb4e:	e00f      	b.n	800bb70 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800bb50:	4b25      	ldr	r3, [pc, #148]	; (800bbe8 <UART_SetConfig+0xb54>)
 800bb52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb54:	e00c      	b.n	800bb70 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb56:	4b25      	ldr	r3, [pc, #148]	; (800bbec <UART_SetConfig+0xb58>)
 800bb58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb5a:	e009      	b.n	800bb70 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb62:	e005      	b.n	800bb70 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800bb64:	2300      	movs	r3, #0
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bb6e:	bf00      	nop
    }

    if (pclk != 0U)
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d021      	beq.n	800bbba <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7a:	4a1d      	ldr	r2, [pc, #116]	; (800bbf0 <UART_SetConfig+0xb5c>)
 800bb7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb80:	461a      	mov	r2, r3
 800bb82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb84:	fbb3 f2f2 	udiv	r2, r3, r2
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	085b      	lsrs	r3, r3, #1
 800bb8e:	441a      	add	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9e:	2b0f      	cmp	r3, #15
 800bba0:	d908      	bls.n	800bbb4 <UART_SetConfig+0xb20>
 800bba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba8:	d204      	bcs.n	800bbb4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbb0:	60da      	str	r2, [r3, #12]
 800bbb2:	e002      	b.n	800bbba <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bbd6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3738      	adds	r7, #56	; 0x38
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bbe4:	58024400 	.word	0x58024400
 800bbe8:	03d09000 	.word	0x03d09000
 800bbec:	003d0900 	.word	0x003d0900
 800bbf0:	0800ca6c 	.word	0x0800ca6c

0800bbf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc00:	f003 0301 	and.w	r3, r3, #1
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d00a      	beq.n	800bc1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc22:	f003 0302 	and.w	r3, r3, #2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00a      	beq.n	800bc40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	430a      	orrs	r2, r1
 800bc3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00a      	beq.n	800bc62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc66:	f003 0308 	and.w	r3, r3, #8
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00a      	beq.n	800bc84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	430a      	orrs	r2, r1
 800bc82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc88:	f003 0310 	and.w	r3, r3, #16
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00a      	beq.n	800bca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	430a      	orrs	r2, r1
 800bca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcaa:	f003 0320 	and.w	r3, r3, #32
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d00a      	beq.n	800bcc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	430a      	orrs	r2, r1
 800bcc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d01a      	beq.n	800bd0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcf2:	d10a      	bne.n	800bd0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	430a      	orrs	r2, r1
 800bd08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00a      	beq.n	800bd2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	430a      	orrs	r2, r1
 800bd2a:	605a      	str	r2, [r3, #4]
  }
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af02      	add	r7, sp, #8
 800bd3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bd48:	f7f6 fb7e 	bl	8002448 <HAL_GetTick>
 800bd4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 0308 	and.w	r3, r3, #8
 800bd58:	2b08      	cmp	r3, #8
 800bd5a:	d10e      	bne.n	800bd7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd60:	9300      	str	r3, [sp, #0]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f82c 	bl	800bdc8 <UART_WaitOnFlagUntilTimeout>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd76:	2303      	movs	r3, #3
 800bd78:	e022      	b.n	800bdc0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0304 	and.w	r3, r3, #4
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d10e      	bne.n	800bda6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f816 	bl	800bdc8 <UART_WaitOnFlagUntilTimeout>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bda2:	2303      	movs	r3, #3
 800bda4:	e00c      	b.n	800bdc0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2220      	movs	r2, #32
 800bdaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2220      	movs	r2, #32
 800bdb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	603b      	str	r3, [r7, #0]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdd8:	e062      	b.n	800bea0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde0:	d05e      	beq.n	800bea0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bde2:	f7f6 fb31 	bl	8002448 <HAL_GetTick>
 800bde6:	4602      	mov	r2, r0
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	69ba      	ldr	r2, [r7, #24]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d302      	bcc.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d11d      	bne.n	800be34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be06:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	689a      	ldr	r2, [r3, #8]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f022 0201 	bic.w	r2, r2, #1
 800be16:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2220      	movs	r2, #32
 800be1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2220      	movs	r2, #32
 800be24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800be30:	2303      	movs	r3, #3
 800be32:	e045      	b.n	800bec0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f003 0304 	and.w	r3, r3, #4
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d02e      	beq.n	800bea0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be50:	d126      	bne.n	800bea0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be5a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800be6a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	689a      	ldr	r2, [r3, #8]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f022 0201 	bic.w	r2, r2, #1
 800be7a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	2220      	movs	r2, #32
 800be80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2220      	movs	r2, #32
 800be88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2220      	movs	r2, #32
 800be90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800be9c:	2303      	movs	r3, #3
 800be9e:	e00f      	b.n	800bec0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	69da      	ldr	r2, [r3, #28]
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	4013      	ands	r3, r2
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	429a      	cmp	r2, r3
 800beae:	bf0c      	ite	eq
 800beb0:	2301      	moveq	r3, #1
 800beb2:	2300      	movne	r3, #0
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	461a      	mov	r2, r3
 800beb8:	79fb      	ldrb	r3, [r7, #7]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d08d      	beq.n	800bdda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bec8:	b480      	push	{r7}
 800beca:	b085      	sub	sp, #20
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d101      	bne.n	800bede <HAL_UARTEx_DisableFifoMode+0x16>
 800beda:	2302      	movs	r3, #2
 800bedc:	e027      	b.n	800bf2e <HAL_UARTEx_DisableFifoMode+0x66>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2224      	movs	r2, #36	; 0x24
 800beea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f022 0201 	bic.w	r2, r2, #1
 800bf04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2220      	movs	r2, #32
 800bf20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b084      	sub	sp, #16
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d101      	bne.n	800bf52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bf4e:	2302      	movs	r3, #2
 800bf50:	e02d      	b.n	800bfae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2224      	movs	r2, #36	; 0x24
 800bf5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f022 0201 	bic.w	r2, r2, #1
 800bf78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	683a      	ldr	r2, [r7, #0]
 800bf8a:	430a      	orrs	r2, r1
 800bf8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 f850 	bl	800c034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2220      	movs	r2, #32
 800bfa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b084      	sub	sp, #16
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
 800bfbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d101      	bne.n	800bfce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bfca:	2302      	movs	r3, #2
 800bfcc:	e02d      	b.n	800c02a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2224      	movs	r2, #36	; 0x24
 800bfda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f022 0201 	bic.w	r2, r2, #1
 800bff4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	430a      	orrs	r2, r1
 800c008:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 f812 	bl	800c034 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
	...

0800c034 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c034:	b480      	push	{r7}
 800c036:	b089      	sub	sp, #36	; 0x24
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c03c:	4a2f      	ldr	r2, [pc, #188]	; (800c0fc <UARTEx_SetNbDataToProcess+0xc8>)
 800c03e:	f107 0314 	add.w	r3, r7, #20
 800c042:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c046:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c04a:	4a2d      	ldr	r2, [pc, #180]	; (800c100 <UARTEx_SetNbDataToProcess+0xcc>)
 800c04c:	f107 030c 	add.w	r3, r7, #12
 800c050:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c054:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d108      	bne.n	800c072 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c070:	e03d      	b.n	800c0ee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c072:	2310      	movs	r3, #16
 800c074:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c076:	2310      	movs	r3, #16
 800c078:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	0e5b      	lsrs	r3, r3, #25
 800c082:	b2db      	uxtb	r3, r3
 800c084:	f003 0307 	and.w	r3, r3, #7
 800c088:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	0f5b      	lsrs	r3, r3, #29
 800c092:	b2db      	uxtb	r3, r3
 800c094:	f003 0307 	and.w	r3, r3, #7
 800c098:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c09a:	7fbb      	ldrb	r3, [r7, #30]
 800c09c:	7f3a      	ldrb	r2, [r7, #28]
 800c09e:	f107 0120 	add.w	r1, r7, #32
 800c0a2:	440a      	add	r2, r1
 800c0a4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c0a8:	fb02 f303 	mul.w	r3, r2, r3
 800c0ac:	7f3a      	ldrb	r2, [r7, #28]
 800c0ae:	f107 0120 	add.w	r1, r7, #32
 800c0b2:	440a      	add	r2, r1
 800c0b4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c0b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c0c4:	7ffb      	ldrb	r3, [r7, #31]
 800c0c6:	7f7a      	ldrb	r2, [r7, #29]
 800c0c8:	f107 0120 	add.w	r1, r7, #32
 800c0cc:	440a      	add	r2, r1
 800c0ce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c0d2:	fb02 f303 	mul.w	r3, r2, r3
 800c0d6:	7f7a      	ldrb	r2, [r7, #29]
 800c0d8:	f107 0120 	add.w	r1, r7, #32
 800c0dc:	440a      	add	r2, r1
 800c0de:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c0e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c0ee:	bf00      	nop
 800c0f0:	3724      	adds	r7, #36	; 0x24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	0800ca0c 	.word	0x0800ca0c
 800c100:	0800ca14 	.word	0x0800ca14

0800c104 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c104:	b084      	sub	sp, #16
 800c106:	b580      	push	{r7, lr}
 800c108:	b084      	sub	sp, #16
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	f107 001c 	add.w	r0, r7, #28
 800c112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d120      	bne.n	800c15e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	68da      	ldr	r2, [r3, #12]
 800c12c:	4b25      	ldr	r3, [pc, #148]	; (800c1c4 <USB_CoreInit+0xc0>)
 800c12e:	4013      	ands	r3, r2
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c142:	2b01      	cmp	r3, #1
 800c144:	d105      	bne.n	800c152 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fa4c 	bl	800c5f0 <USB_CoreReset>
 800c158:	4603      	mov	r3, r0
 800c15a:	73fb      	strb	r3, [r7, #15]
 800c15c:	e01a      	b.n	800c194 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa40 	bl	800c5f0 <USB_CoreReset>
 800c170:	4603      	mov	r3, r0
 800c172:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c176:	2b00      	cmp	r3, #0
 800c178:	d106      	bne.n	800c188 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c17e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	639a      	str	r2, [r3, #56]	; 0x38
 800c186:	e005      	b.n	800c194 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	2b01      	cmp	r3, #1
 800c198:	d10b      	bne.n	800c1b2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	f043 0206 	orr.w	r2, r3, #6
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	689b      	ldr	r3, [r3, #8]
 800c1aa:	f043 0220 	orr.w	r2, r3, #32
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c1be:	b004      	add	sp, #16
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	ffbdffbf 	.word	0xffbdffbf

0800c1c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f023 0201 	bic.w	r2, r3, #1
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c202:	78fb      	ldrb	r3, [r7, #3]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d106      	bne.n	800c216 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	60da      	str	r2, [r3, #12]
 800c214:	e00b      	b.n	800c22e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c216:	78fb      	ldrb	r3, [r7, #3]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d106      	bne.n	800c22a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	60da      	str	r2, [r3, #12]
 800c228:	e001      	b.n	800c22e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e003      	b.n	800c236 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c22e:	2032      	movs	r0, #50	; 0x32
 800c230:	f7f6 f916 	bl	8002460 <HAL_Delay>

  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
	...

0800c240 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c240:	b084      	sub	sp, #16
 800c242:	b580      	push	{r7, lr}
 800c244:	b086      	sub	sp, #24
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c24e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c252:	2300      	movs	r3, #0
 800c254:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c25a:	2300      	movs	r3, #0
 800c25c:	613b      	str	r3, [r7, #16]
 800c25e:	e009      	b.n	800c274 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	3340      	adds	r3, #64	; 0x40
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	4413      	add	r3, r2
 800c26a:	2200      	movs	r2, #0
 800c26c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	3301      	adds	r3, #1
 800c272:	613b      	str	r3, [r7, #16]
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	2b0e      	cmp	r3, #14
 800c278:	d9f2      	bls.n	800c260 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d11c      	bne.n	800c2ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c28e:	f043 0302 	orr.w	r3, r3, #2
 800c292:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c298:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	e005      	b.n	800c2c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2d8:	4619      	mov	r1, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	680b      	ldr	r3, [r1, #0]
 800c2e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d10c      	bne.n	800c306 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d104      	bne.n	800c2fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f949 	bl	800c58c <USB_SetDevSpeed>
 800c2fa:	e008      	b.n	800c30e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 f944 	bl	800c58c <USB_SetDevSpeed>
 800c304:	e003      	b.n	800c30e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c306:	2103      	movs	r1, #3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f93f 	bl	800c58c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c30e:	2110      	movs	r1, #16
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f8f3 	bl	800c4fc <USB_FlushTxFifo>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 f911 	bl	800c548 <USB_FlushRxFifo>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d001      	beq.n	800c330 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c336:	461a      	mov	r2, r3
 800c338:	2300      	movs	r3, #0
 800c33a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c342:	461a      	mov	r2, r3
 800c344:	2300      	movs	r3, #0
 800c346:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c34e:	461a      	mov	r2, r3
 800c350:	2300      	movs	r3, #0
 800c352:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c354:	2300      	movs	r3, #0
 800c356:	613b      	str	r3, [r7, #16]
 800c358:	e043      	b.n	800c3e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	015a      	lsls	r2, r3, #5
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4413      	add	r3, r2
 800c362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c36c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c370:	d118      	bne.n	800c3a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10a      	bne.n	800c38e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	015a      	lsls	r2, r3, #5
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	4413      	add	r3, r2
 800c380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c384:	461a      	mov	r2, r3
 800c386:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c38a:	6013      	str	r3, [r2, #0]
 800c38c:	e013      	b.n	800c3b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39a:	461a      	mov	r2, r3
 800c39c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c3a0:	6013      	str	r3, [r2, #0]
 800c3a2:	e008      	b.n	800c3b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	015a      	lsls	r2, r3, #5
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	015a      	lsls	r2, r3, #5
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	613b      	str	r3, [r7, #16]
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d3b7      	bcc.n	800c35a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	613b      	str	r3, [r7, #16]
 800c3ee:	e043      	b.n	800c478 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	015a      	lsls	r2, r3, #5
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c406:	d118      	bne.n	800c43a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10a      	bne.n	800c424 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	015a      	lsls	r2, r3, #5
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	4413      	add	r3, r2
 800c416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c41a:	461a      	mov	r2, r3
 800c41c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c420:	6013      	str	r3, [r2, #0]
 800c422:	e013      	b.n	800c44c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c430:	461a      	mov	r2, r3
 800c432:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c436:	6013      	str	r3, [r2, #0]
 800c438:	e008      	b.n	800c44c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	015a      	lsls	r2, r3, #5
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	4413      	add	r3, r2
 800c442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c446:	461a      	mov	r2, r3
 800c448:	2300      	movs	r3, #0
 800c44a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	015a      	lsls	r2, r3, #5
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	4413      	add	r3, r2
 800c454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c458:	461a      	mov	r2, r3
 800c45a:	2300      	movs	r3, #0
 800c45c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	015a      	lsls	r2, r3, #5
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	4413      	add	r3, r2
 800c466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c46a:	461a      	mov	r2, r3
 800c46c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c470:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	3301      	adds	r3, #1
 800c476:	613b      	str	r3, [r7, #16]
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d3b7      	bcc.n	800c3f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c48e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c492:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c4a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d105      	bne.n	800c4b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	699b      	ldr	r3, [r3, #24]
 800c4ac:	f043 0210 	orr.w	r2, r3, #16
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	699a      	ldr	r2, [r3, #24]
 800c4b8:	4b0e      	ldr	r3, [pc, #56]	; (800c4f4 <USB_DevInit+0x2b4>)
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d005      	beq.n	800c4d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	f043 0208 	orr.w	r2, r3, #8
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d105      	bne.n	800c4e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	699a      	ldr	r2, [r3, #24]
 800c4dc:	4b06      	ldr	r3, [pc, #24]	; (800c4f8 <USB_DevInit+0x2b8>)
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c4f0:	b004      	add	sp, #16
 800c4f2:	4770      	bx	lr
 800c4f4:	803c3800 	.word	0x803c3800
 800c4f8:	40000004 	.word	0x40000004

0800c4fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c506:	2300      	movs	r3, #0
 800c508:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	019b      	lsls	r3, r3, #6
 800c50e:	f043 0220 	orr.w	r2, r3, #32
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	3301      	adds	r3, #1
 800c51a:	60fb      	str	r3, [r7, #12]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	4a09      	ldr	r2, [pc, #36]	; (800c544 <USB_FlushTxFifo+0x48>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d901      	bls.n	800c528 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e006      	b.n	800c536 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	f003 0320 	and.w	r3, r3, #32
 800c530:	2b20      	cmp	r3, #32
 800c532:	d0f0      	beq.n	800c516 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
 800c542:	bf00      	nop
 800c544:	00030d40 	.word	0x00030d40

0800c548 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c548:	b480      	push	{r7}
 800c54a:	b085      	sub	sp, #20
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2210      	movs	r2, #16
 800c558:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3301      	adds	r3, #1
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	4a09      	ldr	r2, [pc, #36]	; (800c588 <USB_FlushRxFifo+0x40>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d901      	bls.n	800c56c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c568:	2303      	movs	r3, #3
 800c56a:	e006      	b.n	800c57a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	691b      	ldr	r3, [r3, #16]
 800c570:	f003 0310 	and.w	r3, r3, #16
 800c574:	2b10      	cmp	r3, #16
 800c576:	d0f0      	beq.n	800c55a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	00030d40 	.word	0x00030d40

0800c58c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b085      	sub	sp, #20
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	460b      	mov	r3, r1
 800c596:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	78fb      	ldrb	r3, [r7, #3]
 800c5a6:	68f9      	ldr	r1, [r7, #12]
 800c5a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c5b0:	2300      	movs	r3, #0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3714      	adds	r7, #20
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5bc:	4770      	bx	lr

0800c5be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c5be:	b580      	push	{r7, lr}
 800c5c0:	b084      	sub	sp, #16
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5d8:	f043 0302 	orr.w	r3, r3, #2
 800c5dc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c5de:	2003      	movs	r0, #3
 800c5e0:	f7f5 ff3e 	bl	8002460 <HAL_Delay>

  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
	...

0800c5f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b085      	sub	sp, #20
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	3301      	adds	r3, #1
 800c600:	60fb      	str	r3, [r7, #12]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	4a13      	ldr	r2, [pc, #76]	; (800c654 <USB_CoreReset+0x64>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d901      	bls.n	800c60e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c60a:	2303      	movs	r3, #3
 800c60c:	e01b      	b.n	800c646 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	2b00      	cmp	r3, #0
 800c614:	daf2      	bge.n	800c5fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c616:	2300      	movs	r3, #0
 800c618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	f043 0201 	orr.w	r2, r3, #1
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3301      	adds	r3, #1
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	4a09      	ldr	r2, [pc, #36]	; (800c654 <USB_CoreReset+0x64>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d901      	bls.n	800c638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c634:	2303      	movs	r3, #3
 800c636:	e006      	b.n	800c646 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	f003 0301 	and.w	r3, r3, #1
 800c640:	2b01      	cmp	r3, #1
 800c642:	d0f0      	beq.n	800c626 <USB_CoreReset+0x36>

  return HAL_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3714      	adds	r7, #20
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	00030d40 	.word	0x00030d40

0800c658 <arm_max_no_idx_f32>:
 800c658:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c67c <arm_max_no_idx_f32+0x24>
 800c65c:	b151      	cbz	r1, 800c674 <arm_max_no_idx_f32+0x1c>
 800c65e:	ecb0 7a01 	vldmia	r0!, {s14}
 800c662:	eef4 7a47 	vcmp.f32	s15, s14
 800c666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c66a:	bf48      	it	mi
 800c66c:	eef0 7a47 	vmovmi.f32	s15, s14
 800c670:	3901      	subs	r1, #1
 800c672:	d1f4      	bne.n	800c65e <arm_max_no_idx_f32+0x6>
 800c674:	edc2 7a00 	vstr	s15, [r2]
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	ff7fffff 	.word	0xff7fffff

0800c680 <arm_dot_prod_f32>:
 800c680:	b4f0      	push	{r4, r5, r6, r7}
 800c682:	0897      	lsrs	r7, r2, #2
 800c684:	d053      	beq.n	800c72e <arm_dot_prod_f32+0xae>
 800c686:	f100 0510 	add.w	r5, r0, #16
 800c68a:	f101 0410 	add.w	r4, r1, #16
 800c68e:	463e      	mov	r6, r7
 800c690:	eddf 7a28 	vldr	s15, [pc, #160]	; 800c734 <arm_dot_prod_f32+0xb4>
 800c694:	ed14 7a04 	vldr	s14, [r4, #-16]
 800c698:	3e01      	subs	r6, #1
 800c69a:	ed15 6a04 	vldr	s12, [r5, #-16]
 800c69e:	f104 0410 	add.w	r4, r4, #16
 800c6a2:	ed54 5a07 	vldr	s11, [r4, #-28]	; 0xffffffe4
 800c6a6:	f105 0510 	add.w	r5, r5, #16
 800c6aa:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c6ae:	ed55 6a07 	vldr	s13, [r5, #-28]	; 0xffffffe4
 800c6b2:	ed15 7a06 	vldr	s14, [r5, #-24]	; 0xffffffe8
 800c6b6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800c6ba:	ed54 5a06 	vldr	s11, [r4, #-24]	; 0xffffffe8
 800c6be:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c6c2:	ed55 7a05 	vldr	s15, [r5, #-20]	; 0xffffffec
 800c6c6:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c6ca:	ed54 5a05 	vldr	s11, [r4, #-20]	; 0xffffffec
 800c6ce:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c6d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c6d6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c6da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6de:	d1d9      	bne.n	800c694 <arm_dot_prod_f32+0x14>
 800c6e0:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800c6e4:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800c6e8:	f012 0203 	ands.w	r2, r2, #3
 800c6ec:	d01b      	beq.n	800c726 <arm_dot_prod_f32+0xa6>
 800c6ee:	ed91 7a00 	vldr	s14, [r1]
 800c6f2:	3a01      	subs	r2, #1
 800c6f4:	edd0 6a00 	vldr	s13, [r0]
 800c6f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c6fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c700:	d011      	beq.n	800c726 <arm_dot_prod_f32+0xa6>
 800c702:	ed91 7a01 	vldr	s14, [r1, #4]
 800c706:	2a01      	cmp	r2, #1
 800c708:	edd0 6a01 	vldr	s13, [r0, #4]
 800c70c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c710:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c714:	d007      	beq.n	800c726 <arm_dot_prod_f32+0xa6>
 800c716:	ed90 7a02 	vldr	s14, [r0, #8]
 800c71a:	edd1 6a02 	vldr	s13, [r1, #8]
 800c71e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c722:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c726:	edc3 7a00 	vstr	s15, [r3]
 800c72a:	bcf0      	pop	{r4, r5, r6, r7}
 800c72c:	4770      	bx	lr
 800c72e:	eddf 7a01 	vldr	s15, [pc, #4]	; 800c734 <arm_dot_prod_f32+0xb4>
 800c732:	e7d9      	b.n	800c6e8 <arm_dot_prod_f32+0x68>
 800c734:	00000000 	.word	0x00000000

0800c738 <__errno>:
 800c738:	4b01      	ldr	r3, [pc, #4]	; (800c740 <__errno+0x8>)
 800c73a:	6818      	ldr	r0, [r3, #0]
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	24000014 	.word	0x24000014

0800c744 <__libc_init_array>:
 800c744:	b570      	push	{r4, r5, r6, lr}
 800c746:	4e0d      	ldr	r6, [pc, #52]	; (800c77c <__libc_init_array+0x38>)
 800c748:	4c0d      	ldr	r4, [pc, #52]	; (800c780 <__libc_init_array+0x3c>)
 800c74a:	1ba4      	subs	r4, r4, r6
 800c74c:	10a4      	asrs	r4, r4, #2
 800c74e:	2500      	movs	r5, #0
 800c750:	42a5      	cmp	r5, r4
 800c752:	d109      	bne.n	800c768 <__libc_init_array+0x24>
 800c754:	4e0b      	ldr	r6, [pc, #44]	; (800c784 <__libc_init_array+0x40>)
 800c756:	4c0c      	ldr	r4, [pc, #48]	; (800c788 <__libc_init_array+0x44>)
 800c758:	f000 f94c 	bl	800c9f4 <_init>
 800c75c:	1ba4      	subs	r4, r4, r6
 800c75e:	10a4      	asrs	r4, r4, #2
 800c760:	2500      	movs	r5, #0
 800c762:	42a5      	cmp	r5, r4
 800c764:	d105      	bne.n	800c772 <__libc_init_array+0x2e>
 800c766:	bd70      	pop	{r4, r5, r6, pc}
 800c768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c76c:	4798      	blx	r3
 800c76e:	3501      	adds	r5, #1
 800c770:	e7ee      	b.n	800c750 <__libc_init_array+0xc>
 800c772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c776:	4798      	blx	r3
 800c778:	3501      	adds	r5, #1
 800c77a:	e7f2      	b.n	800c762 <__libc_init_array+0x1e>
 800c77c:	0800ca8c 	.word	0x0800ca8c
 800c780:	0800ca8c 	.word	0x0800ca8c
 800c784:	0800ca8c 	.word	0x0800ca8c
 800c788:	0800ca90 	.word	0x0800ca90

0800c78c <memmove>:
 800c78c:	4288      	cmp	r0, r1
 800c78e:	b510      	push	{r4, lr}
 800c790:	eb01 0302 	add.w	r3, r1, r2
 800c794:	d807      	bhi.n	800c7a6 <memmove+0x1a>
 800c796:	1e42      	subs	r2, r0, #1
 800c798:	4299      	cmp	r1, r3
 800c79a:	d00a      	beq.n	800c7b2 <memmove+0x26>
 800c79c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c7a4:	e7f8      	b.n	800c798 <memmove+0xc>
 800c7a6:	4283      	cmp	r3, r0
 800c7a8:	d9f5      	bls.n	800c796 <memmove+0xa>
 800c7aa:	1881      	adds	r1, r0, r2
 800c7ac:	1ad2      	subs	r2, r2, r3
 800c7ae:	42d3      	cmn	r3, r2
 800c7b0:	d100      	bne.n	800c7b4 <memmove+0x28>
 800c7b2:	bd10      	pop	{r4, pc}
 800c7b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c7bc:	e7f7      	b.n	800c7ae <memmove+0x22>

0800c7be <memset>:
 800c7be:	4402      	add	r2, r0
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d100      	bne.n	800c7c8 <memset+0xa>
 800c7c6:	4770      	bx	lr
 800c7c8:	f803 1b01 	strb.w	r1, [r3], #1
 800c7cc:	e7f9      	b.n	800c7c2 <memset+0x4>
	...

0800c7d0 <srand>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4b0d      	ldr	r3, [pc, #52]	; (800c808 <srand+0x38>)
 800c7d4:	681c      	ldr	r4, [r3, #0]
 800c7d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c7d8:	4605      	mov	r5, r0
 800c7da:	b97b      	cbnz	r3, 800c7fc <srand+0x2c>
 800c7dc:	2018      	movs	r0, #24
 800c7de:	f000 f84f 	bl	800c880 <malloc>
 800c7e2:	4a0a      	ldr	r2, [pc, #40]	; (800c80c <srand+0x3c>)
 800c7e4:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <srand+0x40>)
 800c7e6:	63a0      	str	r0, [r4, #56]	; 0x38
 800c7e8:	e9c0 2300 	strd	r2, r3, [r0]
 800c7ec:	4b09      	ldr	r3, [pc, #36]	; (800c814 <srand+0x44>)
 800c7ee:	6083      	str	r3, [r0, #8]
 800c7f0:	230b      	movs	r3, #11
 800c7f2:	8183      	strh	r3, [r0, #12]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c7fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c7fe:	2200      	movs	r2, #0
 800c800:	611d      	str	r5, [r3, #16]
 800c802:	615a      	str	r2, [r3, #20]
 800c804:	bd38      	pop	{r3, r4, r5, pc}
 800c806:	bf00      	nop
 800c808:	24000014 	.word	0x24000014
 800c80c:	abcd330e 	.word	0xabcd330e
 800c810:	e66d1234 	.word	0xe66d1234
 800c814:	0005deec 	.word	0x0005deec

0800c818 <rand>:
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	4b13      	ldr	r3, [pc, #76]	; (800c868 <rand+0x50>)
 800c81c:	681c      	ldr	r4, [r3, #0]
 800c81e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c820:	b97b      	cbnz	r3, 800c842 <rand+0x2a>
 800c822:	2018      	movs	r0, #24
 800c824:	f000 f82c 	bl	800c880 <malloc>
 800c828:	4a10      	ldr	r2, [pc, #64]	; (800c86c <rand+0x54>)
 800c82a:	4b11      	ldr	r3, [pc, #68]	; (800c870 <rand+0x58>)
 800c82c:	63a0      	str	r0, [r4, #56]	; 0x38
 800c82e:	e9c0 2300 	strd	r2, r3, [r0]
 800c832:	4b10      	ldr	r3, [pc, #64]	; (800c874 <rand+0x5c>)
 800c834:	6083      	str	r3, [r0, #8]
 800c836:	230b      	movs	r3, #11
 800c838:	8183      	strh	r3, [r0, #12]
 800c83a:	2201      	movs	r2, #1
 800c83c:	2300      	movs	r3, #0
 800c83e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c842:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c844:	480c      	ldr	r0, [pc, #48]	; (800c878 <rand+0x60>)
 800c846:	690a      	ldr	r2, [r1, #16]
 800c848:	694b      	ldr	r3, [r1, #20]
 800c84a:	4c0c      	ldr	r4, [pc, #48]	; (800c87c <rand+0x64>)
 800c84c:	4350      	muls	r0, r2
 800c84e:	fb04 0003 	mla	r0, r4, r3, r0
 800c852:	fba2 2304 	umull	r2, r3, r2, r4
 800c856:	4403      	add	r3, r0
 800c858:	1c54      	adds	r4, r2, #1
 800c85a:	f143 0500 	adc.w	r5, r3, #0
 800c85e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800c862:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	24000014 	.word	0x24000014
 800c86c:	abcd330e 	.word	0xabcd330e
 800c870:	e66d1234 	.word	0xe66d1234
 800c874:	0005deec 	.word	0x0005deec
 800c878:	5851f42d 	.word	0x5851f42d
 800c87c:	4c957f2d 	.word	0x4c957f2d

0800c880 <malloc>:
 800c880:	4b02      	ldr	r3, [pc, #8]	; (800c88c <malloc+0xc>)
 800c882:	4601      	mov	r1, r0
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	f000 b803 	b.w	800c890 <_malloc_r>
 800c88a:	bf00      	nop
 800c88c:	24000014 	.word	0x24000014

0800c890 <_malloc_r>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	1ccd      	adds	r5, r1, #3
 800c894:	f025 0503 	bic.w	r5, r5, #3
 800c898:	3508      	adds	r5, #8
 800c89a:	2d0c      	cmp	r5, #12
 800c89c:	bf38      	it	cc
 800c89e:	250c      	movcc	r5, #12
 800c8a0:	2d00      	cmp	r5, #0
 800c8a2:	4606      	mov	r6, r0
 800c8a4:	db01      	blt.n	800c8aa <_malloc_r+0x1a>
 800c8a6:	42a9      	cmp	r1, r5
 800c8a8:	d903      	bls.n	800c8b2 <_malloc_r+0x22>
 800c8aa:	230c      	movs	r3, #12
 800c8ac:	6033      	str	r3, [r6, #0]
 800c8ae:	2000      	movs	r0, #0
 800c8b0:	bd70      	pop	{r4, r5, r6, pc}
 800c8b2:	f000 f857 	bl	800c964 <__malloc_lock>
 800c8b6:	4a21      	ldr	r2, [pc, #132]	; (800c93c <_malloc_r+0xac>)
 800c8b8:	6814      	ldr	r4, [r2, #0]
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	b991      	cbnz	r1, 800c8e4 <_malloc_r+0x54>
 800c8be:	4c20      	ldr	r4, [pc, #128]	; (800c940 <_malloc_r+0xb0>)
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	b91b      	cbnz	r3, 800c8cc <_malloc_r+0x3c>
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f000 f83d 	bl	800c944 <_sbrk_r>
 800c8ca:	6020      	str	r0, [r4, #0]
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f000 f838 	bl	800c944 <_sbrk_r>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d124      	bne.n	800c922 <_malloc_r+0x92>
 800c8d8:	230c      	movs	r3, #12
 800c8da:	6033      	str	r3, [r6, #0]
 800c8dc:	4630      	mov	r0, r6
 800c8de:	f000 f842 	bl	800c966 <__malloc_unlock>
 800c8e2:	e7e4      	b.n	800c8ae <_malloc_r+0x1e>
 800c8e4:	680b      	ldr	r3, [r1, #0]
 800c8e6:	1b5b      	subs	r3, r3, r5
 800c8e8:	d418      	bmi.n	800c91c <_malloc_r+0x8c>
 800c8ea:	2b0b      	cmp	r3, #11
 800c8ec:	d90f      	bls.n	800c90e <_malloc_r+0x7e>
 800c8ee:	600b      	str	r3, [r1, #0]
 800c8f0:	50cd      	str	r5, [r1, r3]
 800c8f2:	18cc      	adds	r4, r1, r3
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f000 f836 	bl	800c966 <__malloc_unlock>
 800c8fa:	f104 000b 	add.w	r0, r4, #11
 800c8fe:	1d23      	adds	r3, r4, #4
 800c900:	f020 0007 	bic.w	r0, r0, #7
 800c904:	1ac3      	subs	r3, r0, r3
 800c906:	d0d3      	beq.n	800c8b0 <_malloc_r+0x20>
 800c908:	425a      	negs	r2, r3
 800c90a:	50e2      	str	r2, [r4, r3]
 800c90c:	e7d0      	b.n	800c8b0 <_malloc_r+0x20>
 800c90e:	428c      	cmp	r4, r1
 800c910:	684b      	ldr	r3, [r1, #4]
 800c912:	bf16      	itet	ne
 800c914:	6063      	strne	r3, [r4, #4]
 800c916:	6013      	streq	r3, [r2, #0]
 800c918:	460c      	movne	r4, r1
 800c91a:	e7eb      	b.n	800c8f4 <_malloc_r+0x64>
 800c91c:	460c      	mov	r4, r1
 800c91e:	6849      	ldr	r1, [r1, #4]
 800c920:	e7cc      	b.n	800c8bc <_malloc_r+0x2c>
 800c922:	1cc4      	adds	r4, r0, #3
 800c924:	f024 0403 	bic.w	r4, r4, #3
 800c928:	42a0      	cmp	r0, r4
 800c92a:	d005      	beq.n	800c938 <_malloc_r+0xa8>
 800c92c:	1a21      	subs	r1, r4, r0
 800c92e:	4630      	mov	r0, r6
 800c930:	f000 f808 	bl	800c944 <_sbrk_r>
 800c934:	3001      	adds	r0, #1
 800c936:	d0cf      	beq.n	800c8d8 <_malloc_r+0x48>
 800c938:	6025      	str	r5, [r4, #0]
 800c93a:	e7db      	b.n	800c8f4 <_malloc_r+0x64>
 800c93c:	24026754 	.word	0x24026754
 800c940:	24026758 	.word	0x24026758

0800c944 <_sbrk_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	4c06      	ldr	r4, [pc, #24]	; (800c960 <_sbrk_r+0x1c>)
 800c948:	2300      	movs	r3, #0
 800c94a:	4605      	mov	r5, r0
 800c94c:	4608      	mov	r0, r1
 800c94e:	6023      	str	r3, [r4, #0]
 800c950:	f7f5 fc08 	bl	8002164 <_sbrk>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_sbrk_r+0x1a>
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_sbrk_r+0x1a>
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	24026e98 	.word	0x24026e98

0800c964 <__malloc_lock>:
 800c964:	4770      	bx	lr

0800c966 <__malloc_unlock>:
 800c966:	4770      	bx	lr

0800c968 <round>:
 800c968:	ee10 3a90 	vmov	r3, s1
 800c96c:	b530      	push	{r4, r5, lr}
 800c96e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800c972:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 800c976:	2913      	cmp	r1, #19
 800c978:	ee10 5a90 	vmov	r5, s1
 800c97c:	ee10 2a10 	vmov	r2, s0
 800c980:	dc17      	bgt.n	800c9b2 <round+0x4a>
 800c982:	2900      	cmp	r1, #0
 800c984:	da09      	bge.n	800c99a <round+0x32>
 800c986:	3101      	adds	r1, #1
 800c988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c98c:	d103      	bne.n	800c996 <round+0x2e>
 800c98e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c992:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c996:	2200      	movs	r2, #0
 800c998:	e024      	b.n	800c9e4 <round+0x7c>
 800c99a:	4815      	ldr	r0, [pc, #84]	; (800c9f0 <round+0x88>)
 800c99c:	4108      	asrs	r0, r1
 800c99e:	4203      	tst	r3, r0
 800c9a0:	d100      	bne.n	800c9a4 <round+0x3c>
 800c9a2:	b16a      	cbz	r2, 800c9c0 <round+0x58>
 800c9a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c9a8:	410b      	asrs	r3, r1
 800c9aa:	442b      	add	r3, r5
 800c9ac:	ea23 0300 	bic.w	r3, r3, r0
 800c9b0:	e7f1      	b.n	800c996 <round+0x2e>
 800c9b2:	2933      	cmp	r1, #51	; 0x33
 800c9b4:	dd05      	ble.n	800c9c2 <round+0x5a>
 800c9b6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c9ba:	d101      	bne.n	800c9c0 <round+0x58>
 800c9bc:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c9c0:	bd30      	pop	{r4, r5, pc}
 800c9c2:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 800c9c6:	f04f 34ff 	mov.w	r4, #4294967295
 800c9ca:	40c4      	lsrs	r4, r0
 800c9cc:	4222      	tst	r2, r4
 800c9ce:	d0f7      	beq.n	800c9c0 <round+0x58>
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 800c9d6:	fa00 f101 	lsl.w	r1, r0, r1
 800c9da:	1852      	adds	r2, r2, r1
 800c9dc:	bf28      	it	cs
 800c9de:	181b      	addcs	r3, r3, r0
 800c9e0:	ea22 0204 	bic.w	r2, r2, r4
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4610      	mov	r0, r2
 800c9e8:	ec41 0b10 	vmov	d0, r0, r1
 800c9ec:	e7e8      	b.n	800c9c0 <round+0x58>
 800c9ee:	bf00      	nop
 800c9f0:	000fffff 	.word	0x000fffff

0800c9f4 <_init>:
 800c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f6:	bf00      	nop
 800c9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9fa:	bc08      	pop	{r3}
 800c9fc:	469e      	mov	lr, r3
 800c9fe:	4770      	bx	lr

0800ca00 <_fini>:
 800ca00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca02:	bf00      	nop
 800ca04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca06:	bc08      	pop	{r3}
 800ca08:	469e      	mov	lr, r3
 800ca0a:	4770      	bx	lr
